
B-U585I-IOT02A_ISM330DHCX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8bc  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  0800eaf8  0800eaf8  0001eaf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fa90  0800fa90  0001fa90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fa98  0800fa98  0001fa98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fa9c  0800fa9c  0001fa9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  20000000  0800faa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d44  200001e4  0800fc84  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001f28  0800fc84  00021f28  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000087  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001de39  00000000  00000000  000202a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000025aa  00000000  00000000  0003e0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001990  00000000  00000000  00040688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000013c7  00000000  00000000  00042018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00034186  00000000  00000000  000433df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018ef1  00000000  00000000  00077565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001465dd  00000000  00000000  00090456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000087c0  00000000  00000000  001d6a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000090  00000000  00000000  001df1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001e4 	.word	0x200001e4
 8000254:	00000000 	.word	0x00000000
 8000258:	0800eadc 	.word	0x0800eadc

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001e8 	.word	0x200001e8
 8000274:	0800eadc 	.word	0x0800eadc

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 b9b8 	b.w	8001018 <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f83c 	bl	8000d2c <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__aeabi_d2lz>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4604      	mov	r4, r0
 8000cc8:	460d      	mov	r5, r1
 8000cca:	f7ff ff0b 	bl	8000ae4 <__aeabi_dcmplt>
 8000cce:	b928      	cbnz	r0, 8000cdc <__aeabi_d2lz+0x1c>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	4629      	mov	r1, r5
 8000cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd8:	f000 b80a 	b.w	8000cf0 <__aeabi_d2ulz>
 8000cdc:	4620      	mov	r0, r4
 8000cde:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000ce2:	f000 f805 	bl	8000cf0 <__aeabi_d2ulz>
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cec:	bd38      	pop	{r3, r4, r5, pc}
 8000cee:	bf00      	nop

08000cf0 <__aeabi_d2ulz>:
 8000cf0:	b5d0      	push	{r4, r6, r7, lr}
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <__aeabi_d2ulz+0x34>)
 8000cf6:	4606      	mov	r6, r0
 8000cf8:	460f      	mov	r7, r1
 8000cfa:	f7ff fc81 	bl	8000600 <__aeabi_dmul>
 8000cfe:	f7ff ff57 	bl	8000bb0 <__aeabi_d2uiz>
 8000d02:	4604      	mov	r4, r0
 8000d04:	f7ff fc02 	bl	800050c <__aeabi_ui2d>
 8000d08:	2200      	movs	r2, #0
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <__aeabi_d2ulz+0x38>)
 8000d0c:	f7ff fc78 	bl	8000600 <__aeabi_dmul>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	4630      	mov	r0, r6
 8000d16:	4639      	mov	r1, r7
 8000d18:	f7ff faba 	bl	8000290 <__aeabi_dsub>
 8000d1c:	f7ff ff48 	bl	8000bb0 <__aeabi_d2uiz>
 8000d20:	4621      	mov	r1, r4
 8000d22:	bdd0      	pop	{r4, r6, r7, pc}
 8000d24:	3df00000 	.word	0x3df00000
 8000d28:	41f00000 	.word	0x41f00000

08000d2c <__udivmoddi4>:
 8000d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000d32:	460d      	mov	r5, r1
 8000d34:	4604      	mov	r4, r0
 8000d36:	460f      	mov	r7, r1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d146      	bne.n	8000dca <__udivmoddi4+0x9e>
 8000d3c:	428a      	cmp	r2, r1
 8000d3e:	4694      	mov	ip, r2
 8000d40:	d95e      	bls.n	8000e00 <__udivmoddi4+0xd4>
 8000d42:	fab2 f382 	clz	r3, r2
 8000d46:	b143      	cbz	r3, 8000d5a <__udivmoddi4+0x2e>
 8000d48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d4c:	f1c3 0220 	rsb	r2, r3, #32
 8000d50:	409f      	lsls	r7, r3
 8000d52:	409c      	lsls	r4, r3
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	4317      	orrs	r7, r2
 8000d5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d5e:	fa1f f58c 	uxth.w	r5, ip
 8000d62:	0c22      	lsrs	r2, r4, #16
 8000d64:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d6c:	fb01 f005 	mul.w	r0, r1, r5
 8000d70:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d74:	4290      	cmp	r0, r2
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x5e>
 8000d78:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d80:	d202      	bcs.n	8000d88 <__udivmoddi4+0x5c>
 8000d82:	4290      	cmp	r0, r2
 8000d84:	f200 8134 	bhi.w	8000ff0 <__udivmoddi4+0x2c4>
 8000d88:	4639      	mov	r1, r7
 8000d8a:	1a12      	subs	r2, r2, r0
 8000d8c:	b2a4      	uxth	r4, r4
 8000d8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9e:	42a5      	cmp	r5, r4
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x88>
 8000da2:	eb1c 0404 	adds.w	r4, ip, r4
 8000da6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x86>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f200 8119 	bhi.w	8000fe4 <__udivmoddi4+0x2b8>
 8000db2:	4610      	mov	r0, r2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0x9a>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xb4>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80fc 	beq.w	8000fcc <__udivmoddi4+0x2a0>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d14c      	bne.n	8000e82 <__udivmoddi4+0x156>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	f0c0 80f2 	bcc.w	8000fd2 <__udivmoddi4+0x2a6>
 8000dee:	4282      	cmp	r2, r0
 8000df0:	f240 80ef 	bls.w	8000fd2 <__udivmoddi4+0x2a6>
 8000df4:	4608      	mov	r0, r1
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0x9a>
 8000dfa:	e9c6 4700 	strd	r4, r7, [r6]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000e00:	b902      	cbnz	r2, 8000e04 <__udivmoddi4+0xd8>
 8000e02:	deff      	udf	#255	; 0xff
 8000e04:	fab2 f382 	clz	r3, r2
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f040 809f 	bne.w	8000f4c <__udivmoddi4+0x220>
 8000e0e:	1a8a      	subs	r2, r1, r2
 8000e10:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb2 f5fe 	udiv	r5, r2, lr
 8000e1e:	fb0e 2015 	mls	r0, lr, r5, r2
 8000e22:	0c22      	lsrs	r2, r4, #16
 8000e24:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e28:	fb07 f005 	mul.w	r0, r7, r5
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	d90f      	bls.n	8000e50 <__udivmoddi4+0x124>
 8000e30:	eb1c 0202 	adds.w	r2, ip, r2
 8000e34:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e38:	bf2c      	ite	cs
 8000e3a:	f04f 0901 	movcs.w	r9, #1
 8000e3e:	f04f 0900 	movcc.w	r9, #0
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d903      	bls.n	8000e4e <__udivmoddi4+0x122>
 8000e46:	f1b9 0f00 	cmp.w	r9, #0
 8000e4a:	f000 80ce 	beq.w	8000fea <__udivmoddi4+0x2be>
 8000e4e:	4645      	mov	r5, r8
 8000e50:	1a12      	subs	r2, r2, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e58:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e5c:	fb00 f707 	mul.w	r7, r0, r7
 8000e60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x14e>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x14c>
 8000e72:	42a7      	cmp	r7, r4
 8000e74:	f200 80b3 	bhi.w	8000fde <__udivmoddi4+0x2b2>
 8000e78:	4610      	mov	r0, r2
 8000e7a:	1be4      	subs	r4, r4, r7
 8000e7c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e80:	e79c      	b.n	8000dbc <__udivmoddi4+0x90>
 8000e82:	f1c1 0420 	rsb	r4, r1, #32
 8000e86:	408b      	lsls	r3, r1
 8000e88:	fa05 fc01 	lsl.w	ip, r5, r1
 8000e8c:	fa22 f704 	lsr.w	r7, r2, r4
 8000e90:	40e5      	lsrs	r5, r4
 8000e92:	408a      	lsls	r2, r1
 8000e94:	431f      	orrs	r7, r3
 8000e96:	fa20 f304 	lsr.w	r3, r0, r4
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ea0:	ea43 030c 	orr.w	r3, r3, ip
 8000ea4:	fa1f fc87 	uxth.w	ip, r7
 8000ea8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eac:	fbb5 fef8 	udiv	lr, r5, r8
 8000eb0:	fb08 551e 	mls	r5, r8, lr, r5
 8000eb4:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a9      	cmp	r9, r5
 8000ebe:	d90e      	bls.n	8000ede <__udivmoddi4+0x1b2>
 8000ec0:	197d      	adds	r5, r7, r5
 8000ec2:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 8000ec6:	bf2c      	ite	cs
 8000ec8:	f04f 0b01 	movcs.w	fp, #1
 8000ecc:	f04f 0b00 	movcc.w	fp, #0
 8000ed0:	45a9      	cmp	r9, r5
 8000ed2:	d903      	bls.n	8000edc <__udivmoddi4+0x1b0>
 8000ed4:	f1bb 0f00 	cmp.w	fp, #0
 8000ed8:	f000 808d 	beq.w	8000ff6 <__udivmoddi4+0x2ca>
 8000edc:	46d6      	mov	lr, sl
 8000ede:	eba5 0509 	sub.w	r5, r5, r9
 8000ee2:	fa1f f983 	uxth.w	r9, r3
 8000ee6:	fbb5 f3f8 	udiv	r3, r5, r8
 8000eea:	fb08 5513 	mls	r5, r8, r3, r5
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000ef6:	45ac      	cmp	ip, r5
 8000ef8:	d906      	bls.n	8000f08 <__udivmoddi4+0x1dc>
 8000efa:	197d      	adds	r5, r7, r5
 8000efc:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f00:	d201      	bcs.n	8000f06 <__udivmoddi4+0x1da>
 8000f02:	45ac      	cmp	ip, r5
 8000f04:	d87e      	bhi.n	8001004 <__udivmoddi4+0x2d8>
 8000f06:	4643      	mov	r3, r8
 8000f08:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000f0c:	eba5 050c 	sub.w	r5, r5, ip
 8000f10:	fba3 9802 	umull	r9, r8, r3, r2
 8000f14:	4545      	cmp	r5, r8
 8000f16:	46ce      	mov	lr, r9
 8000f18:	46c4      	mov	ip, r8
 8000f1a:	d302      	bcc.n	8000f22 <__udivmoddi4+0x1f6>
 8000f1c:	d106      	bne.n	8000f2c <__udivmoddi4+0x200>
 8000f1e:	4548      	cmp	r0, r9
 8000f20:	d204      	bcs.n	8000f2c <__udivmoddi4+0x200>
 8000f22:	3b01      	subs	r3, #1
 8000f24:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f28:	eb68 0c07 	sbc.w	ip, r8, r7
 8000f2c:	2e00      	cmp	r6, #0
 8000f2e:	d06f      	beq.n	8001010 <__udivmoddi4+0x2e4>
 8000f30:	ebb0 020e 	subs.w	r2, r0, lr
 8000f34:	eb65 050c 	sbc.w	r5, r5, ip
 8000f38:	40ca      	lsrs	r2, r1
 8000f3a:	fa05 f404 	lsl.w	r4, r5, r4
 8000f3e:	40cd      	lsrs	r5, r1
 8000f40:	4618      	mov	r0, r3
 8000f42:	4314      	orrs	r4, r2
 8000f44:	2100      	movs	r1, #0
 8000f46:	e9c6 4500 	strd	r4, r5, [r6]
 8000f4a:	e73c      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000f4c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f50:	f1c3 0220 	rsb	r2, r3, #32
 8000f54:	4099      	lsls	r1, r3
 8000f56:	409c      	lsls	r4, r3
 8000f58:	40d5      	lsrs	r5, r2
 8000f5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f5e:	fa20 f202 	lsr.w	r2, r0, r2
 8000f62:	fa1f f78c 	uxth.w	r7, ip
 8000f66:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f70:	0c11      	lsrs	r1, r2, #16
 8000f72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f76:	fb00 f507 	mul.w	r5, r0, r7
 8000f7a:	428d      	cmp	r5, r1
 8000f7c:	d90e      	bls.n	8000f9c <__udivmoddi4+0x270>
 8000f7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f82:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f86:	bf2c      	ite	cs
 8000f88:	f04f 0901 	movcs.w	r9, #1
 8000f8c:	f04f 0900 	movcc.w	r9, #0
 8000f90:	428d      	cmp	r5, r1
 8000f92:	d902      	bls.n	8000f9a <__udivmoddi4+0x26e>
 8000f94:	f1b9 0f00 	cmp.w	r9, #0
 8000f98:	d031      	beq.n	8000ffe <__udivmoddi4+0x2d2>
 8000f9a:	4640      	mov	r0, r8
 8000f9c:	1b49      	subs	r1, r1, r5
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	fbb1 f5fe 	udiv	r5, r1, lr
 8000fa4:	fb0e 1115 	mls	r1, lr, r5, r1
 8000fa8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fac:	fb05 f107 	mul.w	r1, r5, r7
 8000fb0:	4291      	cmp	r1, r2
 8000fb2:	d907      	bls.n	8000fc4 <__udivmoddi4+0x298>
 8000fb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fb8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000fbc:	d201      	bcs.n	8000fc2 <__udivmoddi4+0x296>
 8000fbe:	4291      	cmp	r1, r2
 8000fc0:	d823      	bhi.n	800100a <__udivmoddi4+0x2de>
 8000fc2:	4645      	mov	r5, r8
 8000fc4:	1a52      	subs	r2, r2, r1
 8000fc6:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fca:	e726      	b.n	8000e1a <__udivmoddi4+0xee>
 8000fcc:	4631      	mov	r1, r6
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e6f9      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8000fd2:	1a84      	subs	r4, r0, r2
 8000fd4:	eb65 0203 	sbc.w	r2, r5, r3
 8000fd8:	2001      	movs	r0, #1
 8000fda:	4617      	mov	r7, r2
 8000fdc:	e70b      	b.n	8000df6 <__udivmoddi4+0xca>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e74a      	b.n	8000e7a <__udivmoddi4+0x14e>
 8000fe4:	4464      	add	r4, ip
 8000fe6:	3802      	subs	r0, #2
 8000fe8:	e6e4      	b.n	8000db4 <__udivmoddi4+0x88>
 8000fea:	3d02      	subs	r5, #2
 8000fec:	4462      	add	r2, ip
 8000fee:	e72f      	b.n	8000e50 <__udivmoddi4+0x124>
 8000ff0:	3902      	subs	r1, #2
 8000ff2:	4462      	add	r2, ip
 8000ff4:	e6c9      	b.n	8000d8a <__udivmoddi4+0x5e>
 8000ff6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ffa:	443d      	add	r5, r7
 8000ffc:	e76f      	b.n	8000ede <__udivmoddi4+0x1b2>
 8000ffe:	3802      	subs	r0, #2
 8001000:	4461      	add	r1, ip
 8001002:	e7cb      	b.n	8000f9c <__udivmoddi4+0x270>
 8001004:	3b02      	subs	r3, #2
 8001006:	443d      	add	r5, r7
 8001008:	e77e      	b.n	8000f08 <__udivmoddi4+0x1dc>
 800100a:	3d02      	subs	r5, #2
 800100c:	4462      	add	r2, ip
 800100e:	e7d9      	b.n	8000fc4 <__udivmoddi4+0x298>
 8001010:	4618      	mov	r0, r3
 8001012:	4631      	mov	r1, r6
 8001014:	e6d7      	b.n	8000dc6 <__udivmoddi4+0x9a>
 8001016:	bf00      	nop

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop

0800101c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <main+0x94>)
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <main+0x98>)
 8001026:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001028:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <main+0x94>)
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <main+0x9c>)
 800102c:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c2;
 800102e:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <main+0x94>)
 8001030:	4a22      	ldr	r2, [pc, #136]	; (80010bc <main+0xa0>)
 8001032:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f001 f88a 	bl	800214c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f84e 	bl	80010d8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800103c:	f000 f8a8 	bl	8001190 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f94a 	bl	80012d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001044:	f000 f8fc 	bl	8001240 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001048:	f000 f8b2 	bl	80011b0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  KIN1_InitCycleCounter();
 800104c:	4b1c      	ldr	r3, [pc, #112]	; (80010c0 <main+0xa4>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1b      	ldr	r2, [pc, #108]	; (80010c0 <main+0xa4>)
 8001052:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001056:	6013      	str	r3, [r2, #0]
  KIN1_EnableCycleCounter();
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <main+0xa8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <main+0xa8>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	6013      	str	r3, [r2, #0]
  ism330dhcx_initialize();
 8001064:	f000 fc6a 	bl	800193c <ism330dhcx_initialize>
  if (NEAI_MODE) {
	  enum neai_state error_code = neai_classification_init(knowledge);
 8001068:	4817      	ldr	r0, [pc, #92]	; (80010c8 <main+0xac>)
 800106a:	f007 feb9 	bl	8008de0 <neai_classification_init>
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	if (error_code != NEAI_OK) {
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d007      	beq.n	8001088 <main+0x6c>
	  printf("Knowledge initialization ERROR: %d\r\n", error_code);
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4619      	mov	r1, r3
 800107c:	4813      	ldr	r0, [pc, #76]	; (80010cc <main+0xb0>)
 800107e:	f009 f901 	bl	800a284 <iprintf>
	  Error_Handler();
 8001082:	f000 fe19 	bl	8001cb8 <Error_Handler>
 8001086:	e002      	b.n	800108e <main+0x72>
	} else {
	  printf("Knowledge initialization done\r\n");
 8001088:	4811      	ldr	r0, [pc, #68]	; (80010d0 <main+0xb4>)
 800108a:	f009 f961 	bl	800a350 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
      switch (appState) {
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <main+0xb8>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	b2db      	uxtb	r3, r3
 8001094:	2b00      	cmp	r3, #0
 8001096:	d008      	beq.n	80010aa <main+0x8e>
 8001098:	2b01      	cmp	r3, #1
 800109a:	d102      	bne.n	80010a2 <main+0x86>
          case LOG:
              // Log(); // Implement if needed
              break;
          case INFERENCE:
              Inference();
 800109c:	f000 fcca 	bl	8001a34 <Inference>
              break;
 80010a0:	e004      	b.n	80010ac <main+0x90>
          default:
              appState = INFERENCE;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <main+0xb8>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
              break;
 80010a8:	e000      	b.n	80010ac <main+0x90>
              break;
 80010aa:	bf00      	nop
      switch (appState) {
 80010ac:	e7ef      	b.n	800108e <main+0x72>
 80010ae:	bf00      	nop
 80010b0:	200002ec 	.word	0x200002ec
 80010b4:	080018b9 	.word	0x080018b9
 80010b8:	080018f5 	.word	0x080018f5
 80010bc:	20000200 	.word	0x20000200
 80010c0:	e000edfc 	.word	0xe000edfc
 80010c4:	e0001000 	.word	0xe0001000
 80010c8:	0800eb6c 	.word	0x0800eb6c
 80010cc:	0800eb10 	.word	0x0800eb10
 80010d0:	0800eb38 	.word	0x0800eb38
 80010d4:	20000000 	.word	0x20000000

080010d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b09e      	sub	sp, #120	; 0x78
 80010dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010de:	f107 0318 	add.w	r3, r7, #24
 80010e2:	2260      	movs	r2, #96	; 0x60
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 fa32 	bl	800a550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ec:	463b      	mov	r3, r7
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
 80010fa:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010fc:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001100:	f002 fa58 	bl	80035b4 <HAL_PWREx_ControlVoltageScaling>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800110a:	f000 fdd5 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800110e:	2310      	movs	r3, #16
 8001110:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001112:	2301      	movs	r3, #1
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001116:	2310      	movs	r3, #16
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800111a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
 8001122:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001124:	2301      	movs	r3, #1
 8001126:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800112c:	2301      	movs	r3, #1
 800112e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001130:	2350      	movs	r3, #80	; 0x50
 8001132:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001138:	2302      	movs	r3, #2
 800113a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8001140:	2300      	movs	r3, #0
 8001142:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001144:	2300      	movs	r3, #0
 8001146:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fb2d 	bl	80037ac <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001158:	f000 fdae 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	231f      	movs	r3, #31
 800115e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2303      	movs	r3, #3
 8001162:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f003 f9f3 	bl	8004564 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001184:	f000 fd98 	bl	8001cb8 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3778      	adds	r7, #120	; 0x78
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001194:	f002 faea 	bl	800376c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001198:	f002 faf8 	bl	800378c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800119c:	2002      	movs	r0, #2
 800119e:	f002 fa95 	bl	80036cc <HAL_PWREx_ConfigSupply>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemPower_Config+0x1c>
  {
    Error_Handler();
 80011a8:	f000 fd86 	bl	8001cb8 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_I2C2_Init+0x84>)
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <MX_I2C2_Init+0x88>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00701F6B;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_I2C2_Init+0x84>)
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <MX_I2C2_Init+0x8c>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_I2C2_Init+0x84>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_I2C2_Init+0x84>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_I2C2_Init+0x84>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_I2C2_Init+0x84>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_I2C2_Init+0x84>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_I2C2_Init+0x84>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_I2C2_Init+0x84>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011ea:	4812      	ldr	r0, [pc, #72]	; (8001234 <MX_I2C2_Init+0x84>)
 80011ec:	f001 fb87 	bl	80028fe <HAL_I2C_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011f6:	f000 fd5f 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fa:	2100      	movs	r1, #0
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_I2C2_Init+0x84>)
 80011fe:	f002 f8f3 	bl	80033e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001208:	f000 fd56 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800120c:	2100      	movs	r1, #0
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <MX_I2C2_Init+0x84>)
 8001210:	f002 f935 	bl	800347e <HAL_I2CEx_ConfigDigitalFilter>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800121a:	f000 fd4d 	bl	8001cb8 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  if (HAL_I2CEx_ConfigFastModePlus(&hi2c2, I2C_FASTMODEPLUS_ENABLE) != HAL_OK)
 800121e:	2100      	movs	r1, #0
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C2_Init+0x84>)
 8001222:	f002 f978 	bl	8003516 <HAL_I2CEx_ConfigFastModePlus>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x80>
  {
    Error_Handler();
 800122c:	f000 fd44 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000200 	.word	0x20000200
 8001238:	40005800 	.word	0x40005800
 800123c:	00701f6b 	.word	0x00701f6b

08001240 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001246:	4a23      	ldr	r2, [pc, #140]	; (80012d4 <MX_USART1_UART_Init+0x94>)
 8001248:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001266:	220c      	movs	r2, #12
 8001268:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800127e:	2200      	movs	r2, #0
 8001280:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 8001284:	2200      	movs	r2, #0
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001288:	4811      	ldr	r0, [pc, #68]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800128a:	f006 fa4b 	bl	8007724 <HAL_UART_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001294:	f000 fd10 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001298:	2100      	movs	r1, #0
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 800129c:	f006 ff24 	bl	80080e8 <HAL_UARTEx_SetTxFifoThreshold>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80012a6:	f000 fd07 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012aa:	2100      	movs	r1, #0
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 80012ae:	f006 ff59 	bl	8008164 <HAL_UARTEx_SetRxFifoThreshold>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80012b8:	f000 fcfe 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012bc:	4804      	ldr	r0, [pc, #16]	; (80012d0 <MX_USART1_UART_Init+0x90>)
 80012be:	f006 feda 	bl	8008076 <HAL_UARTEx_DisableFifoMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80012c8:	f000 fcf6 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000254 	.word	0x20000254
 80012d4:	40013800 	.word	0x40013800

080012d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ee:	4bbe      	ldr	r3, [pc, #760]	; (80015e8 <MX_GPIO_Init+0x310>)
 80012f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012f4:	4abc      	ldr	r2, [pc, #752]	; (80015e8 <MX_GPIO_Init+0x310>)
 80012f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012fe:	4bba      	ldr	r3, [pc, #744]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	623b      	str	r3, [r7, #32]
 800130a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800130c:	4bb6      	ldr	r3, [pc, #728]	; (80015e8 <MX_GPIO_Init+0x310>)
 800130e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001312:	4ab5      	ldr	r2, [pc, #724]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001314:	f043 0304 	orr.w	r3, r3, #4
 8001318:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800131c:	4bb2      	ldr	r3, [pc, #712]	; (80015e8 <MX_GPIO_Init+0x310>)
 800131e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001322:	f003 0304 	and.w	r3, r3, #4
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4baf      	ldr	r3, [pc, #700]	; (80015e8 <MX_GPIO_Init+0x310>)
 800132c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001330:	4aad      	ldr	r2, [pc, #692]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800133a:	4bab      	ldr	r3, [pc, #684]	; (80015e8 <MX_GPIO_Init+0x310>)
 800133c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001348:	4ba7      	ldr	r3, [pc, #668]	; (80015e8 <MX_GPIO_Init+0x310>)
 800134a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800134e:	4aa6      	ldr	r2, [pc, #664]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001358:	4ba3      	ldr	r3, [pc, #652]	; (80015e8 <MX_GPIO_Init+0x310>)
 800135a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	4ba0      	ldr	r3, [pc, #640]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001368:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800136c:	4a9e      	ldr	r2, [pc, #632]	; (80015e8 <MX_GPIO_Init+0x310>)
 800136e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001372:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001376:	4b9c      	ldr	r3, [pc, #624]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800137c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	4b98      	ldr	r3, [pc, #608]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800138a:	4a97      	ldr	r2, [pc, #604]	; (80015e8 <MX_GPIO_Init+0x310>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001394:	4b94      	ldr	r3, [pc, #592]	; (80015e8 <MX_GPIO_Init+0x310>)
 8001396:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013a8:	4a8f      	ldr	r2, [pc, #572]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013b2:	4b8d      	ldr	r3, [pc, #564]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c0:	4b89      	ldr	r3, [pc, #548]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c6:	4a88      	ldr	r2, [pc, #544]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d0:	4b85      	ldr	r3, [pc, #532]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013de:	4b82      	ldr	r3, [pc, #520]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e4:	4a80      	ldr	r2, [pc, #512]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013ee:	4b7e      	ldr	r3, [pc, #504]	; (80015e8 <MX_GPIO_Init+0x310>)
 80013f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013f4:	f003 0320 	and.w	r3, r3, #32
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2120      	movs	r1, #32
 8001400:	487a      	ldr	r0, [pc, #488]	; (80015ec <MX_GPIO_Init+0x314>)
 8001402:	f001 fa33 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	21c2      	movs	r1, #194	; 0xc2
 800140a:	4879      	ldr	r0, [pc, #484]	; (80015f0 <MX_GPIO_Init+0x318>)
 800140c:	f001 fa2e 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2140      	movs	r1, #64	; 0x40
 8001414:	4877      	ldr	r0, [pc, #476]	; (80015f4 <MX_GPIO_Init+0x31c>)
 8001416:	f001 fa29 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2102      	movs	r1, #2
 800141e:	4876      	ldr	r0, [pc, #472]	; (80015f8 <MX_GPIO_Init+0x320>)
 8001420:	f001 fa24 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 800142a:	4874      	ldr	r0, [pc, #464]	; (80015fc <MX_GPIO_Init+0x324>)
 800142c:	f001 fa1e 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001430:	f248 0324 	movw	r3, #32804	; 0x8024
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	486b      	ldr	r0, [pc, #428]	; (80015f4 <MX_GPIO_Init+0x31c>)
 8001446:	f001 f839 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_UART4_RX_Pin WRLS_UART4_TX_Pin */
  GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 800144a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800145c:	2308      	movs	r3, #8
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4864      	ldr	r0, [pc, #400]	; (80015f8 <MX_GPIO_Init+0x320>)
 8001468:	f001 f828 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC1_Pin;
 800146c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001472:	2303      	movs	r3, #3
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC1_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	485f      	ldr	r0, [pc, #380]	; (8001600 <MX_GPIO_Init+0x328>)
 8001482:	f001 f81b 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_F_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8001486:	2320      	movs	r3, #32
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001496:	2305      	movs	r3, #5
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4858      	ldr	r0, [pc, #352]	; (8001604 <MX_GPIO_Init+0x32c>)
 80014a2:	f001 f80b 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO5_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80014a6:	2301      	movs	r3, #1
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80014b6:	2303      	movs	r3, #3
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4850      	ldr	r0, [pc, #320]	; (8001604 <MX_GPIO_Init+0x32c>)
 80014c2:	f000 fffb 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO7_Pin OCTOSPI_F_IO5_Pin OCTOSPI_F_IO6_Pin OCTOSPI_F_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80014c6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80014d8:	2305      	movs	r3, #5
 80014da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	4843      	ldr	r0, [pc, #268]	; (80015f0 <MX_GPIO_Init+0x318>)
 80014e4:	f000 ffea 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 80014e8:	2308      	movs	r3, #8
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	483d      	ldr	r0, [pc, #244]	; (80015f0 <MX_GPIO_Init+0x318>)
 80014fc:	f000 ffde 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001500:	2320      	movs	r3, #32
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4835      	ldr	r0, [pc, #212]	; (80015ec <MX_GPIO_Init+0x314>)
 8001518:	f000 ffd0 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_SPI2_MOSI_Pin WRLS_SPI2_MISO_Pin WRLS_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 800151c:	231a      	movs	r3, #26
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800152c:	2305      	movs	r3, #5
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001534:	4619      	mov	r1, r3
 8001536:	4834      	ldr	r0, [pc, #208]	; (8001608 <MX_GPIO_Init+0x330>)
 8001538:	f000 ffc0 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 800153c:	2308      	movs	r3, #8
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800154c:	2303      	movs	r3, #3
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	482d      	ldr	r0, [pc, #180]	; (800160c <MX_GPIO_Init+0x334>)
 8001558:	f000 ffb0 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800155c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001562:	2312      	movs	r3, #18
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800156e:	2304      	movs	r3, #4
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	481c      	ldr	r0, [pc, #112]	; (80015ec <MX_GPIO_Init+0x314>)
 800157a:	f000 ff9f 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO7_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800158e:	230a      	movs	r3, #10
 8001590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	481b      	ldr	r0, [pc, #108]	; (8001608 <MX_GPIO_Init+0x330>)
 800159a:	f000 ff8f 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_F_IO0_Pin OCTOSPI_F_IO1_Pin OCTOSPI_F_IO2_Pin OCTOSPI_F_IO3_Pin
                           OCTOSPI_F_CLK_P_Pin OCTOSPI_F_DQS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 800159e:	f241 031f 	movw	r3, #4127	; 0x101f
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
                          |OCTOSPI_F_CLK_P_Pin|OCTOSPI_F_DQS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80015b0:	2305      	movs	r3, #5
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4810      	ldr	r0, [pc, #64]	; (80015fc <MX_GPIO_Init+0x324>)
 80015bc:	f000 ff7e 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <MX_GPIO_Init+0x320>)
 80015d6:	f000 ff71 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 80015da:	23c2      	movs	r3, #194	; 0xc2
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e6:	e013      	b.n	8001610 <MX_GPIO_Init+0x338>
 80015e8:	46020c00 	.word	0x46020c00
 80015ec:	42020400 	.word	0x42020400
 80015f0:	42021c00 	.word	0x42021c00
 80015f4:	42021800 	.word	0x42021800
 80015f8:	42020800 	.word	0x42020800
 80015fc:	42021400 	.word	0x42021400
 8001600:	42020000 	.word	0x42020000
 8001604:	42022000 	.word	0x42022000
 8001608:	42020c00 	.word	0x42020c00
 800160c:	42021000 	.word	0x42021000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	4619      	mov	r1, r3
 800161a:	4888      	ldr	r0, [pc, #544]	; (800183c <MX_GPIO_Init+0x564>)
 800161c:	f000 ff4e 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_IO0_Pin OCTOSPI_R_IO2_Pin OCTOSPI_R_IO1_Pin OCTOSPI_R_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8001620:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001632:	230a      	movs	r3, #10
 8001634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	4880      	ldr	r0, [pc, #512]	; (8001840 <MX_GPIO_Init+0x568>)
 800163e:	f000 ff3d 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO4_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001652:	2303      	movs	r3, #3
 8001654:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165a:	4619      	mov	r1, r3
 800165c:	4877      	ldr	r0, [pc, #476]	; (800183c <MX_GPIO_Init+0x564>)
 800165e:	f000 ff2d 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_C_P_Pin USB_C_PA11_Pin */
  GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001674:	230a      	movs	r3, #10
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4871      	ldr	r0, [pc, #452]	; (8001844 <MX_GPIO_Init+0x56c>)
 8001680:	f000 ff1c 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001696:	2306      	movs	r3, #6
 8001698:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4867      	ldr	r0, [pc, #412]	; (8001840 <MX_GPIO_Init+0x568>)
 80016a2:	f000 ff0b 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_SDINx_Pin MIC_CCK0_Pin */
  GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80016a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80016b8:	2303      	movs	r3, #3
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	4861      	ldr	r0, [pc, #388]	; (8001848 <MX_GPIO_Init+0x570>)
 80016c4:	f000 fefa 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 80016c8:	2340      	movs	r3, #64	; 0x40
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016cc:	2301      	movs	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d4:	2300      	movs	r3, #0
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016dc:	4619      	mov	r1, r3
 80016de:	485b      	ldr	r0, [pc, #364]	; (800184c <MX_GPIO_Init+0x574>)
 80016e0:	f000 feec 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016e4:	2302      	movs	r3, #2
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80016f0:	2301      	movs	r3, #1
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4855      	ldr	r0, [pc, #340]	; (8001850 <MX_GPIO_Init+0x578>)
 80016fc:	f000 fede 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 8001700:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	484f      	ldr	r0, [pc, #316]	; (8001854 <MX_GPIO_Init+0x57c>)
 8001716:	f000 fed1 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OCTOSPI_R_IO6_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800171a:	2308      	movs	r3, #8
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800172a:	230a      	movs	r3, #10
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port,&GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4846      	ldr	r0, [pc, #280]	; (8001850 <MX_GPIO_Init+0x578>)
 8001736:	f000 fec1 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin;
 800173a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001740:	2300      	movs	r3, #0
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800174c:	4619      	mov	r1, r3
 800174e:	483e      	ldr	r0, [pc, #248]	; (8001848 <MX_GPIO_Init+0x570>)
 8001750:	f000 feb4 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPI_R_CLK_P_Pin OCTOSPI_R_NCS_Pin */
  GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8001754:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001762:	2303      	movs	r3, #3
 8001764:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001766:	230a      	movs	r3, #10
 8001768:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	4619      	mov	r1, r3
 8001770:	4839      	ldr	r0, [pc, #228]	; (8001858 <MX_GPIO_Init+0x580>)
 8001772:	f000 fea3 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001776:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800177a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001788:	4619      	mov	r1, r3
 800178a:	482d      	ldr	r0, [pc, #180]	; (8001840 <MX_GPIO_Init+0x568>)
 800178c:	f000 fe96 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_SPI2_NSS_Pin */
  GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a2:	2305      	movs	r3, #5
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	482a      	ldr	r0, [pc, #168]	; (8001858 <MX_GPIO_Init+0x580>)
 80017ae:	f000 fe85 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_CC2_Pin;
 80017b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b8:	2303      	movs	r3, #3
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_UCPD_CC2_GPIO_Port, &GPIO_InitStruct);
 80017c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c4:	4619      	mov	r1, r3
 80017c6:	4824      	ldr	r0, [pc, #144]	; (8001858 <MX_GPIO_Init+0x580>)
 80017c8:	f000 fe78 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80017cc:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4816      	ldr	r0, [pc, #88]	; (8001840 <MX_GPIO_Init+0x568>)
 80017e6:	f000 fe69 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ISM330DHCX_INT_Pin */
  GPIO_InitStruct.Pin = ISM330DHCX_INT_Pin;
 80017ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_GPIO_Init+0x584>)
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ISM330DHCX_INT_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	4619      	mov	r1, r3
 80017fe:	4812      	ldr	r0, [pc, #72]	; (8001848 <MX_GPIO_Init+0x570>)
 8001800:	f000 fe5c 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001804:	2302      	movs	r3, #2
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001814:	2306      	movs	r3, #6
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181c:	4619      	mov	r1, r3
 800181e:	480e      	ldr	r0, [pc, #56]	; (8001858 <MX_GPIO_Init+0x580>)
 8001820:	f000 fe4c 	bl	80024bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2016      	movs	r0, #22
 800182a:	f000 fe12 	bl	8002452 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 800182e:	2016      	movs	r0, #22
 8001830:	f000 fe29 	bl	8002486 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	42021c00 	.word	0x42021c00
 8001840:	42021400 	.word	0x42021400
 8001844:	42020000 	.word	0x42020000
 8001848:	42021000 	.word	0x42021000
 800184c:	42021800 	.word	0x42021800
 8001850:	42020800 	.word	0x42020800
 8001854:	42020c00 	.word	0x42020c00
 8001858:	42020400 	.word	0x42020400
 800185c:	10110000 	.word	0x10110000

08001860 <__io_putchar>:
  * @brief  Redirecting stdout to USART1 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart1, &*c, 1, 10);
 800186e:	f107 010c 	add.w	r1, r7, #12
 8001872:	230a      	movs	r3, #10
 8001874:	2201      	movs	r2, #1
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <__io_putchar+0x28>)
 8001878:	f005 ffa4 	bl	80077c4 <HAL_UART_Transmit>
 return ch;
 800187c:	687b      	ldr	r3, [r7, #4]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000254 	.word	0x20000254

0800188c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800189c:	d103      	bne.n	80018a6 <HAL_GPIO_EXTI_Rising_Callback+0x1a>
  case ISM330DHCX_INT_Pin:
    drdy = 1;
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_GPIO_EXTI_Rising_Callback+0x28>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	701a      	strb	r2, [r3, #0]
    break;
 80018a4:	bf00      	nop
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	200002ea 	.word	0x200002ea

080018b8 <platform_write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af04      	add	r7, sp, #16
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	461a      	mov	r2, r3
 80018c4:	460b      	mov	r3, r1
 80018c6:	72fb      	strb	r3, [r7, #11]
 80018c8:	4613      	mov	r3, r2
 80018ca:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, ISM330DHCX_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	893b      	ldrh	r3, [r7, #8]
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2301      	movs	r3, #1
 80018e0:	21d7      	movs	r1, #215	; 0xd7
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f001 f89a 	bl	8002a1c <HAL_I2C_Mem_Write>
  return 0;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <platform_read>:
 * @param  bufp      pointer to buffer that store the data read
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	461a      	mov	r2, r3
 8001900:	460b      	mov	r3, r1
 8001902:	72fb      	strb	r3, [r7, #11]
 8001904:	4613      	mov	r3, r2
 8001906:	813b      	strh	r3, [r7, #8]
 8001908:	2201      	movs	r2, #1
 800190a:	2102      	movs	r1, #2
 800190c:	480a      	ldr	r0, [pc, #40]	; (8001938 <platform_read+0x44>)
 800190e:	f000 ffad 	bl	800286c <HAL_GPIO_WritePin>
  HAL_I2C_Mem_Read(handle, ISM330DHCX_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001912:	7afb      	ldrb	r3, [r7, #11]
 8001914:	b29a      	uxth	r2, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	893b      	ldrh	r3, [r7, #8]
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2301      	movs	r3, #1
 8001926:	21d7      	movs	r1, #215	; 0xd7
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f001 f98b 	bl	8002c44 <HAL_I2C_Mem_Read>
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	42020800 	.word	0x42020800

0800193c <ism330dhcx_initialize>:
 *
 * @return No
 *
 */
static void ism330dhcx_initialize()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  ism330dhcx_initialize_basics();
 8001940:	f000 f80e 	bl	8001960 <ism330dhcx_initialize_basics>
#if (SENSOR_TYPE == ACCELEROMETER)
  /* Accelelerometer configuration */
  ism330dhcx_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001944:	2107      	movs	r1, #7
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <ism330dhcx_initialize+0x20>)
 8001948:	f006 fd06 	bl	8008358 <ism330dhcx_xl_data_rate_set>
  ism330dhcx_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 800194c:	2100      	movs	r1, #0
 800194e:	4803      	ldr	r0, [pc, #12]	; (800195c <ism330dhcx_initialize+0x20>)
 8001950:	f006 fcdc 	bl	800830c <ism330dhcx_xl_full_scale_set>
#elif (SENSOR_TYPE == GYROSCOPE)
  /* Gyroscope configuration */
  ism330dhcx_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
  ism330dhcx_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
  ism330dhcx_initialize_fifo();
 8001954:	f000 f82c 	bl	80019b0 <ism330dhcx_initialize_fifo>
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200002ec 	.word	0x200002ec

08001960 <ism330dhcx_initialize_basics>:
 *
 * @return No
 *
 */
static void ism330dhcx_initialize_basics()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <ism330dhcx_initialize_basics+0x44>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]

  do {
    /* Wait sensor boot time */
    HAL_Delay(10);
 800196a:	200a      	movs	r0, #10
 800196c:	f000 fc72 	bl	8002254 <HAL_Delay>
    ism330dhcx_device_id_get(&dev_ctx, &whoamI);
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <ism330dhcx_initialize_basics+0x44>)
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <ism330dhcx_initialize_basics+0x48>)
 8001974:	f006 fea8 	bl	80086c8 <ism330dhcx_device_id_get>
  } while (whoamI != ISM330DHCX_ID);
 8001978:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <ism330dhcx_initialize_basics+0x44>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b6b      	cmp	r3, #107	; 0x6b
 800197e:	d1f4      	bne.n	800196a <ism330dhcx_initialize_basics+0xa>

  /* Restore default configuration */
  ism330dhcx_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001980:	2101      	movs	r1, #1
 8001982:	4809      	ldr	r0, [pc, #36]	; (80019a8 <ism330dhcx_initialize_basics+0x48>)
 8001984:	f006 feb1 	bl	80086ea <ism330dhcx_reset_set>

  do {
    ism330dhcx_reset_get(&dev_ctx, &rst);
 8001988:	4908      	ldr	r1, [pc, #32]	; (80019ac <ism330dhcx_initialize_basics+0x4c>)
 800198a:	4807      	ldr	r0, [pc, #28]	; (80019a8 <ism330dhcx_initialize_basics+0x48>)
 800198c:	f006 fed3 	bl	8008736 <ism330dhcx_reset_get>
  } while (rst);
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <ism330dhcx_initialize_basics+0x4c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d1f7      	bne.n	8001988 <ism330dhcx_initialize_basics+0x28>

  /* Start device configuration. */
  ism330dhcx_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 8001998:	2101      	movs	r1, #1
 800199a:	4803      	ldr	r0, [pc, #12]	; (80019a8 <ism330dhcx_initialize_basics+0x48>)
 800199c:	f006 fe48 	bl	8008630 <ism330dhcx_device_conf_set>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200002e8 	.word	0x200002e8
 80019a8:	200002ec 	.word	0x200002ec
 80019ac:	200002e9 	.word	0x200002e9

080019b0 <ism330dhcx_initialize_fifo>:
 *
 * @return No
 *
 */
static void ism330dhcx_initialize_fifo()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
#if (SENSOR_TYPE == ACCELEROMETER)
  /* Batch odr config */
  ism330dhcx_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 80019b6:	2107      	movs	r1, #7
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <ism330dhcx_initialize_fifo+0x50>)
 80019ba:	f006 ff0b 	bl	80087d4 <ism330dhcx_fifo_xl_batch_set>
  ism330dhcx_fifo_gy_batch_set(&dev_ctx, 0);
 80019be:	2100      	movs	r1, #0
 80019c0:	480f      	ldr	r0, [pc, #60]	; (8001a00 <ism330dhcx_initialize_fifo+0x50>)
 80019c2:	f006 ff2d 	bl	8008820 <ism330dhcx_fifo_gy_batch_set>
  /* Batch odr config */
  ism330dhcx_fifo_xl_batch_set(&dev_ctx, 0);
  ism330dhcx_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
  /* FIFO MODE */
  ism330dhcx_fifo_mode_set(&dev_ctx, ISM330DHCX_BYPASS_MODE);
 80019c6:	2100      	movs	r1, #0
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <ism330dhcx_initialize_fifo+0x50>)
 80019ca:	f006 ff4f 	bl	800886c <ism330dhcx_fifo_mode_set>
  HAL_Delay(10);
 80019ce:	200a      	movs	r0, #10
 80019d0:	f000 fc40 	bl	8002254 <HAL_Delay>
  ism330dhcx_fifo_mode_set(&dev_ctx, ISM330DHCX_STREAM_MODE);
 80019d4:	2106      	movs	r1, #6
 80019d6:	480a      	ldr	r0, [pc, #40]	; (8001a00 <ism330dhcx_initialize_fifo+0x50>)
 80019d8:	f006 ff48 	bl	800886c <ism330dhcx_fifo_mode_set>
  /* Watermark config */
  if (SAMPLES <= MAX_FIFO_SIZE) {
    ism330dhcx_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 80019dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e0:	4807      	ldr	r0, [pc, #28]	; (8001a00 <ism330dhcx_initialize_fifo+0x50>)
 80019e2:	f006 fec1 	bl	8008768 <ism330dhcx_fifo_watermark_set>
  }
  else {
    ism330dhcx_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
  }
  uint8_t ctrl = 0x08;
 80019e6:	2308      	movs	r3, #8
 80019e8:	71fb      	strb	r3, [r7, #7]
  ism330dhcx_write_reg(&dev_ctx, ISM330DHCX_INT1_CTRL, (uint8_t *) &ctrl, 1);
 80019ea:	1dfa      	adds	r2, r7, #7
 80019ec:	2301      	movs	r3, #1
 80019ee:	210d      	movs	r1, #13
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <ism330dhcx_initialize_fifo+0x50>)
 80019f2:	f006 fc5b 	bl	80082ac <ism330dhcx_write_reg>
}
 80019f6:	bf00      	nop
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200002ec 	.word	0x200002ec

08001a04 <ism330dhcx_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float ism330dhcx_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	80fb      	strh	r3, [r7, #6]
  float accel_data_mg = 0.0;
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
#if (SENSOR_TYPE == ACCELEROMETER)
  switch (ACCELEROMETER_FS)
  {
  case ISM330DHCX_2g:
    accel_data_mg = ism330dhcx_from_fs2g_to_mg(accel_raw_data);
 8001a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f006 fc5f 	bl	80082dc <ism330dhcx_from_fs2g_to_mg>
 8001a1e:	ed87 0a03 	vstr	s0, [r7, #12]
    break;
 8001a22:	bf00      	nop
  default:
    accel_data_mg = 0.0;
    break;
  }
#endif
  return accel_data_mg;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	ee07 3a90 	vmov	s15, r3
}
 8001a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <Inference>:

void Inference() {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
    FillBuffer(input_user_buffer, SIGNAL_SIZE);
 8001a3a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001a3e:	481a      	ldr	r0, [pc, #104]	; (8001aa8 <Inference+0x74>)
 8001a40:	f000 f83e 	bl	8001ac0 <FillBuffer>
    uint16_t id_class;
    neai_classification(input_user_buffer, output_class_buffer, &id_class);
 8001a44:	1dbb      	adds	r3, r7, #6
 8001a46:	461a      	mov	r2, r3
 8001a48:	4918      	ldr	r1, [pc, #96]	; (8001aac <Inference+0x78>)
 8001a4a:	4817      	ldr	r0, [pc, #92]	; (8001aa8 <Inference+0x74>)
 8001a4c:	f007 fa92 	bl	8008f74 <neai_classification>
    printf("Class: %s [%u%%]\r\n", id2class[id_class], (uint16_t)(output_class_buffer[id_class - 1] * 100));
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <Inference+0x7c>)
 8001a56:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001a5a:	88fb      	ldrh	r3, [r7, #6]
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	4a13      	ldr	r2, [pc, #76]	; (8001aac <Inference+0x78>)
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	edd3 7a00 	vldr	s15, [r3]
 8001a68:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001ab4 <Inference+0x80>
 8001a6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a74:	ee17 3a90 	vmov	r3, s15
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <Inference+0x84>)
 8001a7e:	f008 fc01 	bl	800a284 <iprintf>
    if (id_class==0) {
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d105      	bne.n	8001a94 <Inference+0x60>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2102      	movs	r1, #2
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <Inference+0x88>)
 8001a8e:	f000 feed 	bl	800286c <HAL_GPIO_WritePin>
    } else {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    }


}
 8001a92:	e004      	b.n	8001a9e <Inference+0x6a>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2102      	movs	r1, #2
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <Inference+0x88>)
 8001a9a:	f000 fee7 	bl	800286c <HAL_GPIO_WritePin>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002fc 	.word	0x200002fc
 8001aac:	20000efc 	.word	0x20000efc
 8001ab0:	20000004 	.word	0x20000004
 8001ab4:	42c80000 	.word	0x42c80000
 8001ab8:	0800eb58 	.word	0x0800eb58
 8001abc:	42020800 	.word	0x42020800

08001ac0 <FillBuffer>:


void FillBuffer(float* buffer, uint32_t size) {
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	f2ad 7d14 	subw	sp, sp, #1812	; 0x714
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001acc:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 8001ad0:	6018      	str	r0, [r3, #0]
 8001ad2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001ad6:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8001ada:	6019      	str	r1, [r3, #0]
    uint16_t num;
    uint16_t data_left = size / AXIS;
 8001adc:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001ae0:	f5a3 63e2 	sub.w	r3, r3, #1808	; 0x710
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <FillBuffer+0x1f0>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	f8a7 370e 	strh.w	r3, [r7, #1806]	; 0x70e
    uint8_t buff_tmp[MAX_FIFO_SIZE * FIFO_WORD];

    while (data_left > 0) {
 8001af2:	e0d1      	b.n	8001c98 <FillBuffer+0x1d8>
        ism330dhcx_fifo_data_level_get(&dev_ctx, &num);
 8001af4:	f507 63e1 	add.w	r3, r7, #1800	; 0x708
 8001af8:	4619      	mov	r1, r3
 8001afa:	486e      	ldr	r0, [pc, #440]	; (8001cb4 <FillBuffer+0x1f4>)
 8001afc:	f006 fedc 	bl	80088b8 <ism330dhcx_fifo_data_level_get>
        if (data_left < num) {
 8001b00:	f8b7 3708 	ldrh.w	r3, [r7, #1800]	; 0x708
 8001b04:	f8b7 270e 	ldrh.w	r2, [r7, #1806]	; 0x70e
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d203      	bcs.n	8001b14 <FillBuffer+0x54>
            num = data_left;
 8001b0c:	f8b7 370e 	ldrh.w	r3, [r7, #1806]	; 0x70e
 8001b10:	f8a7 3708 	strh.w	r3, [r7, #1800]	; 0x708
        }

        ism330dhcx_read_reg(&dev_ctx, ISM330DHCX_FIFO_DATA_OUT_TAG, buff_tmp, num * FIFO_WORD);
 8001b14:	f8b7 3708 	ldrh.w	r3, [r7, #1800]	; 0x708
 8001b18:	461a      	mov	r2, r3
 8001b1a:	00d2      	lsls	r2, r2, #3
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f107 0208 	add.w	r2, r7, #8
 8001b24:	2178      	movs	r1, #120	; 0x78
 8001b26:	4863      	ldr	r0, [pc, #396]	; (8001cb4 <FillBuffer+0x1f4>)
 8001b28:	f006 fba8 	bl	800827c <ism330dhcx_read_reg>

        for (uint16_t i = 0; i < num; i++) {
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f8a7 370c 	strh.w	r3, [r7, #1804]	; 0x70c
 8001b32:	e0a3      	b.n	8001c7c <FillBuffer+0x1bc>
            uint8_t reg_tag = buff_tmp[FIFO_WORD * i] >> 3;
 8001b34:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001b42:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001b46:	5cd3      	ldrb	r3, [r2, r3]
 8001b48:	08db      	lsrs	r3, r3, #3
 8001b4a:	f887 370b 	strb.w	r3, [r7, #1803]	; 0x70b
            if(reg_tag == ISM330DHCX_XL_NC_TAG) {
 8001b4e:	f897 370b 	ldrb.w	r3, [r7, #1803]	; 0x70b
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	f040 808d 	bne.w	8001c72 <FillBuffer+0x1b2>
                buffer[(AXIS * i)] = ism330dhcx_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + 1]);
 8001b58:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	3302      	adds	r3, #2
 8001b64:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001b68:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	021b      	lsls	r3, r3, #8
 8001b70:	b219      	sxth	r1, r3
 8001b72:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001b82:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	b219      	sxth	r1, r3
 8001b8e:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8001ba0:	f2a3 730c 	subw	r3, r3, #1804	; 0x70c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	189c      	adds	r4, r3, r2
 8001ba8:	4608      	mov	r0, r1
 8001baa:	f7ff ff2b 	bl	8001a04 <ism330dhcx_convert_accel_data_to_mg>
 8001bae:	eef0 7a40 	vmov.f32	s15, s0
 8001bb2:	edc4 7a00 	vstr	s15, [r4]
                buffer[(AXIS * i) + 1] = ism330dhcx_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + 4] << 8 | buff_tmp[(FIFO_WORD * i) + 3]);
 8001bb6:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001bc6:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001bca:	5cd3      	ldrb	r3, [r2, r3]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b219      	sxth	r1, r3
 8001bd0:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	1a9b      	subs	r3, r3, r2
 8001bda:	3303      	adds	r3, #3
 8001bdc:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001be0:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	430b      	orrs	r3, r1
 8001bea:	b219      	sxth	r1, r3
 8001bec:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001bfe:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	18d4      	adds	r4, r2, r3
 8001c06:	4608      	mov	r0, r1
 8001c08:	f7ff fefc 	bl	8001a04 <ism330dhcx_convert_accel_data_to_mg>
 8001c0c:	eef0 7a40 	vmov.f32	s15, s0
 8001c10:	edc4 7a00 	vstr	s15, [r4]
                buffer[(AXIS * i) + 2] = ism330dhcx_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + 6] << 8 | buff_tmp[(FIFO_WORD * i) + 5]);
 8001c14:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	3306      	adds	r3, #6
 8001c20:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001c24:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	021b      	lsls	r3, r3, #8
 8001c2c:	b219      	sxth	r1, r3
 8001c2e:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	3305      	adds	r3, #5
 8001c3a:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001c3e:	f5a2 62e1 	sub.w	r2, r2, #1800	; 0x708
 8001c42:	5cd3      	ldrb	r3, [r2, r3]
 8001c44:	b21b      	sxth	r3, r3
 8001c46:	430b      	orrs	r3, r1
 8001c48:	b219      	sxth	r1, r3
 8001c4a:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001c4e:	4613      	mov	r3, r2
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3308      	adds	r3, #8
 8001c58:	f507 62e2 	add.w	r2, r7, #1808	; 0x710
 8001c5c:	f2a2 720c 	subw	r2, r2, #1804	; 0x70c
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	18d4      	adds	r4, r2, r3
 8001c64:	4608      	mov	r0, r1
 8001c66:	f7ff fecd 	bl	8001a04 <ism330dhcx_convert_accel_data_to_mg>
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
 8001c6e:	edc4 7a00 	vstr	s15, [r4]
        for (uint16_t i = 0; i < num; i++) {
 8001c72:	f8b7 370c 	ldrh.w	r3, [r7, #1804]	; 0x70c
 8001c76:	3301      	adds	r3, #1
 8001c78:	f8a7 370c 	strh.w	r3, [r7, #1804]	; 0x70c
 8001c7c:	f8b7 3708 	ldrh.w	r3, [r7, #1800]	; 0x708
 8001c80:	f8b7 270c 	ldrh.w	r2, [r7, #1804]	; 0x70c
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f4ff af55 	bcc.w	8001b34 <FillBuffer+0x74>
            }
        }
        data_left -= num;
 8001c8a:	f8b7 3708 	ldrh.w	r3, [r7, #1800]	; 0x708
 8001c8e:	f8b7 270e 	ldrh.w	r2, [r7, #1806]	; 0x70e
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f8a7 370e 	strh.w	r3, [r7, #1806]	; 0x70e
    while (data_left > 0) {
 8001c98:	f8b7 370e 	ldrh.w	r3, [r7, #1806]	; 0x70e
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f47f af29 	bne.w	8001af4 <FillBuffer+0x34>
    }
}
 8001ca2:	bf00      	nop
 8001ca4:	bf00      	nop
 8001ca6:	f207 7714 	addw	r7, r7, #1812	; 0x714
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	aaaaaaab 	.word	0xaaaaaaab
 8001cb4:	200002ec 	.word	0x200002ec

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>
	...

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_MspInit+0x30>)
 8001ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd0:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_MspInit+0x30>)
 8001cd2:	f043 0304 	orr.w	r3, r3, #4
 8001cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_MspInit+0x30>)
 8001cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	46020c00 	.word	0x46020c00

08001cf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0bc      	sub	sp, #240	; 0xf0
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
 8001d0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	22c8      	movs	r2, #200	; 0xc8
 8001d16:	2100      	movs	r1, #0
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f008 fc19 	bl	800a550 <memset>
  if(hi2c->Instance==I2C2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_I2C_MspInit+0xc4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d144      	bne.n	8001db2 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001d28:	f04f 0280 	mov.w	r2, #128	; 0x80
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 ffe7 	bl	8004d10 <HAL_RCCEx_PeriphCLKConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001d48:	f7ff ffb6 	bl	8001cb8 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_I2C_MspInit+0xc8>)
 8001d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d52:	4a1b      	ldr	r2, [pc, #108]	; (8001dc0 <HAL_I2C_MspInit+0xc8>)
 8001d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d5c:	4b18      	ldr	r3, [pc, #96]	; (8001dc0 <HAL_I2C_MspInit+0xc8>)
 8001d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PH4     ------> I2C2_SCL
    PH5     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d6a:	2330      	movs	r3, #48	; 0x30
 8001d6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d70:	2312      	movs	r3, #18
 8001d72:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d82:	2304      	movs	r3, #4
 8001d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d88:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_I2C_MspInit+0xcc>)
 8001d90:	f000 fb94 	bl	80024bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_I2C_MspInit+0xc8>)
 8001d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <HAL_I2C_MspInit+0xc8>)
 8001d9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001da0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001da4:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <HAL_I2C_MspInit+0xc8>)
 8001da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	37f0      	adds	r7, #240	; 0xf0
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40005800 	.word	0x40005800
 8001dc0:	46020c00 	.word	0x46020c00
 8001dc4:	42021c00 	.word	0x42021c00

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0bc      	sub	sp, #240	; 0xf0
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de0:	f107 0310 	add.w	r3, r7, #16
 8001de4:	22c8      	movs	r2, #200	; 0xc8
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f008 fbb1 	bl	800a550 <memset>
  if(huart->Instance==USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_UART_MspInit+0xc4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d145      	bne.n	8001e84 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001df8:	f04f 0201 	mov.w	r2, #1
 8001dfc:	f04f 0300 	mov.w	r3, #0
 8001e00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e04:	2300      	movs	r3, #0
 8001e06:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 ff7f 	bl	8004d10 <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001e18:	f7ff ff4e 	bl	8001cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e28:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001e2c:	4b18      	ldr	r3, [pc, #96]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e40:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <HAL_UART_MspInit+0xc8>)
 8001e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001e58:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e5c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e72:	2307      	movs	r3, #7
 8001e74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <HAL_UART_MspInit+0xcc>)
 8001e80:	f000 fb1c 	bl	80024bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e84:	bf00      	nop
 8001e86:	37f0      	adds	r7, #240	; 0xf0
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	46020c00 	.word	0x46020c00
 8001e94:	42020000 	.word	0x42020000

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <NMI_Handler+0x4>

08001e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eaa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eae:	e7fe      	b.n	8001eae <BusFault_Handler+0x4>

08001eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb4:	e7fe      	b.n	8001eb4 <UsageFault_Handler+0x4>

08001eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee4:	f000 f996 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM330DHCX_INT_Pin);
 8001ef0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ef4:	f000 fcd2 	bl	800289c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	return 1;
 8001f00:	2301      	movs	r3, #1
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_kill>:

int _kill(int pid, int sig)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f16:	f008 fb6d 	bl	800a5f4 <__errno>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2216      	movs	r2, #22
 8001f1e:	601a      	str	r2, [r3, #0]
	return -1;
 8001f20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <_exit>:

void _exit (int status)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ffe7 	bl	8001f0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f3e:	e7fe      	b.n	8001f3e <_exit+0x12>

08001f40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	e00a      	b.n	8001f68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f52:	f3af 8000 	nop.w
 8001f56:	4601      	mov	r1, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	60ba      	str	r2, [r7, #8]
 8001f5e:	b2ca      	uxtb	r2, r1
 8001f60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3301      	adds	r3, #1
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbf0      	blt.n	8001f52 <_read+0x12>
	}

return len;
 8001f70:	687b      	ldr	r3, [r7, #4]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e009      	b.n	8001fa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fc63 	bl	8001860 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	dbf1      	blt.n	8001f8c <_write+0x12>
	}
	return len;
 8001fa8:	687b      	ldr	r3, [r7, #4]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <_close>:

int _close(int file)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b083      	sub	sp, #12
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
 8001fd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fda:	605a      	str	r2, [r3, #4]
	return 0;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <_isatty>:

int _isatty(int file)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ff2:	2301      	movs	r3, #1
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	return 0;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
	...

0800201c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <_sbrk+0x5c>)
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <_sbrk+0x60>)
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d102      	bne.n	800203e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002038:	4b11      	ldr	r3, [pc, #68]	; (8002080 <_sbrk+0x64>)
 800203a:	4a12      	ldr	r2, [pc, #72]	; (8002084 <_sbrk+0x68>)
 800203c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <_sbrk+0x64>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	429a      	cmp	r2, r3
 800204a:	d207      	bcs.n	800205c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800204c:	f008 fad2 	bl	800a5f4 <__errno>
 8002050:	4603      	mov	r3, r0
 8002052:	220c      	movs	r2, #12
 8002054:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002056:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800205a:	e009      	b.n	8002070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	4a05      	ldr	r2, [pc, #20]	; (8002080 <_sbrk+0x64>)
 800206c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200c0000 	.word	0x200c0000
 800207c:	00000400 	.word	0x00000400
 8002080:	20000f04 	.word	0x20000f04
 8002084:	20001f28 	.word	0x20001f28

08002088 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <SystemInit+0x68>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	4a17      	ldr	r2, [pc, #92]	; (80020f0 <SystemInit+0x68>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <SystemInit+0x6c>)
 800209e:	2201      	movs	r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <SystemInit+0x6c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80020a8:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <SystemInit+0x6c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80020ae:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <SystemInit+0x6c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <SystemInit+0x6c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0e      	ldr	r2, [pc, #56]	; (80020f4 <SystemInit+0x6c>)
 80020ba:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020be:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <SystemInit+0x6c>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <SystemInit+0x6c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <SystemInit+0x6c>)
 80020d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <SystemInit+0x6c>)
 80020d8:	2200      	movs	r2, #0
 80020da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SystemInit+0x68>)
 80020de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020e2:	609a      	str	r2, [r3, #8]
  #endif
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	46020c00 	.word	0x46020c00

080020f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002130 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020fe:	e003      	b.n	8002108 <LoopCopyDataInit>

08002100 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002102:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002104:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002106:	3104      	adds	r1, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002108:	480b      	ldr	r0, [pc, #44]	; (8002138 <LoopForever+0xa>)
	ldr	r3, =_edata
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <LoopForever+0xe>)
	adds	r2, r0, r1
 800210c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800210e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002110:	d3f6      	bcc.n	8002100 <CopyDataInit>
	ldr	r2, =_sbss
 8002112:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002114:	e002      	b.n	800211c <LoopFillZerobss>

08002116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002116:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002118:	f842 3b04 	str.w	r3, [r2], #4

0800211c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <LoopForever+0x16>)
	cmp	r2, r3
 800211e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002120:	d3f9      	bcc.n	8002116 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002122:	f7ff ffb1 	bl	8002088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002126:	f008 fa6b 	bl	800a600 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800212a:	f7fe ff77 	bl	800101c <main>

0800212e <LoopForever>:

LoopForever:
    b LoopForever
 800212e:	e7fe      	b.n	800212e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002130:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002134:	0800faa0 	.word	0x0800faa0
	ldr	r0, =_sdata
 8002138:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800213c:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002140:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 8002144:	20001f28 	.word	0x20001f28

08002148 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <ADC1_IRQHandler>
	...

0800214c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_Init+0x4c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_Init+0x4c>)
 8002156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215c:	2003      	movs	r0, #3
 800215e:	f000 f96d 	bl	800243c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002162:	f002 fbf1 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_Init+0x50>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	490b      	ldr	r1, [pc, #44]	; (80021a0 <HAL_Init+0x54>)
 8002172:	5ccb      	ldrb	r3, [r1, r3]
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_Init+0x58>)
 800217a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217c:	200f      	movs	r0, #15
 800217e:	f000 f813 	bl	80021a8 <HAL_InitTick>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e002      	b.n	8002192 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800218c:	f7ff fd9a 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000
 800219c:	46020c00 	.word	0x46020c00
 80021a0:	0800f168 	.word	0x0800f168
 80021a4:	20000010 	.word	0x20000010

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_InitTick+0x60>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e021      	b.n	8002200 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_InitTick+0x64>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_InitTick+0x60>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f965 	bl	80024a2 <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021f0:	f000 f92f 	bl	8002452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_InitTick+0x68>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	20000018 	.word	0x20000018
 800220c:	20000010 	.word	0x20000010
 8002210:	20000014 	.word	0x20000014

08002214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000018 	.word	0x20000018
 8002238:	20000f08 	.word	0x20000f08

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000f08 	.word	0x20000f08

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000018 	.word	0x20000018

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	; (8002338 <__NVIC_EnableIRQ+0x38>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	; (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	; (800238c <__NVIC_SetPriority+0x50>)
 800236c:	79fb      	ldrb	r3, [r7, #7]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
	...

080023f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3b01      	subs	r3, #1
 8002404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002408:	d301      	bcc.n	800240e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240a:	2301      	movs	r3, #1
 800240c:	e00f      	b.n	800242e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <SysTick_Config+0x40>)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002416:	210f      	movs	r1, #15
 8002418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800241c:	f7ff ff8e 	bl	800233c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <SysTick_Config+0x40>)
 8002422:	2200      	movs	r2, #0
 8002424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002426:	4b04      	ldr	r3, [pc, #16]	; (8002438 <SysTick_Config+0x40>)
 8002428:	2207      	movs	r2, #7
 800242a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	e000e010 	.word	0xe000e010

0800243c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff ff29 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	4603      	mov	r3, r0
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
 800245e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002460:	f7ff ff40 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002464:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	6978      	ldr	r0, [r7, #20]
 800246c:	f7ff ff90 	bl	8002390 <NVIC_EncodePriority>
 8002470:	4602      	mov	r2, r0
 8002472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff ff5f 	bl	800233c <__NVIC_SetPriority>
}
 800247e:	bf00      	nop
 8002480:	3718      	adds	r7, #24
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b082      	sub	sp, #8
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff33 	bl	8002300 <__NVIC_EnableIRQ>
}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7ff ffa4 	bl	80023f8 <SysTick_Config>
 80024b0:	4603      	mov	r3, r0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	; 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024ce:	e1ba      	b.n	8002846 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2101      	movs	r1, #1
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 81aa 	beq.w	8002840 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a55      	ldr	r2, [pc, #340]	; (8002644 <HAL_GPIO_Init+0x188>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d15d      	bne.n	80025b0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80024fa:	2201      	movs	r2, #1
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	43db      	mvns	r3, r3
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	4013      	ands	r3, r2
 8002508:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0201 	and.w	r2, r3, #1
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	4313      	orrs	r3, r2
 800251c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69fa      	ldr	r2, [r7, #28]
 8002522:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002524:	4a48      	ldr	r2, [pc, #288]	; (8002648 <HAL_GPIO_Init+0x18c>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800252c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800252e:	4a46      	ldr	r2, [pc, #280]	; (8002648 <HAL_GPIO_Init+0x18c>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4413      	add	r3, r2
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	3208      	adds	r2, #8
 8002542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002546:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	220f      	movs	r2, #15
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	4013      	ands	r3, r2
 800255c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220b      	movs	r2, #11
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	4313      	orrs	r3, r2
 8002570:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	08da      	lsrs	r2, r3, #3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3208      	adds	r2, #8
 800257a:	69f9      	ldr	r1, [r7, #28]
 800257c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	4013      	ands	r3, r2
 8002596:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2202      	movs	r2, #2
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e067      	b.n	8002680 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x104>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d145      	bne.n	800264c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 020f 	and.w	r2, r3, #15
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69f9      	ldr	r1, [r7, #28]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69fa      	ldr	r2, [r7, #28]
 8002620:	4013      	ands	r3, r2
 8002622:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	4313      	orrs	r3, r2
 8002638:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e01e      	b.n	8002680 <HAL_GPIO_Init+0x1c4>
 8002642:	bf00      	nop
 8002644:	46020000 	.word	0x46020000
 8002648:	0800f1c0 	.word	0x0800f1c0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	2203      	movs	r2, #3
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	69fa      	ldr	r2, [r7, #28]
 8002660:	4013      	ands	r3, r2
 8002662:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	4313      	orrs	r3, r2
 8002678:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d00b      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d007      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002694:	2b11      	cmp	r3, #17
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b12      	cmp	r3, #18
 800269e:	d130      	bne.n	8002702 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2203      	movs	r2, #3
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80026d6:	2201      	movs	r2, #1
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	091b      	lsrs	r3, r3, #4
 80026ec:	f003 0201 	and.w	r2, r3, #1
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d017      	beq.n	800273a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	2203      	movs	r2, #3
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	4013      	ands	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	4313      	orrs	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d07c      	beq.n	8002840 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002746:	4a47      	ldr	r2, [pc, #284]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	089b      	lsrs	r3, r3, #2
 800274c:	3318      	adds	r3, #24
 800274e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002752:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	220f      	movs	r2, #15
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	43db      	mvns	r3, r3
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	4013      	ands	r3, r2
 8002768:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	0a9a      	lsrs	r2, r3, #10
 800276e:	4b3e      	ldr	r3, [pc, #248]	; (8002868 <HAL_GPIO_Init+0x3ac>)
 8002770:	4013      	ands	r3, r2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	f002 0203 	and.w	r2, r2, #3
 8002778:	00d2      	lsls	r2, r2, #3
 800277a:	4093      	lsls	r3, r2
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	4313      	orrs	r3, r2
 8002780:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002782:	4938      	ldr	r1, [pc, #224]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	3318      	adds	r3, #24
 800278a:	69fa      	ldr	r2, [r7, #28]
 800278c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002790:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	43db      	mvns	r3, r3
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	4013      	ands	r3, r2
 800279e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80027b4:	4a2b      	ldr	r2, [pc, #172]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69fa      	ldr	r2, [r7, #28]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80027d6:	69fa      	ldr	r2, [r7, #28]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80027de:	4a21      	ldr	r2, [pc, #132]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800280a:	4a16      	ldr	r2, [pc, #88]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 8002814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002818:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	4013      	ands	r3, r2
 8002822:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002830:	69fa      	ldr	r2, [r7, #28]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002838:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_GPIO_Init+0x3a8>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	3301      	adds	r3, #1
 8002844:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	f47f ae3d 	bne.w	80024d0 <HAL_GPIO_Init+0x14>
  }
}
 8002856:	bf00      	nop
 8002858:	bf00      	nop
 800285a:	3724      	adds	r7, #36	; 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	46022000 	.word	0x46022000
 8002868:	002f7f7f 	.word	0x002f7f7f

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002888:	e002      	b.n	8002890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80028a6:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	4013      	ands	r3, r2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d006      	beq.n	80028c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80028b8:	88fb      	ldrh	r3, [r7, #6]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe ffe6 	bl	800188c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	4013      	ands	r3, r2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80028cc:	4a05      	ldr	r2, [pc, #20]	; (80028e4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80028ce:	88fb      	ldrh	r3, [r7, #6]
 80028d0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f807 	bl	80028e8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80028da:	bf00      	nop
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	46022000 	.word	0x46022000

080028e8 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e081      	b.n	8002a14 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff f9e7 	bl	8001cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800294e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800295e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d107      	bne.n	8002978 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	e006      	b.n	8002986 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002984:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d104      	bne.n	8002998 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002996:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69d9      	ldr	r1, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1a      	ldr	r2, [r3, #32]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	4608      	mov	r0, r1
 8002a26:	4611      	mov	r1, r2
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	817b      	strh	r3, [r7, #10]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	813b      	strh	r3, [r7, #8]
 8002a32:	4613      	mov	r3, r2
 8002a34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	f040 80f9 	bne.w	8002c36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_I2C_Mem_Write+0x34>
 8002a4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0ed      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_I2C_Mem_Write+0x4e>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0e6      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a72:	f7ff fbe3 	bl	800223c <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2319      	movs	r3, #25
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fac3 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0d1      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2221      	movs	r2, #33	; 0x21
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2240      	movs	r2, #64	; 0x40
 8002aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a3a      	ldr	r2, [r7, #32]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002abc:	88f8      	ldrh	r0, [r7, #6]
 8002abe:	893a      	ldrh	r2, [r7, #8]
 8002ac0:	8979      	ldrh	r1, [r7, #10]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	4603      	mov	r3, r0
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f9d3 	bl	8002e78 <I2C_RequestMemoryWrite>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0a9      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2bff      	cmp	r3, #255	; 0xff
 8002aec:	d90e      	bls.n	8002b0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	22ff      	movs	r2, #255	; 0xff
 8002af2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	8979      	ldrh	r1, [r7, #10]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fc3d 	bl	8003384 <I2C_TransferConfig>
 8002b0a:	e00f      	b.n	8002b2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	8979      	ldrh	r1, [r7, #10]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fc2c 	bl	8003384 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fabc 	bl	80030ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e07b      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d034      	beq.n	8002be4 <HAL_I2C_Mem_Write+0x1c8>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d130      	bne.n	8002be4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2180      	movs	r1, #128	; 0x80
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fa3f 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e04d      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2bff      	cmp	r3, #255	; 0xff
 8002ba4:	d90e      	bls.n	8002bc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	; 0xff
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fbe1 	bl	8003384 <I2C_TransferConfig>
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fbd0 	bl	8003384 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d19e      	bne.n	8002b2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 faa2 	bl	800313c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e01a      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2220      	movs	r2, #32
 8002c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6859      	ldr	r1, [r3, #4]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b0a      	ldr	r3, [pc, #40]	; (8002c40 <HAL_I2C_Mem_Write+0x224>)
 8002c16:	400b      	ands	r3, r1
 8002c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c36:	2302      	movs	r3, #2
  }
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	fe00e800 	.word	0xfe00e800

08002c44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	4608      	mov	r0, r1
 8002c4e:	4611      	mov	r1, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	4603      	mov	r3, r0
 8002c54:	817b      	strh	r3, [r7, #10]
 8002c56:	460b      	mov	r3, r1
 8002c58:	813b      	strh	r3, [r7, #8]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	f040 80fd 	bne.w	8002e66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_I2C_Mem_Read+0x34>
 8002c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0f1      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Mem_Read+0x4e>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e0ea      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c9a:	f7ff facf 	bl	800223c <HAL_GetTick>
 8002c9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	2319      	movs	r3, #25
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 f9af 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0d5      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2222      	movs	r2, #34	; 0x22
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2240      	movs	r2, #64	; 0x40
 8002cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6a3a      	ldr	r2, [r7, #32]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ce4:	88f8      	ldrh	r0, [r7, #6]
 8002ce6:	893a      	ldrh	r2, [r7, #8]
 8002ce8:	8979      	ldrh	r1, [r7, #10]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f913 	bl	8002f20 <I2C_RequestMemoryRead>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0ad      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	2bff      	cmp	r3, #255	; 0xff
 8002d14:	d90e      	bls.n	8002d34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	22ff      	movs	r2, #255	; 0xff
 8002d1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	8979      	ldrh	r1, [r7, #10]
 8002d24:	4b52      	ldr	r3, [pc, #328]	; (8002e70 <HAL_I2C_Mem_Read+0x22c>)
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fb29 	bl	8003384 <I2C_TransferConfig>
 8002d32:	e00f      	b.n	8002d54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	8979      	ldrh	r1, [r7, #10]
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <HAL_I2C_Mem_Read+0x22c>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 fb18 	bl	8003384 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2104      	movs	r1, #4
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f956 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e07c      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d034      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x1d0>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d130      	bne.n	8002e14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2200      	movs	r2, #0
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f927 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e04d      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2bff      	cmp	r3, #255	; 0xff
 8002dd4:	d90e      	bls.n	8002df4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	22ff      	movs	r2, #255	; 0xff
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	8979      	ldrh	r1, [r7, #10]
 8002de4:	2300      	movs	r3, #0
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fac9 	bl	8003384 <I2C_TransferConfig>
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	8979      	ldrh	r1, [r7, #10]
 8002e06:	2300      	movs	r3, #0
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fab8 	bl	8003384 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d19a      	bne.n	8002d54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 f98a 	bl	800313c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e01a      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2220      	movs	r2, #32
 8002e38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6859      	ldr	r1, [r3, #4]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_I2C_Mem_Read+0x230>)
 8002e46:	400b      	ands	r3, r1
 8002e48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	e000      	b.n	8002e68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e66:	2302      	movs	r3, #2
  }
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	80002400 	.word	0x80002400
 8002e74:	fe00e800 	.word	0xfe00e800

08002e78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	461a      	mov	r2, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	817b      	strh	r3, [r7, #10]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	813b      	strh	r3, [r7, #8]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	4b20      	ldr	r3, [pc, #128]	; (8002f1c <I2C_RequestMemoryWrite+0xa4>)
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fa6f 	bl	8003384 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	69b9      	ldr	r1, [r7, #24]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f8ff 	bl	80030ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e02c      	b.n	8002f14 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec0:	893b      	ldrh	r3, [r7, #8]
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	629a      	str	r2, [r3, #40]	; 0x28
 8002eca:	e015      	b.n	8002ef8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	0a1b      	lsrs	r3, r3, #8
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	b2da      	uxtb	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	69b9      	ldr	r1, [r7, #24]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f8e5 	bl	80030ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e012      	b.n	8002f14 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eee:	893b      	ldrh	r3, [r7, #8]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2200      	movs	r2, #0
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f884 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	80002000 	.word	0x80002000

08002f20 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	460b      	mov	r3, r1
 8002f34:	813b      	strh	r3, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f3a:	88fb      	ldrh	r3, [r7, #6]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	8979      	ldrh	r1, [r7, #10]
 8002f40:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <I2C_RequestMemoryRead+0xa4>)
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2300      	movs	r3, #0
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fa1c 	bl	8003384 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f8ac 	bl	80030ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e02c      	b.n	8002fba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d105      	bne.n	8002f72 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f66:	893b      	ldrh	r3, [r7, #8]
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f70:	e015      	b.n	8002f9e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f72:	893b      	ldrh	r3, [r7, #8]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f80:	69fa      	ldr	r2, [r7, #28]
 8002f82:	69b9      	ldr	r1, [r7, #24]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f892 	bl	80030ae <I2C_WaitOnTXISFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e012      	b.n	8002fba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f94:	893b      	ldrh	r3, [r7, #8]
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2140      	movs	r1, #64	; 0x40
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f831 	bl	8003010 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	80002000 	.word	0x80002000

08002fc8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d103      	bne.n	8002fe6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d007      	beq.n	8003004 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	619a      	str	r2, [r3, #24]
  }
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	603b      	str	r3, [r7, #0]
 800301c:	4613      	mov	r3, r2
 800301e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003020:	e031      	b.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003028:	d02d      	beq.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302a:	f7ff f907 	bl	800223c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d302      	bcc.n	8003040 <I2C_WaitOnFlagUntilTimeout+0x30>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d122      	bne.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	4013      	ands	r3, r2
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	429a      	cmp	r2, r3
 800305c:	d113      	bne.n	8003086 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e00f      	b.n	80030a6 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699a      	ldr	r2, [r3, #24]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	4013      	ands	r3, r2
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	429a      	cmp	r2, r3
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d0be      	beq.n	8003022 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	60f8      	str	r0, [r7, #12]
 80030b6:	60b9      	str	r1, [r7, #8]
 80030b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030ba:	e033      	b.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f87f 	bl	80031c4 <I2C_IsErrorOccurred>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e031      	b.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d6:	d025      	beq.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d8:	f7ff f8b0 	bl	800223c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d302      	bcc.n	80030ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d11a      	bne.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d013      	beq.n	8003124 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0220 	orr.w	r2, r3, #32
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e007      	b.n	8003134 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b02      	cmp	r3, #2
 8003130:	d1c4      	bne.n	80030bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003148:	e02f      	b.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f838 	bl	80031c4 <I2C_IsErrorOccurred>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02d      	b.n	80031ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7ff f86d 	bl	800223c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11a      	bne.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b20      	cmp	r3, #32
 8003180:	d013      	beq.n	80031aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003186:	f043 0220 	orr.w	r2, r3, #32
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2220      	movs	r2, #32
 8003192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e007      	b.n	80031ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d1c8      	bne.n	800314a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08a      	sub	sp, #40	; 0x28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d068      	beq.n	80032c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2210      	movs	r2, #16
 80031f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031f8:	e049      	b.n	800328e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003200:	d045      	beq.n	800328e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003202:	f7ff f81b 	bl	800223c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	429a      	cmp	r2, r3
 8003210:	d302      	bcc.n	8003218 <I2C_IsErrorOccurred+0x54>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d13a      	bne.n	800328e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003222:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800322a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323a:	d121      	bne.n	8003280 <I2C_IsErrorOccurred+0xbc>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003242:	d01d      	beq.n	8003280 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b20      	cmp	r3, #32
 8003248:	d01a      	beq.n	8003280 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003258:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800325a:	f7fe ffef 	bl	800223c <HAL_GetTick>
 800325e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003260:	e00e      	b.n	8003280 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003262:	f7fe ffeb 	bl	800223c <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b19      	cmp	r3, #25
 800326e:	d907      	bls.n	8003280 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	6a3b      	ldr	r3, [r7, #32]
 8003272:	f043 0320 	orr.w	r3, r3, #32
 8003276:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800327e:	e006      	b.n	800328e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b20      	cmp	r3, #32
 800328c:	d1e9      	bne.n	8003262 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b20      	cmp	r3, #32
 800329a:	d003      	beq.n	80032a4 <I2C_IsErrorOccurred+0xe0>
 800329c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0aa      	beq.n	80031fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2220      	movs	r2, #32
 80032b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	f043 0304 	orr.w	r3, r3, #4
 80032ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	f043 0308 	orr.w	r3, r3, #8
 80032fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003306:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00b      	beq.n	8003330 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	f043 0302 	orr.w	r3, r3, #2
 800331e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003328:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01c      	beq.n	8003372 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003338:	68f8      	ldr	r0, [r7, #12]
 800333a:	f7ff fe45 	bl	8002fc8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <I2C_IsErrorOccurred+0x1bc>)
 800334a:	400b      	ands	r3, r1
 800334c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	431a      	orrs	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003376:	4618      	mov	r0, r3
 8003378:	3728      	adds	r7, #40	; 0x28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	fe00e800 	.word	0xfe00e800

08003384 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	817b      	strh	r3, [r7, #10]
 8003392:	4613      	mov	r3, r2
 8003394:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800339c:	7a7b      	ldrb	r3, [r7, #9]
 800339e:	041b      	lsls	r3, r3, #16
 80033a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	0d5b      	lsrs	r3, r3, #21
 80033be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <I2C_TransferConfig+0x60>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	43db      	mvns	r3, r3
 80033c8:	ea02 0103 	and.w	r1, r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	03ff63ff 	.word	0x03ff63ff

080033e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d138      	bne.n	8003470 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003408:	2302      	movs	r3, #2
 800340a:	e032      	b.n	8003472 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2224      	movs	r2, #36	; 0x24
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800343a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6819      	ldr	r1, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	683a      	ldr	r2, [r7, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800347e:	b480      	push	{r7}
 8003480:	b085      	sub	sp, #20
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	d139      	bne.n	8003508 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800349e:	2302      	movs	r3, #2
 80034a0:	e033      	b.n	800350a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2224      	movs	r2, #36	; 0x24
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	021b      	lsls	r3, r3, #8
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_I2CEx_ConfigFastModePlus>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  FastModePlus New state of the Fast Mode Plus.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigFastModePlus(I2C_HandleTypeDef *hi2c, uint32_t FastModePlus)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_FASTMODEPLUS(FastModePlus));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2b20      	cmp	r3, #32
 800352a:	d13c      	bne.n	80035a6 <HAL_I2CEx_ConfigFastModePlus+0x90>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_I2CEx_ConfigFastModePlus+0x24>
 8003536:	2302      	movs	r3, #2
 8003538:	e036      	b.n	80035a8 <HAL_I2CEx_ConfigFastModePlus+0x92>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2224      	movs	r2, #36	; 0x24
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

    if (FastModePlus == I2C_FASTMODEPLUS_ENABLE)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d108      	bne.n	8003572 <HAL_I2CEx_ConfigFastModePlus+0x5c>
    {
      /* Set I2Cx FMP bit */
      hi2c->Instance->CR1 |= (I2C_CR1_FMP);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	e007      	b.n	8003582 <HAL_I2CEx_ConfigFastModePlus+0x6c>
    }
    else
    {
      /* Reset I2Cx FMP bit */
      hi2c->Instance->CR1 &= ~(I2C_CR1_FMP);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003580:	601a      	str	r2, [r3, #0]
    }

    __HAL_I2C_ENABLE(hi2c);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_I2CEx_ConfigFastModePlus+0x92>
  }
  else
  {
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
  }
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80035bc:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d10b      	bne.n	80035e6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d4:	d905      	bls.n	80035e2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80035d6:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4a32      	ldr	r2, [pc, #200]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	e057      	b.n	8003696 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ec:	d90a      	bls.n	8003604 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003600:	60d3      	str	r3, [r2, #12]
 8003602:	e007      	b.n	8003614 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003604:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800360c:	4925      	ldr	r1, [pc, #148]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4313      	orrs	r3, r2
 8003612:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003614:	4b24      	ldr	r3, [pc, #144]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a24      	ldr	r2, [pc, #144]	; (80036ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	2232      	movs	r2, #50	; 0x32
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	4a21      	ldr	r2, [pc, #132]	; (80036ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003628:	fba2 2303 	umull	r2, r3, r2, r3
 800362c:	099b      	lsrs	r3, r3, #6
 800362e:	3301      	adds	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003632:	e002      	b.n	800363a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	3b01      	subs	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d102      	bne.n	800364c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f3      	bne.n	8003634 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01b      	beq.n	800368a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003652:	4b15      	ldr	r3, [pc, #84]	; (80036a8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a15      	ldr	r2, [pc, #84]	; (80036ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	2232      	movs	r2, #50	; 0x32
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	4a11      	ldr	r2, [pc, #68]	; (80036ac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003670:	e002      	b.n	8003678 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	3b01      	subs	r3, #1
 8003676:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800367a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f3      	bne.n	8003672 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e000      	b.n	8003696 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3714      	adds	r7, #20
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	46020800 	.word	0x46020800
 80036a8:	20000010 	.word	0x20000010
 80036ac:	10624dd3 	.word	0x10624dd3

080036b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	46020800 	.word	0x46020800

080036cc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <HAL_PWREx_ConfigSupply+0x94>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_PWREx_ConfigSupply+0x98>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	099b      	lsrs	r3, r3, #6
 80036e0:	2232      	movs	r2, #50	; 0x32
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	4a1f      	ldr	r2, [pc, #124]	; (8003764 <HAL_PWREx_ConfigSupply+0x98>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	099b      	lsrs	r3, r3, #6
 80036ee:	3301      	adds	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d113      	bne.n	8003720 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_PWREx_ConfigSupply+0x9c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_PWREx_ConfigSupply+0x9c>)
 80036fe:	f023 0302 	bic.w	r3, r3, #2
 8003702:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003704:	e002      	b.n	800370c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	3b01      	subs	r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800370c:	4b16      	ldr	r3, [pc, #88]	; (8003768 <HAL_PWREx_ConfigSupply+0x9c>)
 800370e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d116      	bne.n	8003746 <HAL_PWREx_ConfigSupply+0x7a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f3      	bne.n	8003706 <HAL_PWREx_ConfigSupply+0x3a>
 800371e:	e012      	b.n	8003746 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <HAL_PWREx_ConfigSupply+0x9c>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4a10      	ldr	r2, [pc, #64]	; (8003768 <HAL_PWREx_ConfigSupply+0x9c>)
 8003726:	f043 0302 	orr.w	r3, r3, #2
 800372a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800372c:	e002      	b.n	8003734 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3b01      	subs	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003734:	4b0c      	ldr	r3, [pc, #48]	; (8003768 <HAL_PWREx_ConfigSupply+0x9c>)
 8003736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_PWREx_ConfigSupply+0x7a>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f3      	bne.n	800372e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e000      	b.n	8003752 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000010 	.word	0x20000010
 8003764:	10624dd3 	.word	0x10624dd3
 8003768:	46020800 	.word	0x46020800

0800376c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	4a04      	ldr	r2, [pc, #16]	; (8003788 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003776:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800377a:	6113      	str	r3, [r2, #16]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	46020800 	.word	0x46020800

0800378c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	46020800 	.word	0x46020800

080037ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f000 bec8 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c6:	4b99      	ldr	r3, [pc, #612]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d0:	4b96      	ldr	r3, [pc, #600]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0310 	and.w	r3, r3, #16
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 816c 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_RCC_OscConfig+0x52>
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2b0c      	cmp	r3, #12
 80037f2:	f040 80de 	bne.w	80039b2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	f040 80da 	bne.w	80039b2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f000 bea5 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003810:	4b86      	ldr	r3, [pc, #536]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d004      	beq.n	8003826 <HAL_RCC_OscConfig+0x7a>
 800381c:	4b83      	ldr	r3, [pc, #524]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003824:	e005      	b.n	8003832 <HAL_RCC_OscConfig+0x86>
 8003826:	4b81      	ldr	r3, [pc, #516]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003832:	4293      	cmp	r3, r2
 8003834:	d255      	bcs.n	80038e2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f9df 	bl	8004c04 <RCC_SetFlashLatencyFromMSIRange>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d002      	beq.n	8003852 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	f000 be82 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003852:	4b76      	ldr	r3, [pc, #472]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4a75      	ldr	r2, [pc, #468]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003858:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800385c:	6093      	str	r3, [r2, #8]
 800385e:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	4970      	ldr	r1, [pc, #448]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003878:	d309      	bcc.n	800388e <HAL_RCC_OscConfig+0xe2>
 800387a:	4b6c      	ldr	r3, [pc, #432]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f023 021f 	bic.w	r2, r3, #31
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	4969      	ldr	r1, [pc, #420]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003888:	4313      	orrs	r3, r2
 800388a:	60cb      	str	r3, [r1, #12]
 800388c:	e07e      	b.n	800398c <HAL_RCC_OscConfig+0x1e0>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	da0a      	bge.n	80038ac <HAL_RCC_OscConfig+0x100>
 8003896:	4b65      	ldr	r3, [pc, #404]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	4961      	ldr	r1, [pc, #388]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	60cb      	str	r3, [r1, #12]
 80038aa:	e06f      	b.n	800398c <HAL_RCC_OscConfig+0x1e0>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b4:	d30a      	bcc.n	80038cc <HAL_RCC_OscConfig+0x120>
 80038b6:	4b5d      	ldr	r3, [pc, #372]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	029b      	lsls	r3, r3, #10
 80038c4:	4959      	ldr	r1, [pc, #356]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	60cb      	str	r3, [r1, #12]
 80038ca:	e05f      	b.n	800398c <HAL_RCC_OscConfig+0x1e0>
 80038cc:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	03db      	lsls	r3, r3, #15
 80038da:	4954      	ldr	r1, [pc, #336]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	60cb      	str	r3, [r1, #12]
 80038e0:	e054      	b.n	800398c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80038e2:	4b52      	ldr	r3, [pc, #328]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4a51      	ldr	r2, [pc, #324]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	4b4f      	ldr	r3, [pc, #316]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	494c      	ldr	r1, [pc, #304]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003908:	d309      	bcc.n	800391e <HAL_RCC_OscConfig+0x172>
 800390a:	4b48      	ldr	r3, [pc, #288]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 021f 	bic.w	r2, r3, #31
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	4945      	ldr	r1, [pc, #276]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003918:	4313      	orrs	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
 800391c:	e028      	b.n	8003970 <HAL_RCC_OscConfig+0x1c4>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2b00      	cmp	r3, #0
 8003924:	da0a      	bge.n	800393c <HAL_RCC_OscConfig+0x190>
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	015b      	lsls	r3, r3, #5
 8003934:	493d      	ldr	r1, [pc, #244]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003936:	4313      	orrs	r3, r2
 8003938:	60cb      	str	r3, [r1, #12]
 800393a:	e019      	b.n	8003970 <HAL_RCC_OscConfig+0x1c4>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003944:	d30a      	bcc.n	800395c <HAL_RCC_OscConfig+0x1b0>
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	4935      	ldr	r1, [pc, #212]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003956:	4313      	orrs	r3, r2
 8003958:	60cb      	str	r3, [r1, #12]
 800395a:	e009      	b.n	8003970 <HAL_RCC_OscConfig+0x1c4>
 800395c:	4b33      	ldr	r3, [pc, #204]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	03db      	lsls	r3, r3, #15
 800396a:	4930      	ldr	r1, [pc, #192]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 800396c:	4313      	orrs	r3, r2
 800396e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	4618      	mov	r0, r3
 800397c:	f001 f942 	bl	8004c04 <RCC_SetFlashLatencyFromMSIRange>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	f000 bde5 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800398c:	f001 f8e4 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003990:	4b27      	ldr	r3, [pc, #156]	; (8003a30 <HAL_RCC_OscConfig+0x284>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fc07 	bl	80021a8 <HAL_InitTick>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80039a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 808a 	beq.w	8003abe <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80039aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ae:	f000 bdd2 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d066      	beq.n	8003a88 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039c0:	f043 0301 	orr.w	r3, r3, #1
 80039c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80039c6:	f7fe fc39 	bl	800223c <HAL_GetTick>
 80039ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039cc:	e009      	b.n	80039e2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039ce:	f7fe fc35 	bl	800223c <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d902      	bls.n	80039e2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f000 bdba 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80039e2:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0304 	and.w	r3, r3, #4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ef      	beq.n	80039ce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80039ee:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	4a0e      	ldr	r2, [pc, #56]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a06:	4909      	ldr	r1, [pc, #36]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003a14:	d30e      	bcc.n	8003a34 <HAL_RCC_OscConfig+0x288>
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 021f 	bic.w	r2, r3, #31
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4902      	ldr	r1, [pc, #8]	; (8003a2c <HAL_RCC_OscConfig+0x280>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	60cb      	str	r3, [r1, #12]
 8003a28:	e04a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x314>
 8003a2a:	bf00      	nop
 8003a2c:	46020c00 	.word	0x46020c00
 8003a30:	20000014 	.word	0x20000014
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	da0a      	bge.n	8003a52 <HAL_RCC_OscConfig+0x2a6>
 8003a3c:	4b98      	ldr	r3, [pc, #608]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	015b      	lsls	r3, r3, #5
 8003a4a:	4995      	ldr	r1, [pc, #596]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	60cb      	str	r3, [r1, #12]
 8003a50:	e036      	b.n	8003ac0 <HAL_RCC_OscConfig+0x314>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5a:	d30a      	bcc.n	8003a72 <HAL_RCC_OscConfig+0x2c6>
 8003a5c:	4b90      	ldr	r3, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	029b      	lsls	r3, r3, #10
 8003a6a:	498d      	ldr	r1, [pc, #564]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60cb      	str	r3, [r1, #12]
 8003a70:	e026      	b.n	8003ac0 <HAL_RCC_OscConfig+0x314>
 8003a72:	4b8b      	ldr	r3, [pc, #556]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	03db      	lsls	r3, r3, #15
 8003a80:	4987      	ldr	r1, [pc, #540]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	60cb      	str	r3, [r1, #12]
 8003a86:	e01b      	b.n	8003ac0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a88:	4b85      	ldr	r3, [pc, #532]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a84      	ldr	r2, [pc, #528]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a94:	f7fe fbd2 	bl	800223c <HAL_GetTick>
 8003a98:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a9a:	e009      	b.n	8003ab0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9c:	f7fe fbce 	bl	800223c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d902      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	f000 bd53 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ab0:	4b7b      	ldr	r3, [pc, #492]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0304 	and.w	r3, r3, #4
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ef      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2f0>
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003abe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 808b 	beq.w	8003be4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d005      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x334>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ad6:	2b0c      	cmp	r3, #12
 8003ad8:	d109      	bne.n	8003aee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d106      	bne.n	8003aee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d17d      	bne.n	8003be4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f000 bd34 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af6:	d106      	bne.n	8003b06 <HAL_RCC_OscConfig+0x35a>
 8003af8:	4b69      	ldr	r3, [pc, #420]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a68      	ldr	r2, [pc, #416]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	e041      	b.n	8003b8a <HAL_RCC_OscConfig+0x3de>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0x38a>
 8003b10:	4b63      	ldr	r3, [pc, #396]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a62      	ldr	r2, [pc, #392]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b60      	ldr	r3, [pc, #384]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a5f      	ldr	r2, [pc, #380]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b22:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	4b5d      	ldr	r3, [pc, #372]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5c      	ldr	r2, [pc, #368]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e029      	b.n	8003b8a <HAL_RCC_OscConfig+0x3de>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003b3e:	d112      	bne.n	8003b66 <HAL_RCC_OscConfig+0x3ba>
 8003b40:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a56      	ldr	r2, [pc, #344]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a53      	ldr	r2, [pc, #332]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	4b51      	ldr	r3, [pc, #324]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a50      	ldr	r2, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e011      	b.n	8003b8a <HAL_RCC_OscConfig+0x3de>
 8003b66:	4b4e      	ldr	r3, [pc, #312]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a4d      	ldr	r2, [pc, #308]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b4b      	ldr	r3, [pc, #300]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4a      	ldr	r2, [pc, #296]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	4b48      	ldr	r3, [pc, #288]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a47      	ldr	r2, [pc, #284]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003b84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b92:	f7fe fb53 	bl	800223c <HAL_GetTick>
 8003b96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b98:	e009      	b.n	8003bae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b9a:	f7fe fb4f 	bl	800223c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d902      	bls.n	8003bae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	f000 bcd4 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bae:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0ef      	beq.n	8003b9a <HAL_RCC_OscConfig+0x3ee>
 8003bba:	e013      	b.n	8003be4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fb3e 	bl	800223c <HAL_GetTick>
 8003bc0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bc2:	e009      	b.n	8003bd8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc4:	f7fe fb3a 	bl	800223c <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b64      	cmp	r3, #100	; 0x64
 8003bd0:	d902      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	f000 bcbf 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bd8:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1ef      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05f      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x456>
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	d114      	bne.n	8003c26 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d111      	bne.n	8003c26 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f000 bca3 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c10:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	4920      	ldr	r1, [pc, #128]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c24:	e044      	b.n	8003cb0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d024      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003c2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1b      	ldr	r2, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c38:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c3a:	f7fe faff 	bl	800223c <HAL_GetTick>
 8003c3e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c40:	e009      	b.n	8003c56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c42:	f7fe fafb 	bl	800223c <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	f000 bc80 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c56:	4b12      	ldr	r3, [pc, #72]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ef      	beq.n	8003c42 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	490b      	ldr	r1, [pc, #44]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	610b      	str	r3, [r1, #16]
 8003c76:	e01b      	b.n	8003cb0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <HAL_RCC_OscConfig+0x4f4>)
 8003c7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c84:	f7fe fada 	bl	800223c <HAL_GetTick>
 8003c88:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fe fad6 	bl	800223c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d904      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	f000 bc5b 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
 8003ca0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ca4:	4baf      	ldr	r3, [pc, #700]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ed      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80c8 	beq.w	8003e4e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc4:	4ba7      	ldr	r3, [pc, #668]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d111      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	4ba4      	ldr	r3, [pc, #656]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd8:	4aa2      	ldr	r2, [pc, #648]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003cda:	f043 0304 	orr.w	r3, r3, #4
 8003cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003ce2:	4ba0      	ldr	r3, [pc, #640]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cf6:	4b9c      	ldr	r3, [pc, #624]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d119      	bne.n	8003d36 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003d02:	4b99      	ldr	r3, [pc, #612]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	4a98      	ldr	r2, [pc, #608]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0e:	f7fe fa95 	bl	800223c <HAL_GetTick>
 8003d12:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d14:	e009      	b.n	8003d2a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d16:	f7fe fa91 	bl	800223c <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d902      	bls.n	8003d2a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	f000 bc16 	b.w	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003d2a:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ef      	beq.n	8003d16 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d05f      	beq.n	8003dfe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003d3e:	4b89      	ldr	r3, [pc, #548]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003d40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d44:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	6a3b      	ldr	r3, [r7, #32]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d037      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d006      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e3f4      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01b      	beq.n	8003dae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d76:	4b7b      	ldr	r3, [pc, #492]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d7c:	4a79      	ldr	r2, [pc, #484]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003d7e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003d82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003d86:	f7fe fa59 	bl	800223c <HAL_GetTick>
 8003d8a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fe fa55 	bl	800223c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b05      	cmp	r3, #5
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e3da      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003da0:	4b70      	ldr	r3, [pc, #448]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003dae:	4b6d      	ldr	r3, [pc, #436]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003db4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	4969      	ldr	r1, [pc, #420]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003dc4:	4b67      	ldr	r3, [pc, #412]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dca:	4a66      	ldr	r2, [pc, #408]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003dd4:	f7fe fa32 	bl	800223c <HAL_GetTick>
 8003dd8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ddc:	f7fe fa2e 	bl	800223c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e3b3      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003dee:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0ef      	beq.n	8003ddc <HAL_RCC_OscConfig+0x630>
 8003dfc:	e01b      	b.n	8003e36 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003dfe:	4b59      	ldr	r3, [pc, #356]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e04:	4a57      	ldr	r2, [pc, #348]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e06:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003e0e:	f7fe fa15 	bl	800223c <HAL_GetTick>
 8003e12:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e16:	f7fe fa11 	bl	800223c <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b05      	cmp	r3, #5
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e396      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003e28:	4b4e      	ldr	r3, [pc, #312]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1ef      	bne.n	8003e16 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e36:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d107      	bne.n	8003e4e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3e:	4b49      	ldr	r3, [pc, #292]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e44:	4a47      	ldr	r2, [pc, #284]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e46:	f023 0304 	bic.w	r3, r3, #4
 8003e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8111 	beq.w	800407e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b40      	ldr	r3, [pc, #256]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d111      	bne.n	8003e94 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e70:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e78:	f043 0304 	orr.w	r3, r3, #4
 8003e7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	613b      	str	r3, [r7, #16]
 8003e8c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e94:	4b34      	ldr	r3, [pc, #208]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d118      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003ea0:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea4:	4a30      	ldr	r2, [pc, #192]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eac:	f7fe f9c6 	bl	800223c <HAL_GetTick>
 8003eb0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eb4:	f7fe f9c2 	bl	800223c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e347      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_RCC_OscConfig+0x7bc>)
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d01f      	beq.n	8003f1e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003eea:	4b1e      	ldr	r3, [pc, #120]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003eec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ef0:	4a1c      	ldr	r2, [pc, #112]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003ef2:	f043 0304 	orr.w	r3, r3, #4
 8003ef6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003efa:	4b1a      	ldr	r3, [pc, #104]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f00:	4a18      	ldr	r2, [pc, #96]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f02:	f043 0301 	orr.w	r3, r3, #1
 8003f06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f0a:	e018      	b.n	8003f3e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f0c:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f12:	4a14      	ldr	r2, [pc, #80]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f14:	f043 0301 	orr.w	r3, r3, #1
 8003f18:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f1c:	e00f      	b.n	8003f3e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f24:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f26:	f023 0301 	bic.w	r3, r3, #1
 8003f2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <HAL_RCC_OscConfig+0x7b8>)
 8003f36:	f023 0304 	bic.w	r3, r3, #4
 8003f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d057      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003f46:	f7fe f979 	bl	800223c <HAL_GetTick>
 8003f4a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4c:	e00e      	b.n	8003f6c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fe f975 	bl	800223c <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d905      	bls.n	8003f6c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e2f8      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
 8003f64:	46020c00 	.word	0x46020c00
 8003f68:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f6c:	4b9c      	ldr	r3, [pc, #624]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0e9      	beq.n	8003f4e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01b      	beq.n	8003fbe <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f86:	4b96      	ldr	r3, [pc, #600]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f8c:	4a94      	ldr	r2, [pc, #592]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fe f950 	bl	800223c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e2d3      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003fae:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ed      	beq.n	8003f98 <HAL_RCC_OscConfig+0x7ec>
 8003fbc:	e053      	b.n	8004066 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc4:	4a86      	ldr	r2, [pc, #536]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd0:	f7fe f934 	bl	800223c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e2b7      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fe6:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8003fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ed      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x824>
 8003ff4:	e037      	b.n	8004066 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f921 	bl	800223c <HAL_GetTick>
 8003ffa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ffc:	e00a      	b.n	8004014 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ffe:	f7fe f91d 	bl	800223c <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	f241 3288 	movw	r2, #5000	; 0x1388
 800400c:	4293      	cmp	r3, r2
 800400e:	d901      	bls.n	8004014 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e2a0      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004014:	4b72      	ldr	r3, [pc, #456]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1ed      	bne.n	8003ffe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004022:	4b6f      	ldr	r3, [pc, #444]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004024:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01a      	beq.n	8004066 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004030:	4b6b      	ldr	r3, [pc, #428]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004036:	4a6a      	ldr	r2, [pc, #424]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800403c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004040:	e00a      	b.n	8004058 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004042:	f7fe f8fb 	bl	800223c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004050:	4293      	cmp	r3, r2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e27e      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004058:	4b61      	ldr	r3, [pc, #388]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 800405a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800405e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1ed      	bne.n	8004042 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004066:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800406a:	2b01      	cmp	r3, #1
 800406c:	d107      	bne.n	800407e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406e:	4b5c      	ldr	r3, [pc, #368]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004074:	4a5a      	ldr	r2, [pc, #360]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004076:	f023 0304 	bic.w	r3, r3, #4
 800407a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d036      	beq.n	80040f8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d019      	beq.n	80040c6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004092:	4b53      	ldr	r3, [pc, #332]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a52      	ldr	r2, [pc, #328]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004098:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800409c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800409e:	f7fe f8cd 	bl	800223c <HAL_GetTick>
 80040a2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040a6:	f7fe f8c9 	bl	800223c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e24e      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80040b8:	4b49      	ldr	r3, [pc, #292]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0f0      	beq.n	80040a6 <HAL_RCC_OscConfig+0x8fa>
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80040c6:	4b46      	ldr	r3, [pc, #280]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a45      	ldr	r2, [pc, #276]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80040cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040d2:	f7fe f8b3 	bl	800223c <HAL_GetTick>
 80040d6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040da:	f7fe f8af 	bl	800223c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e234      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80040ec:	4b3c      	ldr	r3, [pc, #240]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d036      	beq.n	8004172 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004108:	2b00      	cmp	r3, #0
 800410a:	d019      	beq.n	8004140 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 800410c:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a33      	ldr	r2, [pc, #204]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004112:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004116:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004118:	f7fe f890 	bl	800223c <HAL_GetTick>
 800411c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004120:	f7fe f88c 	bl	800223c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e211      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004132:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x974>
 800413e:	e018      	b.n	8004172 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004140:	4b27      	ldr	r3, [pc, #156]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800414c:	f7fe f876 	bl	800223c <HAL_GetTick>
 8004150:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004154:	f7fe f872 	bl	800223c <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e1f7      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d07f      	beq.n	800427e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004182:	2b00      	cmp	r3, #0
 8004184:	d062      	beq.n	800424c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004186:	4b16      	ldr	r3, [pc, #88]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4a15      	ldr	r2, [pc, #84]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 800418c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004190:	6093      	str	r3, [r2, #8]
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	4910      	ldr	r1, [pc, #64]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041ac:	d309      	bcc.n	80041c2 <HAL_RCC_OscConfig+0xa16>
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 021f 	bic.w	r2, r3, #31
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	4909      	ldr	r1, [pc, #36]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	60cb      	str	r3, [r1, #12]
 80041c0:	e02a      	b.n	8004218 <HAL_RCC_OscConfig+0xa6c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da0c      	bge.n	80041e4 <HAL_RCC_OscConfig+0xa38>
 80041ca:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	015b      	lsls	r3, r3, #5
 80041d8:	4901      	ldr	r1, [pc, #4]	; (80041e0 <HAL_RCC_OscConfig+0xa34>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	60cb      	str	r3, [r1, #12]
 80041de:	e01b      	b.n	8004218 <HAL_RCC_OscConfig+0xa6c>
 80041e0:	46020c00 	.word	0x46020c00
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ec:	d30a      	bcc.n	8004204 <HAL_RCC_OscConfig+0xa58>
 80041ee:	4ba1      	ldr	r3, [pc, #644]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	029b      	lsls	r3, r3, #10
 80041fc:	499d      	ldr	r1, [pc, #628]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	60cb      	str	r3, [r1, #12]
 8004202:	e009      	b.n	8004218 <HAL_RCC_OscConfig+0xa6c>
 8004204:	4b9b      	ldr	r3, [pc, #620]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	03db      	lsls	r3, r3, #15
 8004212:	4998      	ldr	r1, [pc, #608]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004214:	4313      	orrs	r3, r2
 8004216:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004218:	4b96      	ldr	r3, [pc, #600]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a95      	ldr	r2, [pc, #596]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 800421e:	f043 0310 	orr.w	r3, r3, #16
 8004222:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004224:	f7fe f80a 	bl	800223c <HAL_GetTick>
 8004228:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800422c:	f7fe f806 	bl	800223c <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e18b      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800423e:	4b8d      	ldr	r3, [pc, #564]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xa80>
 800424a:	e018      	b.n	800427e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800424c:	4b89      	ldr	r3, [pc, #548]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a88      	ldr	r2, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004252:	f023 0310 	bic.w	r3, r3, #16
 8004256:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004258:	f7fd fff0 	bl	800223c <HAL_GetTick>
 800425c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004260:	f7fd ffec 	bl	800223c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e171      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004272:	4b80      	ldr	r3, [pc, #512]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 8166 	beq.w	8004554 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800428e:	4b79      	ldr	r3, [pc, #484]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b0c      	cmp	r3, #12
 8004298:	f000 80f2 	beq.w	8004480 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	f040 80c5 	bne.w	8004430 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80042a6:	4b73      	ldr	r3, [pc, #460]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a72      	ldr	r2, [pc, #456]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042b2:	f7fd ffc3 	bl	800223c <HAL_GetTick>
 80042b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ba:	f7fd ffbf 	bl	800223c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e144      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80042cc:	4b69      	ldr	r3, [pc, #420]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1f0      	bne.n	80042ba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d8:	4b66      	ldr	r3, [pc, #408]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d111      	bne.n	800430a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80042e6:	4b63      	ldr	r3, [pc, #396]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ec:	4a61      	ldr	r2, [pc, #388]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80042f6:	4b5f      	ldr	r3, [pc, #380]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80042f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800430a:	4b5b      	ldr	r3, [pc, #364]	; (8004478 <HAL_RCC_OscConfig+0xccc>)
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004312:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004316:	d102      	bne.n	800431e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800431e:	4b56      	ldr	r3, [pc, #344]	; (8004478 <HAL_RCC_OscConfig+0xccc>)
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	4a55      	ldr	r2, [pc, #340]	; (8004478 <HAL_RCC_OscConfig+0xccc>)
 8004324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004328:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800432a:	4b52      	ldr	r3, [pc, #328]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800433e:	3a01      	subs	r2, #1
 8004340:	0212      	lsls	r2, r2, #8
 8004342:	4311      	orrs	r1, r2
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004348:	430a      	orrs	r2, r1
 800434a:	494a      	ldr	r1, [pc, #296]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	628b      	str	r3, [r1, #40]	; 0x28
 8004350:	4b48      	ldr	r3, [pc, #288]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004354:	4b49      	ldr	r3, [pc, #292]	; (800447c <HAL_RCC_OscConfig+0xcd0>)
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800435c:	3a01      	subs	r2, #1
 800435e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004366:	3a01      	subs	r2, #1
 8004368:	0252      	lsls	r2, r2, #9
 800436a:	b292      	uxth	r2, r2
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004372:	3a01      	subs	r2, #1
 8004374:	0412      	lsls	r2, r2, #16
 8004376:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800437a:	4311      	orrs	r1, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004380:	3a01      	subs	r2, #1
 8004382:	0612      	lsls	r2, r2, #24
 8004384:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004388:	430a      	orrs	r2, r1
 800438a:	493a      	ldr	r1, [pc, #232]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 800438c:	4313      	orrs	r3, r2
 800438e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004390:	4b38      	ldr	r3, [pc, #224]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	4a37      	ldr	r2, [pc, #220]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004396:	f023 0310 	bic.w	r3, r3, #16
 800439a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	4a34      	ldr	r2, [pc, #208]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80043a6:	4b33      	ldr	r3, [pc, #204]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	4a32      	ldr	r2, [pc, #200]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043ac:	f043 0310 	orr.w	r3, r3, #16
 80043b0:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80043b2:	4b30      	ldr	r3, [pc, #192]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b6:	f023 020c 	bic.w	r2, r3, #12
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043be:	492d      	ldr	r1, [pc, #180]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80043c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d105      	bne.n	80043d8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80043cc:	4b2a      	ldr	r3, [pc, #168]	; (8004478 <HAL_RCC_OscConfig+0xccc>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	4a29      	ldr	r2, [pc, #164]	; (8004478 <HAL_RCC_OscConfig+0xccc>)
 80043d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80043d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e6:	4a23      	ldr	r2, [pc, #140]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043e8:	f023 0304 	bic.w	r3, r3, #4
 80043ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80043f0:	4b20      	ldr	r3, [pc, #128]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80043fc:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004408:	f7fd ff18 	bl	800223c <HAL_GetTick>
 800440c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd ff14 	bl	800223c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e099      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004422:	4b14      	ldr	r3, [pc, #80]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0xc64>
 800442e:	e091      	b.n	8004554 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004430:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800443a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800443c:	f7fd fefe 	bl	800223c <HAL_GetTick>
 8004440:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd fefa 	bl	800223c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e07f      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004462:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	4a03      	ldr	r2, [pc, #12]	; (8004474 <HAL_RCC_OscConfig+0xcc8>)
 8004468:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800446c:	f023 0303 	bic.w	r3, r3, #3
 8004470:	6293      	str	r3, [r2, #40]	; 0x28
 8004472:	e06f      	b.n	8004554 <HAL_RCC_OscConfig+0xda8>
 8004474:	46020c00 	.word	0x46020c00
 8004478:	46020800 	.word	0x46020800
 800447c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004480:	4b37      	ldr	r3, [pc, #220]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 8004488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2b01      	cmp	r3, #1
 8004492:	d039      	beq.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0203 	and.w	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d132      	bne.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	0a1b      	lsrs	r3, r3, #8
 80044a6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d129      	bne.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d122      	bne.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044cc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d11a      	bne.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	0a5b      	lsrs	r3, r3, #9
 80044d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d111      	bne.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	0c1b      	lsrs	r3, r3, #16
 80044e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d108      	bne.n	8004508 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	0e1b      	lsrs	r3, r3, #24
 80044fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e024      	b.n	8004556 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800450c:	4b14      	ldr	r3, [pc, #80]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 800450e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004510:	08db      	lsrs	r3, r3, #3
 8004512:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800451a:	429a      	cmp	r2, r3
 800451c:	d01a      	beq.n	8004554 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800451e:	4b10      	ldr	r3, [pc, #64]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	4a0f      	ldr	r2, [pc, #60]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 8004524:	f023 0310 	bic.w	r3, r3, #16
 8004528:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452a:	f7fd fe87 	bl	800223c <HAL_GetTick>
 800452e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004530:	bf00      	nop
 8004532:	f7fd fe83 	bl	800223c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	4293      	cmp	r3, r2
 800453c:	d0f9      	beq.n	8004532 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004542:	4a07      	ldr	r2, [pc, #28]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 800454a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454c:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_RCC_OscConfig+0xdb4>)
 800454e:	f043 0310 	orr.w	r3, r3, #16
 8004552:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3738      	adds	r7, #56	; 0x38
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	46020c00 	.word	0x46020c00

08004564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e1d9      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004578:	4b9b      	ldr	r3, [pc, #620]	; (80047e8 <HAL_RCC_ClockConfig+0x284>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	429a      	cmp	r2, r3
 8004584:	d910      	bls.n	80045a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004586:	4b98      	ldr	r3, [pc, #608]	; (80047e8 <HAL_RCC_ClockConfig+0x284>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f023 020f 	bic.w	r2, r3, #15
 800458e:	4996      	ldr	r1, [pc, #600]	; (80047e8 <HAL_RCC_ClockConfig+0x284>)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004596:	4b94      	ldr	r3, [pc, #592]	; (80047e8 <HAL_RCC_ClockConfig+0x284>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d001      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e1c1      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0310 	and.w	r3, r3, #16
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d010      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	4b8c      	ldr	r3, [pc, #560]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80045ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d908      	bls.n	80045d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80045c4:	4b89      	ldr	r3, [pc, #548]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	4986      	ldr	r1, [pc, #536]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d012      	beq.n	8004608 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	4b81      	ldr	r3, [pc, #516]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	091b      	lsrs	r3, r3, #4
 80045ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d909      	bls.n	8004608 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80045f4:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	497a      	ldr	r1, [pc, #488]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004604:	4313      	orrs	r3, r2
 8004606:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	4b74      	ldr	r3, [pc, #464]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004620:	429a      	cmp	r2, r3
 8004622:	d908      	bls.n	8004636 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004624:	4b71      	ldr	r3, [pc, #452]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	496e      	ldr	r1, [pc, #440]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004632:	4313      	orrs	r3, r2
 8004634:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	4b69      	ldr	r3, [pc, #420]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	429a      	cmp	r2, r3
 8004650:	d908      	bls.n	8004664 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004652:	4b66      	ldr	r3, [pc, #408]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 020f 	bic.w	r2, r3, #15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	4963      	ldr	r1, [pc, #396]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004660:	4313      	orrs	r3, r2
 8004662:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 80d2 	beq.w	8004816 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2b03      	cmp	r3, #3
 800467c:	d143      	bne.n	8004706 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800467e:	4b5b      	ldr	r3, [pc, #364]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d110      	bne.n	80046ae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800468c:	4b57      	ldr	r3, [pc, #348]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004692:	4a56      	ldr	r2, [pc, #344]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004694:	f043 0304 	orr.w	r3, r3, #4
 8004698:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800469c:	4b53      	ldr	r3, [pc, #332]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 800469e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80046ae:	f7fd fdc5 	bl	800223c <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80046b4:	4b4e      	ldr	r3, [pc, #312]	; (80047f0 <HAL_RCC_ClockConfig+0x28c>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00f      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80046c2:	f7fd fdbb 	bl	800223c <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e12b      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80046d4:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <HAL_RCC_ClockConfig+0x28c>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046e6:	4b41      	ldr	r3, [pc, #260]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ec:	4a3f      	ldr	r2, [pc, #252]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80046ee:	f023 0304 	bic.w	r3, r3, #4
 80046f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046f6:	4b3d      	ldr	r3, [pc, #244]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d121      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e112      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	2b02      	cmp	r3, #2
 800470c:	d107      	bne.n	800471e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d115      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e106      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d107      	bne.n	8004736 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004726:	4b31      	ldr	r3, [pc, #196]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0fa      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004736:	4b2d      	ldr	r3, [pc, #180]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e0f2      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f023 0203 	bic.w	r2, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	4926      	ldr	r1, [pc, #152]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004754:	4313      	orrs	r3, r2
 8004756:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004758:	f7fd fd70 	bl	800223c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d112      	bne.n	800478c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004766:	e00a      	b.n	800477e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004768:	f7fd fd68 	bl	800223c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	; 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0d6      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800477e:	4b1b      	ldr	r3, [pc, #108]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d1ee      	bne.n	8004768 <HAL_RCC_ClockConfig+0x204>
 800478a:	e044      	b.n	8004816 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d112      	bne.n	80047ba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004796:	f7fd fd51 	bl	800223c <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0bf      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047ac:	4b0f      	ldr	r3, [pc, #60]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	f003 030c 	and.w	r3, r3, #12
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d1ee      	bne.n	8004796 <HAL_RCC_ClockConfig+0x232>
 80047b8:	e02d      	b.n	8004816 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d123      	bne.n	800480a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fd fd3a 	bl	800223c <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0a8      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80047da:	4b04      	ldr	r3, [pc, #16]	; (80047ec <HAL_RCC_ClockConfig+0x288>)
 80047dc:	69db      	ldr	r3, [r3, #28]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ee      	bne.n	80047c4 <HAL_RCC_ClockConfig+0x260>
 80047e6:	e016      	b.n	8004816 <HAL_RCC_ClockConfig+0x2b2>
 80047e8:	40022000 	.word	0x40022000
 80047ec:	46020c00 	.word	0x46020c00
 80047f0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f4:	f7fd fd22 	bl	800223c <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004802:	4293      	cmp	r3, r2
 8004804:	d901      	bls.n	800480a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e090      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800480a:	4b4a      	ldr	r3, [pc, #296]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b04      	cmp	r3, #4
 8004814:	d1ee      	bne.n	80047f4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d010      	beq.n	8004844 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b43      	ldr	r3, [pc, #268]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	429a      	cmp	r2, r3
 8004830:	d208      	bcs.n	8004844 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004832:	4b40      	ldr	r3, [pc, #256]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	f023 020f 	bic.w	r2, r3, #15
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	493d      	ldr	r1, [pc, #244]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 8004840:	4313      	orrs	r3, r2
 8004842:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004844:	4b3c      	ldr	r3, [pc, #240]	; (8004938 <HAL_RCC_ClockConfig+0x3d4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 030f 	and.w	r3, r3, #15
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d210      	bcs.n	8004874 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004852:	4b39      	ldr	r3, [pc, #228]	; (8004938 <HAL_RCC_ClockConfig+0x3d4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 020f 	bic.w	r2, r3, #15
 800485a:	4937      	ldr	r1, [pc, #220]	; (8004938 <HAL_RCC_ClockConfig+0x3d4>)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	4313      	orrs	r3, r2
 8004860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004862:	4b35      	ldr	r3, [pc, #212]	; (8004938 <HAL_RCC_ClockConfig+0x3d4>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e05b      	b.n	800492c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68da      	ldr	r2, [r3, #12]
 8004884:	4b2b      	ldr	r3, [pc, #172]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800488c:	429a      	cmp	r2, r3
 800488e:	d208      	bcs.n	80048a2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004890:	4b28      	ldr	r3, [pc, #160]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4925      	ldr	r1, [pc, #148]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d012      	beq.n	80048d4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	4b20      	ldr	r3, [pc, #128]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	091b      	lsrs	r3, r3, #4
 80048b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048bc:	429a      	cmp	r2, r3
 80048be:	d209      	bcs.n	80048d4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80048c0:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	4919      	ldr	r1, [pc, #100]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d010      	beq.n	8004902 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d208      	bcs.n	8004902 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80048f0:	4b10      	ldr	r3, [pc, #64]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	695b      	ldr	r3, [r3, #20]
 80048fc:	490d      	ldr	r1, [pc, #52]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004902:	f000 f821 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8004906:	4602      	mov	r2, r0
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <HAL_RCC_ClockConfig+0x3d0>)
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	490a      	ldr	r1, [pc, #40]	; (800493c <HAL_RCC_ClockConfig+0x3d8>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <HAL_RCC_ClockConfig+0x3dc>)
 800491a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800491c:	4b09      	ldr	r3, [pc, #36]	; (8004944 <HAL_RCC_ClockConfig+0x3e0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7fd fc41 	bl	80021a8 <HAL_InitTick>
 8004926:	4603      	mov	r3, r0
 8004928:	73fb      	strb	r3, [r7, #15]

  return status;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	46020c00 	.word	0x46020c00
 8004938:	40022000 	.word	0x40022000
 800493c:	0800f168 	.word	0x0800f168
 8004940:	20000010 	.word	0x20000010
 8004944:	20000014 	.word	0x20000014

08004948 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	b08b      	sub	sp, #44	; 0x2c
 800494c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	4b7b      	ldr	r3, [pc, #492]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004960:	4b78      	ldr	r3, [pc, #480]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_GetSysClockFreq+0x34>
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d121      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d11e      	bne.n	80049ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800497c:	4b71      	ldr	r3, [pc, #452]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d107      	bne.n	8004998 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004988:	4b6e      	ldr	r3, [pc, #440]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800498a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800498e:	0b1b      	lsrs	r3, r3, #12
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e005      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004998:	4b6a      	ldr	r3, [pc, #424]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	0f1b      	lsrs	r3, r3, #28
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80049a4:	4a68      	ldr	r2, [pc, #416]	; (8004b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d110      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049b8:	e00d      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ba:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049c6:	4b61      	ldr	r3, [pc, #388]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x204>)
 80049c8:	623b      	str	r3, [r7, #32]
 80049ca:	e004      	b.n	80049d6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049d2:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <HAL_RCC_GetSysClockFreq+0x204>)
 80049d4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b0c      	cmp	r3, #12
 80049da:	f040 80ac 	bne.w	8004b36 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80049de:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80049e8:	4b56      	ldr	r3, [pc, #344]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	0a1b      	lsrs	r3, r3, #8
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	3301      	adds	r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049f6:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a02:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	08db      	lsrs	r3, r3, #3
 8004a08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 8086 	beq.w	8004b32 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d003      	beq.n	8004a34 <HAL_RCC_GetSysClockFreq+0xec>
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d022      	beq.n	8004a78 <HAL_RCC_GetSysClockFreq+0x130>
 8004a32:	e043      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8004b50 <HAL_RCC_GetSysClockFreq+0x208>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a56:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a5a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004b54 <HAL_RCC_GetSysClockFreq+0x20c>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004a76:	e046      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a33 	vldr	s13, [pc, #204]	; 8004b50 <HAL_RCC_GetSysClockFreq+0x208>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a9a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a9e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004b54 <HAL_RCC_GetSysClockFreq+0x20c>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004aba:	e024      	b.n	8004b06 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad4:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004adc:	ee07 3a90 	vmov	s15, r3
 8004ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ae4:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ae8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8004b54 <HAL_RCC_GetSysClockFreq+0x20c>
 8004aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b00:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8004b04:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0a:	0e1b      	lsrs	r3, r3, #24
 8004b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b10:	3301      	adds	r3, #1
 8004b12:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 3a90 	vmov	r3, s15
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	e001      	b.n	8004b36 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8004b32:	2300      	movs	r3, #0
 8004b34:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8004b36:	6a3b      	ldr	r3, [r7, #32]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	372c      	adds	r7, #44	; 0x2c
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	46020c00 	.word	0x46020c00
 8004b48:	0800f180 	.word	0x0800f180
 8004b4c:	00f42400 	.word	0x00f42400
 8004b50:	4b742400 	.word	0x4b742400
 8004b54:	46000000 	.word	0x46000000

08004b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004b5c:	f7ff fef4 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8004b60:	4602      	mov	r2, r0
 8004b62:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x28>)
 8004b64:	6a1b      	ldr	r3, [r3, #32]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	4906      	ldr	r1, [pc, #24]	; (8004b84 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004b6c:	5ccb      	ldrb	r3, [r1, r3]
 8004b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b72:	4a05      	ldr	r2, [pc, #20]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b74:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004b76:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b78:	681b      	ldr	r3, [r3, #0]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	46020c00 	.word	0x46020c00
 8004b84:	0800f168 	.word	0x0800f168
 8004b88:	20000010 	.word	0x20000010

08004b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004b90:	f7ff ffe2 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b94:	4602      	mov	r2, r0
 8004b96:	4b05      	ldr	r3, [pc, #20]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	4903      	ldr	r1, [pc, #12]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba2:	5ccb      	ldrb	r3, [r1, r3]
 8004ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	46020c00 	.word	0x46020c00
 8004bb0:	0800f178 	.word	0x0800f178

08004bb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004bb8:	f7ff ffce 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	0a1b      	lsrs	r3, r3, #8
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	4903      	ldr	r1, [pc, #12]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bca:	5ccb      	ldrb	r3, [r1, r3]
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	46020c00 	.word	0x46020c00
 8004bd8:	0800f178 	.word	0x0800f178

08004bdc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004be0:	f7ff ffba 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004be4:	4602      	mov	r2, r0
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <HAL_RCC_GetPCLK3Freq+0x20>)
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	4903      	ldr	r1, [pc, #12]	; (8004c00 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004bf2:	5ccb      	ldrb	r3, [r1, r3]
 8004bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	46020c00 	.word	0x46020c00
 8004c00:	0800f178 	.word	0x0800f178

08004c04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c0c:	4b3e      	ldr	r3, [pc, #248]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c12:	f003 0304 	and.w	r3, r3, #4
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c1a:	f7fe fd49 	bl	80036b0 <HAL_PWREx_GetVoltageRange>
 8004c1e:	6178      	str	r0, [r7, #20]
 8004c20:	e019      	b.n	8004c56 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c28:	4a37      	ldr	r2, [pc, #220]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c2a:	f043 0304 	orr.w	r3, r3, #4
 8004c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c32:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	60fb      	str	r3, [r7, #12]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c40:	f7fe fd36 	bl	80036b0 <HAL_PWREx_GetVoltageRange>
 8004c44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c46:	4b30      	ldr	r3, [pc, #192]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	4a2e      	ldr	r2, [pc, #184]	; (8004d08 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004c4e:	f023 0304 	bic.w	r3, r3, #4
 8004c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c5c:	d003      	beq.n	8004c66 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c64:	d109      	bne.n	8004c7a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6c:	d202      	bcs.n	8004c74 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004c6e:	2301      	movs	r3, #1
 8004c70:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c72:	e033      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004c74:	2300      	movs	r3, #0
 8004c76:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c78:	e030      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c80:	d208      	bcs.n	8004c94 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c88:	d102      	bne.n	8004c90 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	e025      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e035      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c9a:	d90f      	bls.n	8004cbc <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004ca8:	d902      	bls.n	8004cb0 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	e015      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	e012      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	e00f      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cc2:	d109      	bne.n	8004cd8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d102      	bne.n	8004cd2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004ccc:	2301      	movs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e004      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	e001      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004cd8:	2301      	movs	r3, #1
 8004cda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f023 020f 	bic.w	r2, r3, #15
 8004ce4:	4909      	ldr	r1, [pc, #36]	; (8004d0c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	693a      	ldr	r2, [r7, #16]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d001      	beq.n	8004cfe <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	46020c00 	.word	0x46020c00
 8004d0c:	40022000 	.word	0x40022000

08004d10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d14:	b0ba      	sub	sp, #232	; 0xe8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f002 0401 	and.w	r4, r2, #1
 8004d34:	2500      	movs	r5, #0
 8004d36:	ea54 0305 	orrs.w	r3, r4, r5
 8004d3a:	d00b      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004d3c:	4bcb      	ldr	r3, [pc, #812]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d42:	f023 0103 	bic.w	r1, r3, #3
 8004d46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4c:	4ac7      	ldr	r2, [pc, #796]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d4e:	430b      	orrs	r3, r1
 8004d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f002 0802 	and.w	r8, r2, #2
 8004d60:	f04f 0900 	mov.w	r9, #0
 8004d64:	ea58 0309 	orrs.w	r3, r8, r9
 8004d68:	d00b      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004d6a:	4bc0      	ldr	r3, [pc, #768]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d70:	f023 010c 	bic.w	r1, r3, #12
 8004d74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7a:	4abc      	ldr	r2, [pc, #752]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	f002 0a04 	and.w	sl, r2, #4
 8004d8e:	f04f 0b00 	mov.w	fp, #0
 8004d92:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d96:	d00b      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d98:	4bb4      	ldr	r3, [pc, #720]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d9e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	4ab0      	ldr	r2, [pc, #704]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004daa:	430b      	orrs	r3, r1
 8004dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004db0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db8:	f002 0308 	and.w	r3, r2, #8
 8004dbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dc6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	d00b      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004dd0:	4ba6      	ldr	r3, [pc, #664]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004dda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	4aa2      	ldr	r2, [pc, #648]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004de2:	430b      	orrs	r3, r1
 8004de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004de8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f002 0310 	and.w	r3, r2, #16
 8004df4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004df8:	2300      	movs	r3, #0
 8004dfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004dfe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e02:	460b      	mov	r3, r1
 8004e04:	4313      	orrs	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004e08:	4b98      	ldr	r3, [pc, #608]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e18:	4a94      	ldr	r2, [pc, #592]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e1a:	430b      	orrs	r3, r1
 8004e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e28:	f002 0320 	and.w	r3, r2, #32
 8004e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004e36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004e40:	4b8a      	ldr	r3, [pc, #552]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e46:	f023 0107 	bic.w	r1, r3, #7
 8004e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e50:	4a86      	ldr	r2, [pc, #536]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e52:	430b      	orrs	r3, r1
 8004e54:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e60:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4313      	orrs	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004e78:	4b7c      	ldr	r3, [pc, #496]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e7e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e88:	4a78      	ldr	r2, [pc, #480]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004e8a:	430b      	orrs	r3, r1
 8004e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ea6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4313      	orrs	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004eb0:	4b6e      	ldr	r3, [pc, #440]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ec0:	4a6a      	ldr	r2, [pc, #424]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ed8:	2300      	movs	r3, #0
 8004eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004ede:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	d00b      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004ee8:	4b60      	ldr	r3, [pc, #384]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ef2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef8:	4a5c      	ldr	r2, [pc, #368]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004efa:	430b      	orrs	r3, r1
 8004efc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f10:	2300      	movs	r3, #0
 8004f12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f16:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004f20:	4b52      	ldr	r3, [pc, #328]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f26:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f32:	430b      	orrs	r3, r1
 8004f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f40:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004f44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f4e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004f52:	460b      	mov	r3, r1
 8004f54:	4313      	orrs	r3, r2
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004f58:	4b44      	ldr	r3, [pc, #272]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f5e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f68:	4a40      	ldr	r2, [pc, #256]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f6a:	430b      	orrs	r3, r1
 8004f6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004f86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	d00b      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004f90:	4b36      	ldr	r3, [pc, #216]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f96:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004f9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fa0:	4a32      	ldr	r2, [pc, #200]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fbe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	d00c      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004fc8:	4b28      	ldr	r3, [pc, #160]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fda:	4a24      	ldr	r2, [pc, #144]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ff4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	d04f      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	2b80      	cmp	r3, #128	; 0x80
 8005008:	d02d      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d827      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800500e:	2b60      	cmp	r3, #96	; 0x60
 8005010:	d02e      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005012:	2b60      	cmp	r3, #96	; 0x60
 8005014:	d823      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005016:	2b40      	cmp	r3, #64	; 0x40
 8005018:	d006      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d81f      	bhi.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005022:	2b20      	cmp	r3, #32
 8005024:	d011      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005026:	e01a      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005028:	4b10      	ldr	r3, [pc, #64]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	4a0f      	ldr	r2, [pc, #60]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800502e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005032:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005034:	e01d      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800503a:	3308      	adds	r3, #8
 800503c:	4618      	mov	r0, r3
 800503e:	f002 fa41 	bl	80074c4 <RCCEx_PLL2_Config>
 8005042:	4603      	mov	r3, r0
 8005044:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005048:	e013      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800504a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800504e:	332c      	adds	r3, #44	; 0x2c
 8005050:	4618      	mov	r0, r3
 8005052:	f002 facf 	bl	80075f4 <RCCEx_PLL3_Config>
 8005056:	4603      	mov	r3, r0
 8005058:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800505c:	e009      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005064:	e005      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005066:	bf00      	nop
 8005068:	e003      	b.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800506a:	bf00      	nop
 800506c:	46020c00 	.word	0x46020c00
        break;
 8005070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005072:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800507a:	4bb6      	ldr	r3, [pc, #728]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800507c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005080:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005084:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	4ab1      	ldr	r2, [pc, #708]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800508e:	430b      	orrs	r3, r1
 8005090:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005094:	e003      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005096:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800509a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800509e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80050aa:	673b      	str	r3, [r7, #112]	; 0x70
 80050ac:	2300      	movs	r3, #0
 80050ae:	677b      	str	r3, [r7, #116]	; 0x74
 80050b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80050b4:	460b      	mov	r3, r1
 80050b6:	4313      	orrs	r3, r2
 80050b8:	d053      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80050ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c6:	d033      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80050c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050cc:	d82c      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80050ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d2:	d02f      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80050d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d8:	d826      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80050da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050de:	d008      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80050e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e4:	d820      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80050ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ee:	d011      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80050f0:	e01a      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050f2:	4b98      	ldr	r3, [pc, #608]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	4a97      	ldr	r2, [pc, #604]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80050fe:	e01a      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005100:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005104:	3308      	adds	r3, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f002 f9dc 	bl	80074c4 <RCCEx_PLL2_Config>
 800510c:	4603      	mov	r3, r0
 800510e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005112:	e010      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005118:	332c      	adds	r3, #44	; 0x2c
 800511a:	4618      	mov	r0, r3
 800511c:	f002 fa6a 	bl	80075f4 <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005126:	e006      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800512e:	e002      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005130:	bf00      	nop
 8005132:	e000      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005136:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800513e:	4b85      	ldr	r3, [pc, #532]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005144:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005148:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800514c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005150:	4a80      	ldr	r2, [pc, #512]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005152:	430b      	orrs	r3, r1
 8005154:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005158:	e003      	b.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800515a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800515e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005162:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800516e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005170:	2300      	movs	r3, #0
 8005172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005174:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005178:	460b      	mov	r3, r1
 800517a:	4313      	orrs	r3, r2
 800517c:	d046      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800517e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005186:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800518a:	d028      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800518c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005190:	d821      	bhi.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005192:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005196:	d022      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519c:	d81b      	bhi.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800519e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051a2:	d01c      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80051a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051a8:	d815      	bhi.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80051aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ae:	d008      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	d80f      	bhi.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d011      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80051ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051be:	d00e      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80051c0:	e009      	b.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051c6:	3308      	adds	r3, #8
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 f97b 	bl	80074c4 <RCCEx_PLL2_Config>
 80051ce:	4603      	mov	r3, r0
 80051d0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80051d4:	e004      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80051dc:	e000      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80051de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051e0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10d      	bne.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80051e8:	4b5a      	ldr	r3, [pc, #360]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ee:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80051f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80051f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80051fa:	4a56      	ldr	r2, [pc, #344]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80051fc:	430b      	orrs	r3, r1
 80051fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005202:	e003      	b.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005204:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005208:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800520c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005218:	663b      	str	r3, [r7, #96]	; 0x60
 800521a:	2300      	movs	r3, #0
 800521c:	667b      	str	r3, [r7, #100]	; 0x64
 800521e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d03f      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005228:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	2b04      	cmp	r3, #4
 8005232:	d81e      	bhi.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005234:	a201      	add	r2, pc, #4	; (adr r2, 800523c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523a:	bf00      	nop
 800523c:	0800527b 	.word	0x0800527b
 8005240:	08005251 	.word	0x08005251
 8005244:	0800525f 	.word	0x0800525f
 8005248:	0800527b 	.word	0x0800527b
 800524c:	0800527b 	.word	0x0800527b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005250:	4b40      	ldr	r3, [pc, #256]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	4a3f      	ldr	r2, [pc, #252]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800525a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800525c:	e00e      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800525e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005262:	332c      	adds	r3, #44	; 0x2c
 8005264:	4618      	mov	r0, r3
 8005266:	f002 f9c5 	bl	80075f4 <RCCEx_PLL3_Config>
 800526a:	4603      	mov	r3, r0
 800526c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005270:	e004      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005278:	e000      	b.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800527a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800527c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10d      	bne.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005284:	4b33      	ldr	r3, [pc, #204]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005286:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800528a:	f023 0107 	bic.w	r1, r3, #7
 800528e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005296:	4a2f      	ldr	r2, [pc, #188]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005298:	430b      	orrs	r3, r1
 800529a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800529e:	e003      	b.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80052a4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80052a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b0:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80052b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80052b6:	2300      	movs	r3, #0
 80052b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80052be:	460b      	mov	r3, r1
 80052c0:	4313      	orrs	r3, r2
 80052c2:	d04d      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80052c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052d0:	d028      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80052d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052d6:	d821      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80052d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052dc:	d024      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80052de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80052e2:	d81b      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80052e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052e8:	d00e      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80052ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052ee:	d815      	bhi.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01b      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80052f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f8:	d110      	bne.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052fa:	4b16      	ldr	r3, [pc, #88]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	4a15      	ldr	r2, [pc, #84]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005304:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005306:	e012      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005308:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800530c:	332c      	adds	r3, #44	; 0x2c
 800530e:	4618      	mov	r0, r3
 8005310:	f002 f970 	bl	80075f4 <RCCEx_PLL3_Config>
 8005314:	4603      	mov	r3, r0
 8005316:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800531a:	e008      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005322:	e004      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005324:	bf00      	nop
 8005326:	e002      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005328:	bf00      	nop
 800532a:	e000      	b.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800532c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800532e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d110      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005336:	4b07      	ldr	r3, [pc, #28]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800533c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005348:	4a02      	ldr	r2, [pc, #8]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800534a:	430b      	orrs	r3, r1
 800534c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005350:	e006      	b.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005352:	bf00      	nop
 8005354:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005358:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800535c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005360:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800536c:	653b      	str	r3, [r7, #80]	; 0x50
 800536e:	2300      	movs	r3, #0
 8005370:	657b      	str	r3, [r7, #84]	; 0x54
 8005372:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005376:	460b      	mov	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	f000 80b5 	beq.w	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800537e:	2300      	movs	r3, #0
 8005380:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005384:	4b9d      	ldr	r3, [pc, #628]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005386:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800538a:	f003 0304 	and.w	r3, r3, #4
 800538e:	2b00      	cmp	r3, #0
 8005390:	d113      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005392:	4b9a      	ldr	r3, [pc, #616]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005398:	4a98      	ldr	r2, [pc, #608]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053a2:	4b96      	ldr	r3, [pc, #600]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80053b4:	2301      	movs	r3, #1
 80053b6:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80053ba:	4b91      	ldr	r3, [pc, #580]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	4a90      	ldr	r2, [pc, #576]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053c6:	f7fc ff39 	bl	800223c <HAL_GetTick>
 80053ca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053ce:	e00b      	b.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d0:	f7fc ff34 	bl	800223c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d903      	bls.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80053e6:	e005      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053e8:	4b85      	ldr	r3, [pc, #532]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d0ed      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80053f4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d165      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053fc:	4b7f      	ldr	r3, [pc, #508]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80053fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800540e:	2b00      	cmp	r3, #0
 8005410:	d023      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005416:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800541a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541e:	4293      	cmp	r3, r2
 8005420:	d01b      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005422:	4b76      	ldr	r3, [pc, #472]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005430:	4b72      	ldr	r3, [pc, #456]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005436:	4a71      	ldr	r2, [pc, #452]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800543c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005440:	4b6e      	ldr	r3, [pc, #440]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005446:	4a6d      	ldr	r2, [pc, #436]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800544c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005450:	4a6a      	ldr	r2, [pc, #424]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005456:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d019      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fc fee9 	bl	800223c <HAL_GetTick>
 800546a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800546e:	e00d      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005470:	f7fc fee4 	bl	800223c <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800548a:	e006      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800548c:	4b5b      	ldr	r3, [pc, #364]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800548e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d0ea      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800549a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80054a2:	4b56      	ldr	r3, [pc, #344]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80054b4:	4a51      	ldr	r2, [pc, #324]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054b6:	430b      	orrs	r3, r1
 80054b8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80054be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054c2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80054c6:	e003      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80054cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054d0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d107      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054d8:	4b48      	ldr	r3, [pc, #288]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054de:	4a47      	ldr	r2, [pc, #284]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80054e0:	f023 0304 	bic.w	r3, r3, #4
 80054e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80054e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80054f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80054f6:	2300      	movs	r3, #0
 80054f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80054fe:	460b      	mov	r3, r1
 8005500:	4313      	orrs	r3, r2
 8005502:	d042      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005508:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800550c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005510:	d022      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005512:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005516:	d81b      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800551c:	d011      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x832>
 800551e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005522:	d815      	bhi.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d019      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800552c:	d110      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800552e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005532:	3308      	adds	r3, #8
 8005534:	4618      	mov	r0, r3
 8005536:	f001 ffc5 	bl	80074c4 <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005540:	e00d      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005542:	4b2e      	ldr	r3, [pc, #184]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005546:	4a2d      	ldr	r2, [pc, #180]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800554c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800554e:	e006      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005556:	e002      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005558:	bf00      	nop
 800555a:	e000      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800555c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800555e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005566:	4b25      	ldr	r3, [pc, #148]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800556c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005574:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800557a:	430b      	orrs	r3, r1
 800557c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005580:	e003      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005582:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005586:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800558a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800558e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005592:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005596:	643b      	str	r3, [r7, #64]	; 0x40
 8005598:	2300      	movs	r3, #0
 800559a:	647b      	str	r3, [r7, #68]	; 0x44
 800559c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80055a0:	460b      	mov	r3, r1
 80055a2:	4313      	orrs	r3, r2
 80055a4:	d032      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80055a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b2:	d00b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b8:	d804      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80055be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c2:	d007      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80055d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80055d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d112      	bne.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80055de:	4b07      	ldr	r3, [pc, #28]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80055e4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f0:	4a02      	ldr	r2, [pc, #8]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80055f2:	430b      	orrs	r3, r1
 80055f4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80055f8:	e008      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80055fa:	bf00      	nop
 80055fc:	46020c00 	.word	0x46020c00
 8005600:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005604:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005608:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800560c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005618:	63bb      	str	r3, [r7, #56]	; 0x38
 800561a:	2300      	movs	r3, #0
 800561c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005622:	460b      	mov	r3, r1
 8005624:	4313      	orrs	r3, r2
 8005626:	d00c      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005628:	4b98      	ldr	r3, [pc, #608]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800562a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800562e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800563a:	4a94      	ldr	r2, [pc, #592]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800563c:	430b      	orrs	r3, r1
 800563e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800564a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800564e:	633b      	str	r3, [r7, #48]	; 0x30
 8005650:	2300      	movs	r3, #0
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
 8005654:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005658:	460b      	mov	r3, r1
 800565a:	4313      	orrs	r3, r2
 800565c:	d019      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800565e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005662:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800566a:	d105      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800566c:	4b87      	ldr	r3, [pc, #540]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800566e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005670:	4a86      	ldr	r2, [pc, #536]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005676:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005678:	4b84      	ldr	r3, [pc, #528]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800567a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800567e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005686:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800568a:	4a80      	ldr	r2, [pc, #512]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800568c:	430b      	orrs	r3, r1
 800568e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800569e:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a0:	2300      	movs	r3, #0
 80056a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80056a8:	460b      	mov	r3, r1
 80056aa:	4313      	orrs	r3, r2
 80056ac:	d00c      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80056ae:	4b77      	ldr	r3, [pc, #476]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80056c0:	4972      	ldr	r1, [pc, #456]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80056c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	2300      	movs	r3, #0
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
 80056da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80056de:	460b      	mov	r3, r1
 80056e0:	4313      	orrs	r3, r2
 80056e2:	d00c      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80056e4:	4b69      	ldr	r3, [pc, #420]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80056f6:	4965      	ldr	r1, [pc, #404]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800570a:	61bb      	str	r3, [r7, #24]
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
 8005710:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005714:	460b      	mov	r3, r1
 8005716:	4313      	orrs	r3, r2
 8005718:	d00c      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800571a:	4b5c      	ldr	r3, [pc, #368]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800571c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005720:	f023 0218 	bic.w	r2, r3, #24
 8005724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005728:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800572c:	4957      	ldr	r1, [pc, #348]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005740:	613b      	str	r3, [r7, #16]
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d032      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005750:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005754:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800575c:	d105      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575e:	4b4b      	ldr	r3, [pc, #300]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005762:	4a4a      	ldr	r2, [pc, #296]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005768:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800576a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800576e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005772:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005776:	d108      	bne.n	800578a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005778:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800577c:	3308      	adds	r3, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f001 fea0 	bl	80074c4 <RCCEx_PLL2_Config>
 8005784:	4603      	mov	r3, r0
 8005786:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800578a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d10d      	bne.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005792:	4b3e      	ldr	r3, [pc, #248]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005794:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005798:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800579c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057a4:	4939      	ldr	r1, [pc, #228]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80057ac:	e003      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ae:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057b2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80057b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057be:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80057c2:	60bb      	str	r3, [r7, #8]
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80057cc:	460b      	mov	r3, r1
 80057ce:	4313      	orrs	r3, r2
 80057d0:	d03a      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057de:	d00e      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80057e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057e4:	d815      	bhi.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d017      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80057ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80057ee:	d110      	bne.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057f0:	4b26      	ldr	r3, [pc, #152]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	4a25      	ldr	r2, [pc, #148]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80057f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057fa:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80057fc:	e00e      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005802:	3308      	adds	r3, #8
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fe5d 	bl	80074c4 <RCCEx_PLL2_Config>
 800580a:	4603      	mov	r3, r0
 800580c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005810:	e004      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005818:	e000      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800581a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800581c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10d      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005824:	4b19      	ldr	r3, [pc, #100]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800582a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800582e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005836:	4915      	ldr	r1, [pc, #84]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800583e:	e003      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005844:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d00c      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005864:	4b09      	ldr	r3, [pc, #36]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005866:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800586a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005872:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005876:	4905      	ldr	r1, [pc, #20]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800587e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005882:	4618      	mov	r0, r3
 8005884:	37e8      	adds	r7, #232	; 0xe8
 8005886:	46bd      	mov	sp, r7
 8005888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800588c:	46020c00 	.word	0x46020c00

08005890 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005898:	4bad      	ldr	r3, [pc, #692]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a0:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80058a2:	4bab      	ldr	r3, [pc, #684]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80058ac:	4ba8      	ldr	r3, [pc, #672]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b0:	0a1b      	lsrs	r3, r3, #8
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3301      	adds	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80058ba:	4ba5      	ldr	r3, [pc, #660]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80058c6:	4ba2      	ldr	r3, [pc, #648]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	fb02 f303 	mul.w	r3, r2, r3
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058de:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	f000 8123 	beq.w	8005b30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d062      	beq.n	80059b6 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	f200 8081 	bhi.w	80059fa <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d024      	beq.n	8005948 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d17a      	bne.n	80059fa <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005b54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b8e      	ldr	r3, [pc, #568]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005926:	ed97 6a02 	vldr	s12, [r7, #8]
 800592a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005946:	e08f      	b.n	8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005948:	4b81      	ldr	r3, [pc, #516]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d005      	beq.n	8005960 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8005954:	4b7e      	ldr	r3, [pc, #504]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	0f1b      	lsrs	r3, r3, #28
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	e006      	b.n	800596e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8005960:	4b7b      	ldr	r3, [pc, #492]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005962:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005966:	041b      	lsls	r3, r3, #16
 8005968:	0f1b      	lsrs	r3, r3, #28
 800596a:	f003 030f 	and.w	r3, r3, #15
 800596e:	4a7b      	ldr	r2, [pc, #492]	; (8005b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8005970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005974:	ee07 3a90 	vmov	s15, r3
 8005978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	ee07 3a90 	vmov	s15, r3
 8005990:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005994:	ed97 6a02 	vldr	s12, [r7, #8]
 8005998:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800599c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059b4:	e058      	b.n	8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	ee07 3a90 	vmov	s15, r3
 80059bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c0:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005b54 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80059c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c8:	4b61      	ldr	r3, [pc, #388]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d0:	ee07 3a90 	vmov	s15, r3
 80059d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80059dc:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80059e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80059e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80059f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059f8:	e036      	b.n	8005a68 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80059fa:	4b55      	ldr	r3, [pc, #340]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 8005a06:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	0f1b      	lsrs	r3, r3, #28
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	e006      	b.n	8005a20 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8005a12:	4b4f      	ldr	r3, [pc, #316]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a18:	041b      	lsls	r3, r3, #16
 8005a1a:	0f1b      	lsrs	r3, r3, #28
 8005a1c:	f003 030f 	and.w	r3, r3, #15
 8005a20:	4a4e      	ldr	r2, [pc, #312]	; (8005b5c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8005a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a26:	ee07 3a90 	vmov	s15, r3
 8005a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	ee07 3a90 	vmov	s15, r3
 8005a34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	ee07 3a90 	vmov	s15, r3
 8005a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a4a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a66:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005a68:	4b39      	ldr	r3, [pc, #228]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d017      	beq.n	8005aa4 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	0a5b      	lsrs	r3, r3, #9
 8005a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9a:	ee17 2a90 	vmov	r2, s15
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e002      	b.n	8005aaa <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005aaa:	4b29      	ldr	r3, [pc, #164]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d017      	beq.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ab6:	4b26      	ldr	r3, [pc, #152]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aba:	0c1b      	lsrs	r3, r3, #16
 8005abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005ac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005acc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ad0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005adc:	ee17 2a90 	vmov	r2, s15
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	605a      	str	r2, [r3, #4]
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005aec:	4b18      	ldr	r3, [pc, #96]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d017      	beq.n	8005b28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005af8:	4b15      	ldr	r3, [pc, #84]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b1e:	ee17 2a90 	vmov	r2, s15
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b26:	e00c      	b.n	8005b42 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]
}
 8005b2e:	e008      	b.n	8005b42 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	609a      	str	r2, [r3, #8]
}
 8005b42:	bf00      	nop
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	46020c00 	.word	0x46020c00
 8005b54:	4b742400 	.word	0x4b742400
 8005b58:	46000000 	.word	0x46000000
 8005b5c:	0800f180 	.word	0x0800f180

08005b60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b089      	sub	sp, #36	; 0x24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005b68:	4bad      	ldr	r3, [pc, #692]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b70:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005b72:	4bab      	ldr	r3, [pc, #684]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005b7c:	4ba8      	ldr	r3, [pc, #672]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	0a1b      	lsrs	r3, r3, #8
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	3301      	adds	r3, #1
 8005b88:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005b8a:	4ba5      	ldr	r3, [pc, #660]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005b96:	4ba2      	ldr	r3, [pc, #648]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9a:	08db      	lsrs	r3, r3, #3
 8005b9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	ee07 3a90 	vmov	s15, r3
 8005baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8123 	beq.w	8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d062      	beq.n	8005c86 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	f200 8081 	bhi.w	8005cca <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d024      	beq.n	8005c18 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d17a      	bne.n	8005cca <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bde:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005be6:	4b8e      	ldr	r3, [pc, #568]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bee:	ee07 3a90 	vmov	s15, r3
 8005bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bfa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c16:	e08f      	b.n	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005c18:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8005c24:	4b7e      	ldr	r3, [pc, #504]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	0f1b      	lsrs	r3, r3, #28
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	e006      	b.n	8005c3e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8005c30:	4b7b      	ldr	r3, [pc, #492]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c36:	041b      	lsls	r3, r3, #16
 8005c38:	0f1b      	lsrs	r3, r3, #28
 8005c3a:	f003 030f 	and.w	r3, r3, #15
 8005c3e:	4a7b      	ldr	r2, [pc, #492]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8005c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c44:	ee07 3a90 	vmov	s15, r3
 8005c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	ee07 3a90 	vmov	s15, r3
 8005c60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c64:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c68:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005c6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c84:	e058      	b.n	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	ee07 3a90 	vmov	s15, r3
 8005c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c90:	eddf 6a64 	vldr	s13, [pc, #400]	; 8005e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8005c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c98:	4b61      	ldr	r3, [pc, #388]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	ee07 3a90 	vmov	s15, r3
 8005ca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ca8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cac:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005cb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cc8:	e036      	b.n	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005cca:	4b55      	ldr	r3, [pc, #340]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8005cd6:	4b52      	ldr	r3, [pc, #328]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	0f1b      	lsrs	r3, r3, #28
 8005cdc:	f003 030f 	and.w	r3, r3, #15
 8005ce0:	e006      	b.n	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8005ce2:	4b4f      	ldr	r3, [pc, #316]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ce8:	041b      	lsls	r3, r3, #16
 8005cea:	0f1b      	lsrs	r3, r3, #28
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	4a4e      	ldr	r2, [pc, #312]	; (8005e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8005cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d1a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d36:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005d38:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d017      	beq.n	8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d44:	4b36      	ldr	r3, [pc, #216]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d48:	0a5b      	lsrs	r3, r3, #9
 8005d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d6a:	ee17 2a90 	vmov	r2, s15
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	e002      	b.n	8005d7a <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005d7a:	4b29      	ldr	r3, [pc, #164]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005d86:	4b26      	ldr	r3, [pc, #152]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	0c1b      	lsrs	r3, r3, #16
 8005d8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d9c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005da0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dac:	ee17 2a90 	vmov	r2, s15
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	605a      	str	r2, [r3, #4]
 8005db4:	e002      	b.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005dbc:	4b18      	ldr	r3, [pc, #96]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d017      	beq.n	8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005dc8:	4b15      	ldr	r3, [pc, #84]	; (8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8005dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dcc:	0e1b      	lsrs	r3, r3, #24
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	ee07 3a90 	vmov	s15, r3
 8005dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dde:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dee:	ee17 2a90 	vmov	r2, s15
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005df6:	e00c      	b.n	8005e12 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	609a      	str	r2, [r3, #8]
}
 8005dfe:	e008      	b.n	8005e12 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	609a      	str	r2, [r3, #8]
}
 8005e12:	bf00      	nop
 8005e14:	3724      	adds	r7, #36	; 0x24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	46020c00 	.word	0x46020c00
 8005e24:	4b742400 	.word	0x4b742400
 8005e28:	46000000 	.word	0x46000000
 8005e2c:	0800f180 	.word	0x0800f180

08005e30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b089      	sub	sp, #36	; 0x24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005e38:	4bad      	ldr	r3, [pc, #692]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e40:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005e42:	4bab      	ldr	r3, [pc, #684]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005e4c:	4ba8      	ldr	r3, [pc, #672]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	3301      	adds	r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005e5a:	4ba5      	ldr	r3, [pc, #660]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	091b      	lsrs	r3, r3, #4
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005e66:	4ba2      	ldr	r3, [pc, #648]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e6a:	08db      	lsrs	r3, r3, #3
 8005e6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	fb02 f303 	mul.w	r3, r2, r3
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8123 	beq.w	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d062      	beq.n	8005f56 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	f200 8081 	bhi.w	8005f9a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d024      	beq.n	8005ee8 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d17a      	bne.n	8005f9a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	eddf 6a91 	vldr	s13, [pc, #580]	; 80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b8e      	ldr	r3, [pc, #568]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eca:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8005ee6:	e08f      	b.n	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ee8:	4b81      	ldr	r3, [pc, #516]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8005ef4:	4b7e      	ldr	r3, [pc, #504]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	0f1b      	lsrs	r3, r3, #28
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	e006      	b.n	8005f0e <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8005f00:	4b7b      	ldr	r3, [pc, #492]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	0f1b      	lsrs	r3, r3, #28
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	4a7b      	ldr	r2, [pc, #492]	; (80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8005f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f14:	ee07 3a90 	vmov	s15, r3
 8005f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	ee07 3a90 	vmov	s15, r3
 8005f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f34:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f38:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005f3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f48:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f54:	e058      	b.n	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	ee07 3a90 	vmov	s15, r3
 8005f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f60:	eddf 6a64 	vldr	s13, [pc, #400]	; 80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8005f64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f68:	4b61      	ldr	r3, [pc, #388]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f78:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f7c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005f80:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f98:	e036      	b.n	8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005f9a:	4b55      	ldr	r3, [pc, #340]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8005fa6:	4b52      	ldr	r3, [pc, #328]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	0f1b      	lsrs	r3, r3, #28
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	e006      	b.n	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8005fb2:	4b4f      	ldr	r3, [pc, #316]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8005fb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fb8:	041b      	lsls	r3, r3, #16
 8005fba:	0f1b      	lsrs	r3, r3, #28
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8005fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	ee07 3a90 	vmov	s15, r3
 8005fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fea:	eddf 5a43 	vldr	s11, [pc, #268]	; 80060f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006008:	4b39      	ldr	r3, [pc, #228]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800600a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d017      	beq.n	8006044 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006014:	4b36      	ldr	r3, [pc, #216]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006018:	0a5b      	lsrs	r3, r3, #9
 800601a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800602a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800602e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603a:	ee17 2a90 	vmov	r2, s15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	e002      	b.n	800604a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800604a:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800604c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d017      	beq.n	8006086 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006056:	4b26      	ldr	r3, [pc, #152]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605a:	0c1b      	lsrs	r3, r3, #16
 800605c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800606c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006070:	edd7 6a07 	vldr	s13, [r7, #28]
 8006074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607c:	ee17 2a90 	vmov	r2, s15
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
 8006084:	e002      	b.n	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800608c:	4b18      	ldr	r3, [pc, #96]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006098:	4b15      	ldr	r3, [pc, #84]	; (80060f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800609a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609c:	0e1b      	lsrs	r3, r3, #24
 800609e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80060aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80060b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060be:	ee17 2a90 	vmov	r2, s15
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80060c6:	e00c      	b.n	80060e2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	609a      	str	r2, [r3, #8]
}
 80060ce:	e008      	b.n	80060e2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	609a      	str	r2, [r3, #8]
}
 80060e2:	bf00      	nop
 80060e4:	3724      	adds	r7, #36	; 0x24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	46020c00 	.word	0x46020c00
 80060f4:	4b742400 	.word	0x4b742400
 80060f8:	46000000 	.word	0x46000000
 80060fc:	0800f180 	.word	0x0800f180

08006100 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b08e      	sub	sp, #56	; 0x38
 8006104:	af00      	add	r7, sp, #0
 8006106:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800610a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800610e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006112:	430b      	orrs	r3, r1
 8006114:	d145      	bne.n	80061a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006116:	4ba7      	ldr	r3, [pc, #668]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800611c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006120:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006122:	4ba4      	ldr	r3, [pc, #656]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b02      	cmp	r3, #2
 800612e:	d108      	bne.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006136:	d104      	bne.n	8006142 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006138:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
 800613e:	f001 b9b3 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006142:	4b9c      	ldr	r3, [pc, #624]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006144:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800614c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006150:	d114      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d110      	bne.n	800617c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800615a:	4b96      	ldr	r3, [pc, #600]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800615c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006168:	d103      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800616a:	23fa      	movs	r3, #250	; 0xfa
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800616e:	f001 b99b 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006172:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006176:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006178:	f001 b996 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800617c:	4b8d      	ldr	r3, [pc, #564]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006188:	d107      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006190:	d103      	bne.n	800619a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006192:	4b89      	ldr	r3, [pc, #548]	; (80063b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006194:	637b      	str	r3, [r7, #52]	; 0x34
 8006196:	f001 b987 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800619a:	2300      	movs	r3, #0
 800619c:	637b      	str	r3, [r7, #52]	; 0x34
 800619e:	f001 b983 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061a6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80061aa:	430b      	orrs	r3, r1
 80061ac:	d151      	bne.n	8006252 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80061ae:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80061b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061b4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80061b8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80061ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d035      	beq.n	800622c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80061c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c2:	2b80      	cmp	r3, #128	; 0x80
 80061c4:	d841      	bhi.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c8:	2b60      	cmp	r3, #96	; 0x60
 80061ca:	d02a      	beq.n	8006222 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2b60      	cmp	r3, #96	; 0x60
 80061d0:	d83b      	bhi.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d009      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d835      	bhi.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80061de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d012      	beq.n	8006210 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80061ea:	e02e      	b.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80061ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fb4d 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061fa:	f001 b955 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061fe:	f107 0318 	add.w	r3, r7, #24
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fcac 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800620c:	f001 b94c 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006210:	f107 030c 	add.w	r3, r7, #12
 8006214:	4618      	mov	r0, r3
 8006216:	f7ff fe0b 	bl	8005e30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800621e:	f001 b943 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006222:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006228:	f001 b93e 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800622c:	4b61      	ldr	r3, [pc, #388]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006238:	d103      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800623a:	4b60      	ldr	r3, [pc, #384]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800623e:	f001 b933 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006246:	f001 b92f 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800624e:	f001 b92b 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006252:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006256:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800625a:	430b      	orrs	r3, r1
 800625c:	d158      	bne.n	8006310 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800625e:	4b55      	ldr	r3, [pc, #340]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006260:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006264:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006268:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d03b      	beq.n	80062ea <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006278:	d846      	bhi.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006280:	d02e      	beq.n	80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006288:	d83e      	bhi.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006290:	d00b      	beq.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006298:	d836      	bhi.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00d      	beq.n	80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	d012      	beq.n	80062ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80062a8:	e02e      	b.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7ff faee 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062b8:	f001 b8f6 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062bc:	f107 0318 	add.w	r3, r7, #24
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fc4d 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062ca:	f001 b8ed 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fdac 	bl	8005e30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062dc:	f001 b8e4 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80062e0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80062e6:	f001 b8df 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80062ea:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f6:	d103      	bne.n	8006300 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80062f8:	4b30      	ldr	r3, [pc, #192]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80062fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80062fc:	f001 b8d4 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006304:	f001 b8d0 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800630c:	f001 b8cc 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006314:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006318:	430b      	orrs	r3, r1
 800631a:	d126      	bne.n	800636a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800631c:	4b25      	ldr	r3, [pc, #148]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800631e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006326:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006328:	4b22      	ldr	r3, [pc, #136]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006334:	d106      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	2b00      	cmp	r3, #0
 800633a:	d103      	bne.n	8006344 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800633c:	4b1f      	ldr	r3, [pc, #124]	; (80063bc <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800633e:	637b      	str	r3, [r7, #52]	; 0x34
 8006340:	f001 b8b2 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006344:	4b1b      	ldr	r3, [pc, #108]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800634c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006350:	d107      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006358:	d103      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800635a:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800635c:	637b      	str	r3, [r7, #52]	; 0x34
 800635e:	f001 b8a3 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	637b      	str	r3, [r7, #52]	; 0x34
 8006366:	f001 b89f 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800636a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800636e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006372:	430b      	orrs	r3, r1
 8006374:	d16e      	bne.n	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006376:	4b0f      	ldr	r3, [pc, #60]	; (80063b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800637c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006380:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006384:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006388:	d03d      	beq.n	8006406 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006390:	d85c      	bhi.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006394:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006398:	d014      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800639a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800639c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063a0:	d854      	bhi.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80063a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01f      	beq.n	80063e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80063a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ae:	d012      	beq.n	80063d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80063b0:	e04c      	b.n	800644c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80063b2:	bf00      	nop
 80063b4:	46020c00 	.word	0x46020c00
 80063b8:	0007a120 	.word	0x0007a120
 80063bc:	00f42400 	.word	0x00f42400
 80063c0:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80063c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7ff fa61 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063d2:	f001 b869 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063d6:	f107 0318 	add.w	r3, r7, #24
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fbc0 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80063e4:	f001 b860 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80063e8:	4ba7      	ldr	r3, [pc, #668]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f4:	d103      	bne.n	80063fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80063f6:	4ba5      	ldr	r3, [pc, #660]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80063fa:	f001 b855 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80063fe:	2300      	movs	r3, #0
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006402:	f001 b851 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006406:	4ba0      	ldr	r3, [pc, #640]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0320 	and.w	r3, r3, #32
 800640e:	2b20      	cmp	r3, #32
 8006410:	d118      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006412:	4b9d      	ldr	r3, [pc, #628]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d005      	beq.n	800642a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800641e:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 030f 	and.w	r3, r3, #15
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800642a:	4b97      	ldr	r3, [pc, #604]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800642c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006430:	041b      	lsls	r3, r3, #16
 8006432:	0e1b      	lsrs	r3, r3, #24
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	4a95      	ldr	r2, [pc, #596]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800643a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006440:	f001 b832 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006444:	2300      	movs	r3, #0
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006448:	f001 b82e 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006450:	f001 b82a 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006458:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800645c:	430b      	orrs	r3, r1
 800645e:	d17f      	bne.n	8006560 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006460:	4b89      	ldr	r3, [pc, #548]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006462:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800646a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800646c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646e:	2b00      	cmp	r3, #0
 8006470:	d165      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006472:	4b85      	ldr	r3, [pc, #532]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006478:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800647c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006484:	d034      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800648c:	d853      	bhi.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006494:	d00b      	beq.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800649c:	d84b      	bhi.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d016      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064aa:	d009      	beq.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80064ac:	e043      	b.n	8006536 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7ff f9ec 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80064bc:	f000 bff4 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064c0:	f107 0318 	add.w	r3, r7, #24
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fb4b 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80064ce:	f000 bfeb 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80064d2:	4b6d      	ldr	r3, [pc, #436]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d103      	bne.n	80064e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80064e0:	4b6a      	ldr	r3, [pc, #424]	; (800668c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80064e4:	f000 bfe0 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80064e8:	2300      	movs	r3, #0
 80064ea:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80064ec:	f000 bfdc 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80064f0:	4b65      	ldr	r3, [pc, #404]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0320 	and.w	r3, r3, #32
 80064f8:	2b20      	cmp	r3, #32
 80064fa:	d118      	bne.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80064fc:	4b62      	ldr	r3, [pc, #392]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006508:	4b5f      	ldr	r3, [pc, #380]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	0e1b      	lsrs	r3, r3, #24
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	e006      	b.n	8006522 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006514:	4b5c      	ldr	r3, [pc, #368]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006516:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	4a5b      	ldr	r2, [pc, #364]	; (8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006528:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800652a:	f000 bfbd 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006532:	f000 bfb9 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800653a:	f000 bfb5 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006544:	d108      	bne.n	8006558 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f9a0 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
 8006554:	f000 bfa8 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	637b      	str	r3, [r7, #52]	; 0x34
 800655c:	f000 bfa4 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006564:	1e51      	subs	r1, r2, #1
 8006566:	430b      	orrs	r3, r1
 8006568:	d136      	bne.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800656a:	4b47      	ldr	r3, [pc, #284]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800656c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800657c:	f7fe fb1a 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 8006580:	6378      	str	r0, [r7, #52]	; 0x34
 8006582:	f000 bf91 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2b01      	cmp	r3, #1
 800658a:	d104      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800658c:	f7fe f9dc 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006590:	6378      	str	r0, [r7, #52]	; 0x34
 8006592:	f000 bf89 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006596:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a2:	d106      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d103      	bne.n	80065b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80065aa:	4b3a      	ldr	r3, [pc, #232]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80065ac:	637b      	str	r3, [r7, #52]	; 0x34
 80065ae:	f000 bf7b 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80065b2:	4b35      	ldr	r3, [pc, #212]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d107      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d104      	bne.n	80065d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80065c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ca:	637b      	str	r3, [r7, #52]	; 0x34
 80065cc:	f000 bf6c 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	637b      	str	r3, [r7, #52]	; 0x34
 80065d4:	f000 bf68 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80065d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065dc:	1e91      	subs	r1, r2, #2
 80065de:	430b      	orrs	r3, r1
 80065e0:	d136      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80065e2:	4b29      	ldr	r3, [pc, #164]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80065e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065e8:	f003 030c 	and.w	r3, r3, #12
 80065ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80065f4:	f7fe faca 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80065f8:	6378      	str	r0, [r7, #52]	; 0x34
 80065fa:	f000 bf55 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	2b04      	cmp	r3, #4
 8006602:	d104      	bne.n	800660e <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006604:	f7fe f9a0 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006608:	6378      	str	r0, [r7, #52]	; 0x34
 800660a:	f000 bf4d 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800660e:	4b1e      	ldr	r3, [pc, #120]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800661a:	d106      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	2b08      	cmp	r3, #8
 8006620:	d103      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006622:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	f000 bf3f 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800662a:	4b17      	ldr	r3, [pc, #92]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800662c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006630:	f003 0302 	and.w	r3, r3, #2
 8006634:	2b02      	cmp	r3, #2
 8006636:	d107      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	2b0c      	cmp	r3, #12
 800663c:	d104      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800663e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006642:	637b      	str	r3, [r7, #52]	; 0x34
 8006644:	f000 bf30 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006648:	2300      	movs	r3, #0
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	f000 bf2c 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006654:	1f11      	subs	r1, r2, #4
 8006656:	430b      	orrs	r3, r1
 8006658:	d13f      	bne.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800665c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006660:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006664:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800666c:	f7fe fa8e 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006670:	6378      	str	r0, [r7, #52]	; 0x34
 8006672:	f000 bf19 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	2b10      	cmp	r3, #16
 800667a:	d10d      	bne.n	8006698 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800667c:	f7fe f964 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006680:	6378      	str	r0, [r7, #52]	; 0x34
 8006682:	f000 bf11 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006686:	bf00      	nop
 8006688:	46020c00 	.word	0x46020c00
 800668c:	02dc6c00 	.word	0x02dc6c00
 8006690:	0800f180 	.word	0x0800f180
 8006694:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006698:	4ba6      	ldr	r3, [pc, #664]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a4:	d106      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d103      	bne.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80066ac:	4ba2      	ldr	r3, [pc, #648]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
 80066b0:	f000 befa 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80066b4:	4b9f      	ldr	r3, [pc, #636]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d107      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	2b30      	cmp	r3, #48	; 0x30
 80066c6:	d104      	bne.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80066c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
 80066ce:	f000 beeb 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	637b      	str	r3, [r7, #52]	; 0x34
 80066d6:	f000 bee7 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80066da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066de:	f1a2 0108 	sub.w	r1, r2, #8
 80066e2:	430b      	orrs	r3, r1
 80066e4:	d136      	bne.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80066e6:	4b93      	ldr	r3, [pc, #588]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80066e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80066f8:	f7fe fa48 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 80066fc:	6378      	str	r0, [r7, #52]	; 0x34
 80066fe:	f000 bed3 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d104      	bne.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006708:	f7fe f91e 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 800670c:	6378      	str	r0, [r7, #52]	; 0x34
 800670e:	f000 becb 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006712:	4b88      	ldr	r3, [pc, #544]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800671a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800671e:	d106      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d103      	bne.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006726:	4b84      	ldr	r3, [pc, #528]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
 800672a:	f000 bebd 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800672e:	4b81      	ldr	r3, [pc, #516]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	2b02      	cmp	r3, #2
 800673a:	d107      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	2bc0      	cmp	r3, #192	; 0xc0
 8006740:	d104      	bne.n	800674c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006746:	637b      	str	r3, [r7, #52]	; 0x34
 8006748:	f000 beae 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	637b      	str	r3, [r7, #52]	; 0x34
 8006750:	f000 beaa 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006754:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006758:	f1a2 0110 	sub.w	r1, r2, #16
 800675c:	430b      	orrs	r3, r1
 800675e:	d139      	bne.n	80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006760:	4b74      	ldr	r3, [pc, #464]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	2b00      	cmp	r3, #0
 8006770:	d104      	bne.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fa0b 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006776:	6378      	str	r0, [r7, #52]	; 0x34
 8006778:	f000 be96 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006782:	d104      	bne.n	800678e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006784:	f7fe f8e0 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006788:	6378      	str	r0, [r7, #52]	; 0x34
 800678a:	f000 be8d 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800678e:	4b69      	ldr	r3, [pc, #420]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d107      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a2:	d103      	bne.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80067a4:	4b64      	ldr	r3, [pc, #400]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
 80067a8:	f000 be7e 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80067ac:	4b61      	ldr	r3, [pc, #388]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d108      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067c0:	d104      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80067c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
 80067c8:	f000 be6e 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	637b      	str	r3, [r7, #52]	; 0x34
 80067d0:	f000 be6a 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80067d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d8:	f1a2 0120 	sub.w	r1, r2, #32
 80067dc:	430b      	orrs	r3, r1
 80067de:	d158      	bne.n	8006892 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80067e0:	4b54      	ldr	r3, [pc, #336]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80067e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80067f2:	f7fe f9f3 	bl	8004bdc <HAL_RCC_GetPCLK3Freq>
 80067f6:	6378      	str	r0, [r7, #52]	; 0x34
 80067f8:	f000 be56 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d104      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7fe f8a1 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006806:	6378      	str	r0, [r7, #52]	; 0x34
 8006808:	f000 be4e 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800680c:	4b49      	ldr	r3, [pc, #292]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006818:	d106      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	2b02      	cmp	r3, #2
 800681e:	d103      	bne.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006820:	4b45      	ldr	r3, [pc, #276]	; (8006938 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006822:	637b      	str	r3, [r7, #52]	; 0x34
 8006824:	f000 be40 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006828:	4b42      	ldr	r3, [pc, #264]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800682a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b02      	cmp	r3, #2
 8006834:	d107      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	2b03      	cmp	r3, #3
 800683a:	d104      	bne.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800683c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006840:	637b      	str	r3, [r7, #52]	; 0x34
 8006842:	f000 be31 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006846:	4b3b      	ldr	r3, [pc, #236]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0320 	and.w	r3, r3, #32
 800684e:	2b20      	cmp	r3, #32
 8006850:	d11b      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	2b04      	cmp	r3, #4
 8006856:	d118      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006858:	4b36      	ldr	r3, [pc, #216]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006864:	4b33      	ldr	r3, [pc, #204]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	0e1b      	lsrs	r3, r3, #24
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	e006      	b.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006870:	4b30      	ldr	r3, [pc, #192]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006872:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006876:	041b      	lsls	r3, r3, #16
 8006878:	0e1b      	lsrs	r3, r3, #24
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	4a2f      	ldr	r2, [pc, #188]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
 8006886:	f000 be0f 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800688a:	2300      	movs	r3, #0
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
 800688e:	f000 be0b 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006896:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800689a:	430b      	orrs	r3, r1
 800689c:	d172      	bne.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800689e:	4b25      	ldr	r3, [pc, #148]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068a4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80068a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80068aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b0:	d104      	bne.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068b2:	f7fe f849 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 80068b6:	6378      	str	r0, [r7, #52]	; 0x34
 80068b8:	f000 bdf6 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80068bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c2:	d108      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c4:	f107 0318 	add.w	r3, r7, #24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff f949 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	f000 bde9 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80068d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80068dc:	f7fe f93c 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 80068e0:	6378      	str	r0, [r7, #52]	; 0x34
 80068e2:	f000 bde1 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80068e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80068ec:	d128      	bne.n	8006940 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d118      	bne.n	800692c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068fa:	4b0e      	ldr	r3, [pc, #56]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006906:	4b0b      	ldr	r3, [pc, #44]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0e1b      	lsrs	r3, r3, #24
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	e006      	b.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006918:	041b      	lsls	r3, r3, #16
 800691a:	0e1b      	lsrs	r3, r3, #24
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	4a06      	ldr	r2, [pc, #24]	; (800693c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006926:	637b      	str	r3, [r7, #52]	; 0x34
 8006928:	f000 bdbe 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	637b      	str	r3, [r7, #52]	; 0x34
 8006930:	f000 bdba 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006934:	46020c00 	.word	0x46020c00
 8006938:	00f42400 	.word	0x00f42400
 800693c:	0800f180 	.word	0x0800f180
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006940:	4baf      	ldr	r3, [pc, #700]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800694c:	d107      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006954:	d103      	bne.n	800695e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8006956:	4bab      	ldr	r3, [pc, #684]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
 800695a:	f000 bda5 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800695e:	4ba8      	ldr	r3, [pc, #672]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696a:	d107      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006972:	d103      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8006974:	4ba3      	ldr	r3, [pc, #652]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006976:	637b      	str	r3, [r7, #52]	; 0x34
 8006978:	f000 bd96 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800697c:	2300      	movs	r3, #0
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
 8006980:	f000 bd92 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006984:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006988:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800698c:	430b      	orrs	r3, r1
 800698e:	d158      	bne.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006990:	4b9b      	ldr	r3, [pc, #620]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006992:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006996:	f003 0307 	and.w	r3, r3, #7
 800699a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	2b04      	cmp	r3, #4
 80069a0:	d84b      	bhi.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 80069a2:	a201      	add	r2, pc, #4	; (adr r2, 80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	080069e1 	.word	0x080069e1
 80069ac:	080069bd 	.word	0x080069bd
 80069b0:	080069cf 	.word	0x080069cf
 80069b4:	080069eb 	.word	0x080069eb
 80069b8:	080069f5 	.word	0x080069f5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe ff65 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ca:	f000 bd6d 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ce:	f107 030c 	add.w	r3, r7, #12
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff fa2c 	bl	8005e30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069dc:	f000 bd64 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80069e0:	f7fe f8ba 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 80069e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069e6:	f000 bd5f 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069f0:	f000 bd5a 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069f4:	4b82      	ldr	r3, [pc, #520]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b20      	cmp	r3, #32
 80069fe:	d118      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a00:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d005      	beq.n	8006a18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8006a0c:	4b7c      	ldr	r3, [pc, #496]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	0e1b      	lsrs	r3, r3, #24
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	e006      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8006a18:	4b79      	ldr	r3, [pc, #484]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	0e1b      	lsrs	r3, r3, #24
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	4a78      	ldr	r2, [pc, #480]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a2e:	f000 bd3b 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a32:	2300      	movs	r3, #0
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a36:	f000 bd37 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a3e:	f000 bd33 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006a42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a46:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	d167      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006a4e:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a54:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a60:	d036      	beq.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a68:	d855      	bhi.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a70:	d029      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a78:	d84d      	bhi.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a80:	d013      	beq.n	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a88:	d845      	bhi.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d015      	beq.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a96:	d13e      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe fef7 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aa6:	f000 bcff 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006aaa:	f107 030c 	add.w	r3, r7, #12
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff f9be 	bl	8005e30 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ab8:	f000 bcf6 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006abc:	f7fe f84c 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8006ac0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006ac2:	f000 bcf1 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ac6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006aca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006acc:	f000 bcec 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ad0:	4b4b      	ldr	r3, [pc, #300]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b20      	cmp	r3, #32
 8006ada:	d118      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006adc:	4b48      	ldr	r3, [pc, #288]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 8006ae8:	4b45      	ldr	r3, [pc, #276]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	0e1b      	lsrs	r3, r3, #24
 8006aee:	f003 030f 	and.w	r3, r3, #15
 8006af2:	e006      	b.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006af4:	4b42      	ldr	r3, [pc, #264]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006af6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	0e1b      	lsrs	r3, r3, #24
 8006afe:	f003 030f 	and.w	r3, r3, #15
 8006b02:	4a41      	ldr	r2, [pc, #260]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b08:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b0a:	f000 bccd 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b12:	f000 bcc9 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b1a:	f000 bcc5 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b22:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006b26:	430b      	orrs	r3, r1
 8006b28:	d14c      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006b2a:	4b35      	ldr	r3, [pc, #212]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b34:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d104      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b3c:	f7fe f826 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006b40:	6378      	str	r0, [r7, #52]	; 0x34
 8006b42:	f000 bcb1 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d104      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b4e:	f7fd fefb 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006b52:	6378      	str	r0, [r7, #52]	; 0x34
 8006b54:	f000 bca8 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006b58:	4b29      	ldr	r3, [pc, #164]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b64:	d107      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b6c:	d103      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8006b6e:	4b25      	ldr	r3, [pc, #148]	; (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8006b70:	637b      	str	r3, [r7, #52]	; 0x34
 8006b72:	f000 bc99 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006b76:	4b22      	ldr	r3, [pc, #136]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d11c      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b88:	d118      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b8a:	4b1d      	ldr	r3, [pc, #116]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d005      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8006b96:	4b1a      	ldr	r3, [pc, #104]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	0e1b      	lsrs	r3, r3, #24
 8006b9c:	f003 030f 	and.w	r3, r3, #15
 8006ba0:	e006      	b.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006ba4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	0e1b      	lsrs	r3, r3, #24
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	4a15      	ldr	r2, [pc, #84]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8006bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb8:	f000 bc76 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006bc0:	f000 bc72 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d153      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006bd0:	4b0b      	ldr	r3, [pc, #44]	; (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8006bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bd6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006be2:	f7fd ffd3 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006be6:	6378      	str	r0, [r7, #52]	; 0x34
 8006be8:	f000 bc5e 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf2:	d10b      	bne.n	8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bf4:	f7fd fea8 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006bf8:	6378      	str	r0, [r7, #52]	; 0x34
 8006bfa:	f000 bc55 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006bfe:	bf00      	nop
 8006c00:	46020c00 	.word	0x46020c00
 8006c04:	00f42400 	.word	0x00f42400
 8006c08:	0800f180 	.word	0x0800f180
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006c0c:	4ba1      	ldr	r3, [pc, #644]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c18:	d107      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c20:	d103      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8006c22:	4b9d      	ldr	r3, [pc, #628]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
 8006c26:	f000 bc3f 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006c2a:	4b9a      	ldr	r3, [pc, #616]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0320 	and.w	r3, r3, #32
 8006c32:	2b20      	cmp	r3, #32
 8006c34:	d11c      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8006c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c3c:	d118      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c3e:	4b95      	ldr	r3, [pc, #596]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8006c4a:	4b92      	ldr	r3, [pc, #584]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	0e1b      	lsrs	r3, r3, #24
 8006c50:	f003 030f 	and.w	r3, r3, #15
 8006c54:	e006      	b.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8006c56:	4b8f      	ldr	r3, [pc, #572]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	0e1b      	lsrs	r3, r3, #24
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	4a8d      	ldr	r2, [pc, #564]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6c:	f000 bc1c 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006c70:	2300      	movs	r3, #0
 8006c72:	637b      	str	r3, [r7, #52]	; 0x34
 8006c74:	f000 bc18 	b.w	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006c80:	430b      	orrs	r3, r1
 8006c82:	d151      	bne.n	8006d28 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006c84:	4b83      	ldr	r3, [pc, #524]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006c86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c8e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c92:	2bc0      	cmp	r3, #192	; 0xc0
 8006c94:	d024      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8006c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c98:	2bc0      	cmp	r3, #192	; 0xc0
 8006c9a:	d842      	bhi.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9e:	2b80      	cmp	r3, #128	; 0x80
 8006ca0:	d00d      	beq.n	8006cbe <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	2b80      	cmp	r3, #128	; 0x80
 8006ca6:	d83c      	bhi.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8006ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2b40      	cmp	r3, #64	; 0x40
 8006cb2:	d011      	beq.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8006cb4:	e035      	b.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006cb6:	f7fd ff91 	bl	8004bdc <HAL_RCC_GetPCLK3Freq>
 8006cba:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cbc:	e3f4      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cbe:	4b75      	ldr	r3, [pc, #468]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cca:	d102      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8006ccc:	4b72      	ldr	r3, [pc, #456]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cd0:	e3ea      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cd6:	e3e7      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006cd8:	f7fd fe36 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006cdc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006cde:	e3e3      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ce0:	4b6c      	ldr	r3, [pc, #432]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d117      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cec:	4b69      	ldr	r3, [pc, #420]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d005      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8006cf8:	4b66      	ldr	r3, [pc, #408]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	0e1b      	lsrs	r3, r3, #24
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	e006      	b.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8006d04:	4b63      	ldr	r3, [pc, #396]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	f003 030f 	and.w	r3, r3, #15
 8006d12:	4a62      	ldr	r2, [pc, #392]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d1a:	e3c5      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d20:	e3c2      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d26:	e3bf      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006d28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006d30:	430b      	orrs	r3, r1
 8006d32:	d147      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006d34:	4b57      	ldr	r3, [pc, #348]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d103      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d46:	f7fd ff21 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006d4a:	6378      	str	r0, [r7, #52]	; 0x34
 8006d4c:	e3ac      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d54:	d103      	bne.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fd fdf7 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8006d5a:	6378      	str	r0, [r7, #52]	; 0x34
 8006d5c:	e3a4      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006d5e:	4b4d      	ldr	r3, [pc, #308]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6a:	d106      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8006d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d72:	d102      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8006d74:	4b48      	ldr	r3, [pc, #288]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	e396      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006d7a:	4b46      	ldr	r3, [pc, #280]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b20      	cmp	r3, #32
 8006d84:	d11b      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d8c:	d117      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d8e:	4b41      	ldr	r3, [pc, #260]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d005      	beq.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8006d9a:	4b3e      	ldr	r3, [pc, #248]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	0e1b      	lsrs	r3, r3, #24
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	e006      	b.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8006da6:	4b3b      	ldr	r3, [pc, #236]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dac:	041b      	lsls	r3, r3, #16
 8006dae:	0e1b      	lsrs	r3, r3, #24
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	4a39      	ldr	r2, [pc, #228]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dba:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbc:	e374      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc2:	e371      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006dcc:	430b      	orrs	r3, r1
 8006dce:	d16a      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006dd0:	4b30      	ldr	r3, [pc, #192]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006dd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d120      	bne.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006de2:	4b2c      	ldr	r3, [pc, #176]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0320 	and.w	r3, r3, #32
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	d117      	bne.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dee:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8006dfa:	4b26      	ldr	r3, [pc, #152]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	0e1b      	lsrs	r3, r3, #24
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	e006      	b.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8006e06:	4b23      	ldr	r3, [pc, #140]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e0c:	041b      	lsls	r3, r3, #16
 8006e0e:	0e1b      	lsrs	r3, r3, #24
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8006e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006e1c:	e344      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	637b      	str	r3, [r7, #52]	; 0x34
 8006e22:	e341      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006e24:	4b1b      	ldr	r3, [pc, #108]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e32:	d112      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d10e      	bne.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8006e4c:	23fa      	movs	r3, #250	; 0xfa
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e50:	e32a      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006e52:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006e58:	e326      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006e5a:	4b0e      	ldr	r3, [pc, #56]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e66:	d106      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8006e70:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8006e72:	637b      	str	r3, [r7, #52]	; 0x34
 8006e74:	e318      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006e76:	4b07      	ldr	r3, [pc, #28]	; (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8006e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d10d      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e8a:	d109      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8006e8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e90:	637b      	str	r3, [r7, #52]	; 0x34
 8006e92:	e309      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006e94:	46020c00 	.word	0x46020c00
 8006e98:	00f42400 	.word	0x00f42400
 8006e9c:	0800f180 	.word	0x0800f180
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea4:	e300      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eaa:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	d164      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006eb2:	4ba2      	ldr	r3, [pc, #648]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006eb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ebc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d120      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ec4:	4b9d      	ldr	r3, [pc, #628]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d117      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ed0:	4b9a      	ldr	r3, [pc, #616]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8006edc:	4b97      	ldr	r3, [pc, #604]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	0e1b      	lsrs	r3, r3, #24
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	e006      	b.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8006ee8:	4b94      	ldr	r3, [pc, #592]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006eea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eee:	041b      	lsls	r3, r3, #16
 8006ef0:	0e1b      	lsrs	r3, r3, #24
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	4a92      	ldr	r2, [pc, #584]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8006ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
 8006efe:	e2d3      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	637b      	str	r3, [r7, #52]	; 0x34
 8006f04:	e2d0      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006f06:	4b8d      	ldr	r3, [pc, #564]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f14:	d112      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1c:	d10e      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f1e:	4b87      	ldr	r3, [pc, #540]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f2c:	d102      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8006f2e:	23fa      	movs	r3, #250	; 0xfa
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f32:	e2b9      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006f34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006f38:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006f3a:	e2b5      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006f3c:	4b7f      	ldr	r3, [pc, #508]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f48:	d106      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f50:	d102      	bne.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8006f52:	4b7c      	ldr	r3, [pc, #496]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
 8006f56:	e2a7      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006f58:	4b78      	ldr	r3, [pc, #480]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f5e:	f003 0302 	and.w	r3, r3, #2
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d107      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8006f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f6c:	d103      	bne.n	8006f76 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
 8006f74:	e298      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
 8006f7a:	e295      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f80:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006f84:	430b      	orrs	r3, r1
 8006f86:	d147      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006f88:	4b6c      	ldr	r3, [pc, #432]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006f92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d103      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f9a:	f7fd fdf7 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8006f9e:	6378      	str	r0, [r7, #52]	; 0x34
 8006fa0:	e282      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006fa2:	4b66      	ldr	r3, [pc, #408]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb0:	d112      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fba:	4b60      	ldr	r3, [pc, #384]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fc8:	d102      	bne.n	8006fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8006fca:	23fa      	movs	r3, #250	; 0xfa
 8006fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fce:	e26b      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8006fd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006fd4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006fd6:	e267      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006fd8:	4b58      	ldr	r3, [pc, #352]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe4:	d106      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fec:	d102      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8006fee:	4b55      	ldr	r3, [pc, #340]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff2:	e259      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006ff4:	4b51      	ldr	r3, [pc, #324]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8006ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d107      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007008:	d103      	bne.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800700a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
 8007010:	e24a      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007012:	2300      	movs	r3, #0
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	e247      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800701c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007020:	430b      	orrs	r3, r1
 8007022:	d12d      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007024:	4b45      	ldr	r3, [pc, #276]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800702a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800702e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8007030:	4b42      	ldr	r3, [pc, #264]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800703c:	d105      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800703e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8007044:	4b3f      	ldr	r3, [pc, #252]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
 8007048:	e22e      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007050:	d107      	bne.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fc1a 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
 8007060:	e222      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007068:	d107      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800706a:	f107 0318 	add.w	r3, r7, #24
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fd76 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
 8007078:	e216      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
 800707e:	e213      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007084:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007088:	430b      	orrs	r3, r1
 800708a:	d15d      	bne.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800708c:	4b2b      	ldr	r3, [pc, #172]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800708e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007092:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007096:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800709e:	d028      	beq.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80070a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80070a6:	d845      	bhi.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80070a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070ae:	d013      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80070b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80070b6:	d83d      	bhi.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d004      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070c4:	d004      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80070c6:	e035      	b.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fd fd74 	bl	8004bb4 <HAL_RCC_GetPCLK2Freq>
 80070cc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070ce:	e1eb      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070d0:	f7fd fc3a 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 80070d4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070d6:	e1e7      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070d8:	4b18      	ldr	r3, [pc, #96]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070e4:	d102      	bne.n	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80070e6:	4b17      	ldr	r3, [pc, #92]	; (8007144 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80070e8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070ea:	e1dd      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070f0:	e1da      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070f2:	4b12      	ldr	r3, [pc, #72]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d117      	bne.n	800712e <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d005      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800710a:	4b0c      	ldr	r3, [pc, #48]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	0e1b      	lsrs	r3, r3, #24
 8007110:	f003 030f 	and.w	r3, r3, #15
 8007114:	e006      	b.n	8007124 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8007116:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800711c:	041b      	lsls	r3, r3, #16
 800711e:	0e1b      	lsrs	r3, r3, #24
 8007120:	f003 030f 	and.w	r3, r3, #15
 8007124:	4a06      	ldr	r2, [pc, #24]	; (8007140 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8007126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800712c:	e1bc      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007132:	e1b9      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007138:	e1b6      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800713a:	bf00      	nop
 800713c:	46020c00 	.word	0x46020c00
 8007140:	0800f180 	.word	0x0800f180
 8007144:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800714c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007150:	430b      	orrs	r3, r1
 8007152:	d156      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007154:	4ba5      	ldr	r3, [pc, #660]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800715a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800715e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007166:	d028      	beq.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800716e:	d845      	bhi.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007176:	d013      	beq.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800717a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800717e:	d83d      	bhi.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800718c:	d004      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800718e:	e035      	b.n	80071fc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007190:	f7fd fcfc 	bl	8004b8c <HAL_RCC_GetPCLK1Freq>
 8007194:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007196:	e187      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007198:	f7fd fbd6 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 800719c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800719e:	e183      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071a0:	4b92      	ldr	r3, [pc, #584]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071ac:	d102      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 80071ae:	4b90      	ldr	r3, [pc, #576]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071b2:	e179      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071b8:	e176      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071ba:	4b8c      	ldr	r3, [pc, #560]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d117      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071c6:	4b89      	ldr	r3, [pc, #548]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80071d2:	4b86      	ldr	r3, [pc, #536]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	0e1b      	lsrs	r3, r3, #24
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80071de:	4b83      	ldr	r3, [pc, #524]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80071e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071e4:	041b      	lsls	r3, r3, #16
 80071e6:	0e1b      	lsrs	r3, r3, #24
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	4a81      	ldr	r2, [pc, #516]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80071ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071f4:	e158      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071f6:	2300      	movs	r3, #0
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071fa:	e155      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80071fc:	2300      	movs	r3, #0
 80071fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007200:	e152      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007202:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007206:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800720a:	430b      	orrs	r3, r1
 800720c:	d177      	bne.n	80072fe <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800720e:	4b77      	ldr	r3, [pc, #476]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007214:	f003 0318 	and.w	r3, r3, #24
 8007218:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800721a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721c:	2b18      	cmp	r3, #24
 800721e:	d86b      	bhi.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007220:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	0800728d 	.word	0x0800728d
 800722c:	080072f9 	.word	0x080072f9
 8007230:	080072f9 	.word	0x080072f9
 8007234:	080072f9 	.word	0x080072f9
 8007238:	080072f9 	.word	0x080072f9
 800723c:	080072f9 	.word	0x080072f9
 8007240:	080072f9 	.word	0x080072f9
 8007244:	080072f9 	.word	0x080072f9
 8007248:	08007295 	.word	0x08007295
 800724c:	080072f9 	.word	0x080072f9
 8007250:	080072f9 	.word	0x080072f9
 8007254:	080072f9 	.word	0x080072f9
 8007258:	080072f9 	.word	0x080072f9
 800725c:	080072f9 	.word	0x080072f9
 8007260:	080072f9 	.word	0x080072f9
 8007264:	080072f9 	.word	0x080072f9
 8007268:	0800729d 	.word	0x0800729d
 800726c:	080072f9 	.word	0x080072f9
 8007270:	080072f9 	.word	0x080072f9
 8007274:	080072f9 	.word	0x080072f9
 8007278:	080072f9 	.word	0x080072f9
 800727c:	080072f9 	.word	0x080072f9
 8007280:	080072f9 	.word	0x080072f9
 8007284:	080072f9 	.word	0x080072f9
 8007288:	080072b7 	.word	0x080072b7
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800728c:	f7fd fca6 	bl	8004bdc <HAL_RCC_GetPCLK3Freq>
 8007290:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007292:	e109      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007294:	f7fd fb58 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 8007298:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800729a:	e105      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800729c:	4b53      	ldr	r3, [pc, #332]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a8:	d102      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 80072aa:	4b51      	ldr	r3, [pc, #324]	; (80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 80072ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072ae:	e0fb      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072b4:	e0f8      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80072b6:	4b4d      	ldr	r3, [pc, #308]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0320 	and.w	r3, r3, #32
 80072be:	2b20      	cmp	r3, #32
 80072c0:	d117      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072c2:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 80072ce:	4b47      	ldr	r3, [pc, #284]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	0e1b      	lsrs	r3, r3, #24
 80072d4:	f003 030f 	and.w	r3, r3, #15
 80072d8:	e006      	b.n	80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80072da:	4b44      	ldr	r3, [pc, #272]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80072dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072e0:	041b      	lsls	r3, r3, #16
 80072e2:	0e1b      	lsrs	r3, r3, #24
 80072e4:	f003 030f 	and.w	r3, r3, #15
 80072e8:	4a42      	ldr	r2, [pc, #264]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80072ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80072f0:	e0da      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072f6:	e0d7      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072fc:	e0d4      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80072fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007302:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007306:	430b      	orrs	r3, r1
 8007308:	d155      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800730a:	4b38      	ldr	r3, [pc, #224]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800730c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007310:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007314:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800731c:	d013      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800731e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007320:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007324:	d844      	bhi.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800732c:	d013      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007334:	d83c      	bhi.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2b00      	cmp	r3, #0
 800733a:	d014      	beq.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007342:	d014      	beq.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007344:	e034      	b.n	80073b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007346:	f107 0318 	add.w	r3, r7, #24
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fc08 	bl	8005b60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007354:	e0a8      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fa98 	bl	8005890 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007362:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007364:	e0a0      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007366:	f7fd faef 	bl	8004948 <HAL_RCC_GetSysClockFreq>
 800736a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800736c:	e09c      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800736e:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b20      	cmp	r3, #32
 8007378:	d117      	bne.n	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d005      	beq.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007386:	4b19      	ldr	r3, [pc, #100]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	0e1b      	lsrs	r3, r3, #24
 800738c:	f003 030f 	and.w	r3, r3, #15
 8007390:	e006      	b.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007392:	4b16      	ldr	r3, [pc, #88]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	0e1b      	lsrs	r3, r3, #24
 800739c:	f003 030f 	and.w	r3, r3, #15
 80073a0:	4a14      	ldr	r2, [pc, #80]	; (80073f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80073a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073a8:	e07e      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ae:	e07b      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80073b0:	2300      	movs	r3, #0
 80073b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073b4:	e078      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80073b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073ba:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80073be:	430b      	orrs	r3, r1
 80073c0:	d138      	bne.n	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80073c2:	4b0a      	ldr	r3, [pc, #40]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80073c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073cc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80073ce:	4b07      	ldr	r3, [pc, #28]	; (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80073d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073d4:	f003 0302 	and.w	r3, r3, #2
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d10d      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80073e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
 80073e8:	e05e      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80073ea:	bf00      	nop
 80073ec:	46020c00 	.word	0x46020c00
 80073f0:	00f42400 	.word	0x00f42400
 80073f4:	0800f180 	.word	0x0800f180
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80073f8:	4b2e      	ldr	r3, [pc, #184]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80073fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80073fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007402:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007406:	d112      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800740e:	d10e      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007410:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007412:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800741e:	d102      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007420:	23fa      	movs	r3, #250	; 0xfa
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007424:	e040      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007426:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800742c:	e03c      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	637b      	str	r3, [r7, #52]	; 0x34
 8007432:	e039      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007434:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007438:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800743c:	430b      	orrs	r3, r1
 800743e:	d131      	bne.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007440:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007442:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007446:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800744a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800744c:	4b19      	ldr	r3, [pc, #100]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007458:	d105      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007460:	4b15      	ldr	r3, [pc, #84]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007462:	637b      	str	r3, [r7, #52]	; 0x34
 8007464:	e020      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800746e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007472:	d106      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747a:	d102      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800747c:	4b0f      	ldr	r3, [pc, #60]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e012      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007482:	4b0c      	ldr	r3, [pc, #48]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800748e:	d106      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007496:	d102      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007498:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800749a:	637b      	str	r3, [r7, #52]	; 0x34
 800749c:	e004      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	; 0x34
 80074a2:	e001      	b.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3738      	adds	r7, #56	; 0x38
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	46020c00 	.word	0x46020c00
 80074b8:	02dc6c00 	.word	0x02dc6c00
 80074bc:	016e3600 	.word	0x016e3600
 80074c0:	00f42400 	.word	0x00f42400

080074c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80074cc:	4b47      	ldr	r3, [pc, #284]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a46      	ldr	r2, [pc, #280]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80074d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074d8:	f7fa feb0 	bl	800223c <HAL_GetTick>
 80074dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074de:	e008      	b.n	80074f2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074e0:	f7fa feac 	bl	800223c <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e077      	b.n	80075e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074f2:	4b3e      	ldr	r3, [pc, #248]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1f0      	bne.n	80074e0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80074fe:	4b3b      	ldr	r3, [pc, #236]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6811      	ldr	r1, [r2, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6852      	ldr	r2, [r2, #4]
 8007512:	3a01      	subs	r2, #1
 8007514:	0212      	lsls	r2, r2, #8
 8007516:	430a      	orrs	r2, r1
 8007518:	4934      	ldr	r1, [pc, #208]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 800751a:	4313      	orrs	r3, r2
 800751c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800751e:	4b33      	ldr	r3, [pc, #204]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 8007520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007522:	4b33      	ldr	r3, [pc, #204]	; (80075f0 <RCCEx_PLL2_Config+0x12c>)
 8007524:	4013      	ands	r3, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6892      	ldr	r2, [r2, #8]
 800752a:	3a01      	subs	r2, #1
 800752c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	68d2      	ldr	r2, [r2, #12]
 8007534:	3a01      	subs	r2, #1
 8007536:	0252      	lsls	r2, r2, #9
 8007538:	b292      	uxth	r2, r2
 800753a:	4311      	orrs	r1, r2
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6912      	ldr	r2, [r2, #16]
 8007540:	3a01      	subs	r2, #1
 8007542:	0412      	lsls	r2, r2, #16
 8007544:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007548:	4311      	orrs	r1, r2
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6952      	ldr	r2, [r2, #20]
 800754e:	3a01      	subs	r2, #1
 8007550:	0612      	lsls	r2, r2, #24
 8007552:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007556:	430a      	orrs	r2, r1
 8007558:	4924      	ldr	r1, [pc, #144]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 800755a:	4313      	orrs	r3, r2
 800755c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800755e:	4b23      	ldr	r3, [pc, #140]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 8007560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007562:	f023 020c 	bic.w	r2, r3, #12
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	4920      	ldr	r1, [pc, #128]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 800756c:	4313      	orrs	r3, r2
 800756e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007570:	4b1e      	ldr	r3, [pc, #120]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 8007572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	491c      	ldr	r1, [pc, #112]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 800757a:	4313      	orrs	r3, r2
 800757c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800757e:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	4a1a      	ldr	r2, [pc, #104]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 8007584:	f023 0310 	bic.w	r3, r3, #16
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800758a:	4b18      	ldr	r3, [pc, #96]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007592:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	69d2      	ldr	r2, [r2, #28]
 800759a:	00d2      	lsls	r2, r2, #3
 800759c:	4913      	ldr	r1, [pc, #76]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	4a11      	ldr	r2, [pc, #68]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80075a8:	f043 0310 	orr.w	r3, r3, #16
 80075ac:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80075ae:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a0e      	ldr	r2, [pc, #56]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80075b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075ba:	f7fa fe3f 	bl	800223c <HAL_GetTick>
 80075be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075c0:	e008      	b.n	80075d4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075c2:	f7fa fe3b 	bl	800223c <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d901      	bls.n	80075d4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e006      	b.n	80075e2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <RCCEx_PLL2_Config+0x128>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0f0      	beq.n	80075c2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0

}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	46020c00 	.word	0x46020c00
 80075f0:	80800000 	.word	0x80800000

080075f4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80075fc:	4b47      	ldr	r3, [pc, #284]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a46      	ldr	r2, [pc, #280]	; (800771c <RCCEx_PLL3_Config+0x128>)
 8007602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007606:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007608:	f7fa fe18 	bl	800223c <HAL_GetTick>
 800760c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800760e:	e008      	b.n	8007622 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007610:	f7fa fe14 	bl	800223c <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e077      	b.n	8007712 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007622:	4b3e      	ldr	r3, [pc, #248]	; (800771c <RCCEx_PLL3_Config+0x128>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f0      	bne.n	8007610 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800762e:	4b3b      	ldr	r3, [pc, #236]	; (800771c <RCCEx_PLL3_Config+0x128>)
 8007630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007632:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007636:	f023 0303 	bic.w	r3, r3, #3
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6852      	ldr	r2, [r2, #4]
 8007642:	3a01      	subs	r2, #1
 8007644:	0212      	lsls	r2, r2, #8
 8007646:	430a      	orrs	r2, r1
 8007648:	4934      	ldr	r1, [pc, #208]	; (800771c <RCCEx_PLL3_Config+0x128>)
 800764a:	4313      	orrs	r3, r2
 800764c:	630b      	str	r3, [r1, #48]	; 0x30
 800764e:	4b33      	ldr	r3, [pc, #204]	; (800771c <RCCEx_PLL3_Config+0x128>)
 8007650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007652:	4b33      	ldr	r3, [pc, #204]	; (8007720 <RCCEx_PLL3_Config+0x12c>)
 8007654:	4013      	ands	r3, r2
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	6892      	ldr	r2, [r2, #8]
 800765a:	3a01      	subs	r2, #1
 800765c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	68d2      	ldr	r2, [r2, #12]
 8007664:	3a01      	subs	r2, #1
 8007666:	0252      	lsls	r2, r2, #9
 8007668:	b292      	uxth	r2, r2
 800766a:	4311      	orrs	r1, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6912      	ldr	r2, [r2, #16]
 8007670:	3a01      	subs	r2, #1
 8007672:	0412      	lsls	r2, r2, #16
 8007674:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007678:	4311      	orrs	r1, r2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6952      	ldr	r2, [r2, #20]
 800767e:	3a01      	subs	r2, #1
 8007680:	0612      	lsls	r2, r2, #24
 8007682:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007686:	430a      	orrs	r2, r1
 8007688:	4924      	ldr	r1, [pc, #144]	; (800771c <RCCEx_PLL3_Config+0x128>)
 800768a:	4313      	orrs	r3, r2
 800768c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800768e:	4b23      	ldr	r3, [pc, #140]	; (800771c <RCCEx_PLL3_Config+0x128>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	f023 020c 	bic.w	r2, r3, #12
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	4920      	ldr	r1, [pc, #128]	; (800771c <RCCEx_PLL3_Config+0x128>)
 800769c:	4313      	orrs	r3, r2
 800769e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80076a0:	4b1e      	ldr	r3, [pc, #120]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a1b      	ldr	r3, [r3, #32]
 80076a8:	491c      	ldr	r1, [pc, #112]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80076ae:	4b1b      	ldr	r3, [pc, #108]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	4a1a      	ldr	r2, [pc, #104]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076b4:	f023 0310 	bic.w	r3, r3, #16
 80076b8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80076ba:	4b18      	ldr	r3, [pc, #96]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076c2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	69d2      	ldr	r2, [r2, #28]
 80076ca:	00d2      	lsls	r2, r2, #3
 80076cc:	4913      	ldr	r1, [pc, #76]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80076d2:	4b12      	ldr	r3, [pc, #72]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	4a11      	ldr	r2, [pc, #68]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076d8:	f043 0310 	orr.w	r3, r3, #16
 80076dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80076de:	4b0f      	ldr	r3, [pc, #60]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a0e      	ldr	r2, [pc, #56]	; (800771c <RCCEx_PLL3_Config+0x128>)
 80076e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80076ea:	f7fa fda7 	bl	800223c <HAL_GetTick>
 80076ee:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076f0:	e008      	b.n	8007704 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076f2:	f7fa fda3 	bl	800223c <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d901      	bls.n	8007704 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e006      	b.n	8007712 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007704:	4b05      	ldr	r3, [pc, #20]	; (800771c <RCCEx_PLL3_Config+0x128>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d0f0      	beq.n	80076f2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	46020c00 	.word	0x46020c00
 8007720:	80800000 	.word	0x80800000

08007724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d101      	bne.n	8007736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e042      	b.n	80077bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fa fb3d 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2224      	movs	r2, #36	; 0x24
 8007752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0201 	bic.w	r2, r2, #1
 8007764:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8ca 	bl	8007900 <UART_SetConfig>
 800776c:	4603      	mov	r3, r0
 800776e:	2b01      	cmp	r3, #1
 8007770:	d101      	bne.n	8007776 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e022      	b.n	80077bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fa60 	bl	8007c44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fae7 	bl	8007d88 <UART_CheckIdleState>
 80077ba:	4603      	mov	r3, r0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b08a      	sub	sp, #40	; 0x28
 80077c8:	af02      	add	r7, sp, #8
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	603b      	str	r3, [r7, #0]
 80077d0:	4613      	mov	r3, r2
 80077d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 808b 	bne.w	80078f6 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <HAL_UART_Transmit+0x28>
 80077e6:	88fb      	ldrh	r3, [r7, #6]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e083      	b.n	80078f8 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d107      	bne.n	800780e <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800780c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2221      	movs	r2, #33	; 0x21
 800781a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800781e:	f7fa fd0d 	bl	800223c <HAL_GetTick>
 8007822:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	88fa      	ldrh	r2, [r7, #6]
 8007828:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	88fa      	ldrh	r2, [r7, #6]
 8007830:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783c:	d108      	bne.n	8007850 <HAL_UART_Transmit+0x8c>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d104      	bne.n	8007850 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	e003      	b.n	8007858 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007854:	2300      	movs	r3, #0
 8007856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007858:	e030      	b.n	80078bc <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	9300      	str	r3, [sp, #0]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	2200      	movs	r2, #0
 8007862:	2180      	movs	r1, #128	; 0x80
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fb39 	bl	8007edc <UART_WaitOnFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007878:	2303      	movs	r3, #3
 800787a:	e03d      	b.n	80078f8 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007890:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	3302      	adds	r3, #2
 8007896:	61bb      	str	r3, [r7, #24]
 8007898:	e007      	b.n	80078aa <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	3301      	adds	r3, #1
 80078a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1c8      	bne.n	800785a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	2140      	movs	r1, #64	; 0x40
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f000 fb02 	bl	8007edc <UART_WaitOnFlagUntilTimeout>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2220      	movs	r2, #32
 80078e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e006      	b.n	80078f8 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	e000      	b.n	80078f8 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80078f6:	2302      	movs	r3, #2
  }
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3720      	adds	r7, #32
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007904:	b094      	sub	sp, #80	; 0x50
 8007906:	af00      	add	r7, sp, #0
 8007908:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	4b7e      	ldr	r3, [pc, #504]	; (8007b10 <UART_SetConfig+0x210>)
 8007916:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791a:	689a      	ldr	r2, [r3, #8]
 800791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791e:	691b      	ldr	r3, [r3, #16]
 8007920:	431a      	orrs	r2, r3
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	431a      	orrs	r2, r3
 8007928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792a:	69db      	ldr	r3, [r3, #28]
 800792c:	4313      	orrs	r3, r2
 800792e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4977      	ldr	r1, [pc, #476]	; (8007b14 <UART_SetConfig+0x214>)
 8007938:	4019      	ands	r1, r3
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007940:	430b      	orrs	r3, r1
 8007942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	68d9      	ldr	r1, [r3, #12]
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	ea40 0301 	orr.w	r3, r0, r1
 800795a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	4b6a      	ldr	r3, [pc, #424]	; (8007b10 <UART_SetConfig+0x210>)
 8007968:	429a      	cmp	r2, r3
 800796a:	d009      	beq.n	8007980 <UART_SetConfig+0x80>
 800796c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	4b69      	ldr	r3, [pc, #420]	; (8007b18 <UART_SetConfig+0x218>)
 8007972:	429a      	cmp	r2, r3
 8007974:	d004      	beq.n	8007980 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	6a1a      	ldr	r2, [r3, #32]
 800797a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797c:	4313      	orrs	r3, r2
 800797e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800798a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800798e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007994:	430b      	orrs	r3, r1
 8007996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	f023 000f 	bic.w	r0, r3, #15
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80079a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	ea40 0301 	orr.w	r3, r0, r1
 80079ae:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	4b59      	ldr	r3, [pc, #356]	; (8007b1c <UART_SetConfig+0x21c>)
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d102      	bne.n	80079c0 <UART_SetConfig+0xc0>
 80079ba:	2301      	movs	r3, #1
 80079bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079be:	e029      	b.n	8007a14 <UART_SetConfig+0x114>
 80079c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	4b56      	ldr	r3, [pc, #344]	; (8007b20 <UART_SetConfig+0x220>)
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d102      	bne.n	80079d0 <UART_SetConfig+0xd0>
 80079ca:	2302      	movs	r3, #2
 80079cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ce:	e021      	b.n	8007a14 <UART_SetConfig+0x114>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	4b53      	ldr	r3, [pc, #332]	; (8007b24 <UART_SetConfig+0x224>)
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d102      	bne.n	80079e0 <UART_SetConfig+0xe0>
 80079da:	2304      	movs	r3, #4
 80079dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079de:	e019      	b.n	8007a14 <UART_SetConfig+0x114>
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	4b50      	ldr	r3, [pc, #320]	; (8007b28 <UART_SetConfig+0x228>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d102      	bne.n	80079f0 <UART_SetConfig+0xf0>
 80079ea:	2308      	movs	r3, #8
 80079ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80079ee:	e011      	b.n	8007a14 <UART_SetConfig+0x114>
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b4d      	ldr	r3, [pc, #308]	; (8007b2c <UART_SetConfig+0x22c>)
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d102      	bne.n	8007a00 <UART_SetConfig+0x100>
 80079fa:	2310      	movs	r3, #16
 80079fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80079fe:	e009      	b.n	8007a14 <UART_SetConfig+0x114>
 8007a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b42      	ldr	r3, [pc, #264]	; (8007b10 <UART_SetConfig+0x210>)
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d102      	bne.n	8007a10 <UART_SetConfig+0x110>
 8007a0a:	2320      	movs	r3, #32
 8007a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a0e:	e001      	b.n	8007a14 <UART_SetConfig+0x114>
 8007a10:	2300      	movs	r3, #0
 8007a12:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b3d      	ldr	r3, [pc, #244]	; (8007b10 <UART_SetConfig+0x210>)
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d005      	beq.n	8007a2a <UART_SetConfig+0x12a>
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	4b3d      	ldr	r3, [pc, #244]	; (8007b18 <UART_SetConfig+0x218>)
 8007a24:	429a      	cmp	r2, r3
 8007a26:	f040 8085 	bne.w	8007b34 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	623b      	str	r3, [r7, #32]
 8007a30:	627a      	str	r2, [r7, #36]	; 0x24
 8007a32:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007a36:	f7fe fb63 	bl	8006100 <HAL_RCCEx_GetPeriphCLKFreq>
 8007a3a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f000 80e8 	beq.w	8007c14 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	4a39      	ldr	r2, [pc, #228]	; (8007b30 <UART_SetConfig+0x230>)
 8007a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a52:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a56:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d305      	bcc.n	8007a74 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d903      	bls.n	8007a7c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007a7a:	e048      	b.n	8007b0e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a7e:	2200      	movs	r2, #0
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	61fa      	str	r2, [r7, #28]
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	4a29      	ldr	r2, [pc, #164]	; (8007b30 <UART_SetConfig+0x230>)
 8007a8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	2200      	movs	r2, #0
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	617a      	str	r2, [r7, #20]
 8007a96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a9e:	f7f9 f8f7 	bl	8000c90 <__aeabi_uldivmod>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	020b      	lsls	r3, r1, #8
 8007ab4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ab8:	0202      	lsls	r2, r0, #8
 8007aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abc:	6849      	ldr	r1, [r1, #4]
 8007abe:	0849      	lsrs	r1, r1, #1
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	4605      	mov	r5, r0
 8007ac6:	eb12 0804 	adds.w	r8, r2, r4
 8007aca:	eb43 0905 	adc.w	r9, r3, r5
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	60bb      	str	r3, [r7, #8]
 8007ad6:	60fa      	str	r2, [r7, #12]
 8007ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007adc:	4640      	mov	r0, r8
 8007ade:	4649      	mov	r1, r9
 8007ae0:	f7f9 f8d6 	bl	8000c90 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4613      	mov	r3, r2
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007af2:	d308      	bcc.n	8007b06 <UART_SetConfig+0x206>
 8007af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007afa:	d204      	bcs.n	8007b06 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b02:	60da      	str	r2, [r3, #12]
 8007b04:	e003      	b.n	8007b0e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007b0c:	e082      	b.n	8007c14 <UART_SetConfig+0x314>
 8007b0e:	e081      	b.n	8007c14 <UART_SetConfig+0x314>
 8007b10:	46002400 	.word	0x46002400
 8007b14:	cfff69f3 	.word	0xcfff69f3
 8007b18:	56002400 	.word	0x56002400
 8007b1c:	40013800 	.word	0x40013800
 8007b20:	40004400 	.word	0x40004400
 8007b24:	40004800 	.word	0x40004800
 8007b28:	40004c00 	.word	0x40004c00
 8007b2c:	40005000 	.word	0x40005000
 8007b30:	0800f240 	.word	0x0800f240
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	69db      	ldr	r3, [r3, #28]
 8007b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b3c:	d13c      	bne.n	8007bb8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b40:	2200      	movs	r2, #0
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b4a:	f7fe fad9 	bl	8006100 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b4e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d05e      	beq.n	8007c14 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	4a39      	ldr	r2, [pc, #228]	; (8007c40 <UART_SetConfig+0x340>)
 8007b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b60:	461a      	mov	r2, r3
 8007b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b68:	005a      	lsls	r2, r3, #1
 8007b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	085b      	lsrs	r3, r3, #1
 8007b70:	441a      	add	r2, r3
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	d916      	bls.n	8007bb0 <UART_SetConfig+0x2b0>
 8007b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d212      	bcs.n	8007bb0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	f023 030f 	bic.w	r3, r3, #15
 8007b92:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b96:	085b      	lsrs	r3, r3, #1
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	f003 0307 	and.w	r3, r3, #7
 8007b9e:	b29a      	uxth	r2, r3
 8007ba0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007bac:	60da      	str	r2, [r3, #12]
 8007bae:	e031      	b.n	8007c14 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007bb6:	e02d      	b.n	8007c14 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bba:	2200      	movs	r2, #0
 8007bbc:	469a      	mov	sl, r3
 8007bbe:	4693      	mov	fp, r2
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	f7fe fa9c 	bl	8006100 <HAL_RCCEx_GetPeriphCLKFreq>
 8007bc8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007bca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d021      	beq.n	8007c14 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	4a1a      	ldr	r2, [pc, #104]	; (8007c40 <UART_SetConfig+0x340>)
 8007bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	441a      	add	r2, r3
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d909      	bls.n	8007c0e <UART_SetConfig+0x30e>
 8007bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c00:	d205      	bcs.n	8007c0e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	60da      	str	r2, [r3, #12]
 8007c0c:	e002      	b.n	8007c14 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c16:	2201      	movs	r2, #1
 8007c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c26:	2200      	movs	r2, #0
 8007c28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007c30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3750      	adds	r7, #80	; 0x50
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c3e:	bf00      	nop
 8007c40:	0800f240 	.word	0x0800f240

08007c44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00a      	beq.n	8007c90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cfa:	f003 0320 	and.w	r3, r3, #32
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d01a      	beq.n	8007d5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d42:	d10a      	bne.n	8007d5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	430a      	orrs	r2, r1
 8007d58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00a      	beq.n	8007d7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	605a      	str	r2, [r3, #4]
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b098      	sub	sp, #96	; 0x60
 8007d8c:	af02      	add	r7, sp, #8
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d98:	f7fa fa50 	bl	800223c <HAL_GetTick>
 8007d9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d12f      	bne.n	8007e0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db4:	2200      	movs	r2, #0
 8007db6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f88e 	bl	8007edc <UART_WaitOnFlagUntilTimeout>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d022      	beq.n	8007e0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dda:	653b      	str	r3, [r7, #80]	; 0x50
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de4:	647b      	str	r3, [r7, #68]	; 0x44
 8007de6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e6      	bne.n	8007dc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e063      	b.n	8007ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d149      	bne.n	8007eae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e22:	2200      	movs	r2, #0
 8007e24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f857 	bl	8007edc <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d03c      	beq.n	8007eae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	623b      	str	r3, [r7, #32]
   return(result);
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e52:	633b      	str	r3, [r7, #48]	; 0x30
 8007e54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e6      	bne.n	8007e34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	3308      	adds	r3, #8
 8007e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e86:	61fa      	str	r2, [r7, #28]
 8007e88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8a:	69b9      	ldr	r1, [r7, #24]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	e841 2300 	strex	r3, r2, [r1]
 8007e92:	617b      	str	r3, [r7, #20]
   return(result);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1e5      	bne.n	8007e66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2220      	movs	r2, #32
 8007e9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e012      	b.n	8007ed4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2220      	movs	r2, #32
 8007eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ed2:	2300      	movs	r3, #0
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3758      	adds	r7, #88	; 0x58
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eec:	e049      	b.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ef4:	d045      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ef6:	f7fa f9a1 	bl	800223c <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d302      	bcc.n	8007f0c <UART_WaitOnFlagUntilTimeout+0x30>
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e048      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0304 	and.w	r3, r3, #4
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d031      	beq.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	69db      	ldr	r3, [r3, #28]
 8007f24:	f003 0308 	and.w	r3, r3, #8
 8007f28:	2b08      	cmp	r3, #8
 8007f2a:	d110      	bne.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2208      	movs	r2, #8
 8007f32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	f000 f838 	bl	8007faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2208      	movs	r2, #8
 8007f3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e029      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	69db      	ldr	r3, [r3, #28]
 8007f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f5c:	d111      	bne.n	8007f82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f000 f81e 	bl	8007faa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	e00f      	b.n	8007fa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69da      	ldr	r2, [r3, #28]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	bf0c      	ite	eq
 8007f92:	2301      	moveq	r3, #1
 8007f94:	2300      	movne	r3, #0
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	461a      	mov	r2, r3
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d0a6      	beq.n	8007eee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3710      	adds	r7, #16
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b095      	sub	sp, #84	; 0x54
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fba:	e853 3f00 	ldrex	r3, [r3]
 8007fbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	461a      	mov	r2, r3
 8007fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8007fd2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd8:	e841 2300 	strex	r3, r2, [r1]
 8007fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1e6      	bne.n	8007fb2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	3308      	adds	r3, #8
 8007fea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	6a3b      	ldr	r3, [r7, #32]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ffa:	f023 0301 	bic.w	r3, r3, #1
 8007ffe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	3308      	adds	r3, #8
 8008006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008008:	62fa      	str	r2, [r7, #44]	; 0x2c
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800800e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008010:	e841 2300 	strex	r3, r2, [r1]
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1e3      	bne.n	8007fe4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008020:	2b01      	cmp	r3, #1
 8008022:	d118      	bne.n	8008056 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	60bb      	str	r3, [r7, #8]
   return(result);
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f023 0310 	bic.w	r3, r3, #16
 8008038:	647b      	str	r3, [r7, #68]	; 0x44
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	461a      	mov	r2, r3
 8008040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008042:	61bb      	str	r3, [r7, #24]
 8008044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008046:	6979      	ldr	r1, [r7, #20]
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	e841 2300 	strex	r3, r2, [r1]
 800804e:	613b      	str	r3, [r7, #16]
   return(result);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d1e6      	bne.n	8008024 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2220      	movs	r2, #32
 800805a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	675a      	str	r2, [r3, #116]	; 0x74
}
 800806a:	bf00      	nop
 800806c:	3754      	adds	r7, #84	; 0x54
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008076:	b480      	push	{r7}
 8008078:	b085      	sub	sp, #20
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_UARTEx_DisableFifoMode+0x16>
 8008088:	2302      	movs	r3, #2
 800808a:	e027      	b.n	80080dc <HAL_UARTEx_DisableFifoMode+0x66>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2224      	movs	r2, #36	; 0x24
 8008098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80080ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3714      	adds	r7, #20
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080fc:	2302      	movs	r3, #2
 80080fe:	e02d      	b.n	800815c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2224      	movs	r2, #36	; 0x24
 800810c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f022 0201 	bic.w	r2, r2, #1
 8008126:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	683a      	ldr	r2, [r7, #0]
 8008138:	430a      	orrs	r2, r1
 800813a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f84f 	bl	80081e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	3710      	adds	r7, #16
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008174:	2b01      	cmp	r3, #1
 8008176:	d101      	bne.n	800817c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008178:	2302      	movs	r3, #2
 800817a:	e02d      	b.n	80081d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f000 f811 	bl	80081e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d108      	bne.n	8008202 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008200:	e031      	b.n	8008266 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008202:	2308      	movs	r3, #8
 8008204:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008206:	2308      	movs	r3, #8
 8008208:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	0e5b      	lsrs	r3, r3, #25
 8008212:	b2db      	uxtb	r3, r3
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	0f5b      	lsrs	r3, r3, #29
 8008222:	b2db      	uxtb	r3, r3
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	7b3a      	ldrb	r2, [r7, #12]
 800822e:	4911      	ldr	r1, [pc, #68]	; (8008274 <UARTEx_SetNbDataToProcess+0x94>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
 8008232:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008236:	7b3a      	ldrb	r2, [r7, #12]
 8008238:	490f      	ldr	r1, [pc, #60]	; (8008278 <UARTEx_SetNbDataToProcess+0x98>)
 800823a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800823c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008240:	b29a      	uxth	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	7b7a      	ldrb	r2, [r7, #13]
 800824c:	4909      	ldr	r1, [pc, #36]	; (8008274 <UARTEx_SetNbDataToProcess+0x94>)
 800824e:	5c8a      	ldrb	r2, [r1, r2]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008254:	7b7a      	ldrb	r2, [r7, #13]
 8008256:	4908      	ldr	r1, [pc, #32]	; (8008278 <UARTEx_SetNbDataToProcess+0x98>)
 8008258:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800825a:	fb93 f3f2 	sdiv	r3, r3, r2
 800825e:	b29a      	uxth	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008266:	bf00      	nop
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	0800f258 	.word	0x0800f258
 8008278:	0800f260 	.word	0x0800f260

0800827c <ism330dhcx_read_reg>:
  *
  */
int32_t __weak ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	461a      	mov	r2, r3
 8008288:	460b      	mov	r3, r1
 800828a:	72fb      	strb	r3, [r7, #11]
 800828c:	4613      	mov	r3, r2
 800828e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685c      	ldr	r4, [r3, #4]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	68d8      	ldr	r0, [r3, #12]
 8008298:	893b      	ldrh	r3, [r7, #8]
 800829a:	7af9      	ldrb	r1, [r7, #11]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	47a0      	blx	r4
 80082a0:	6178      	str	r0, [r7, #20]

  return ret;
 80082a2:	697b      	ldr	r3, [r7, #20]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	371c      	adds	r7, #28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd90      	pop	{r4, r7, pc}

080082ac <ism330dhcx_write_reg>:
  *
  */
int32_t __weak ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	461a      	mov	r2, r3
 80082b8:	460b      	mov	r3, r1
 80082ba:	72fb      	strb	r3, [r7, #11]
 80082bc:	4613      	mov	r3, r2
 80082be:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681c      	ldr	r4, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	68d8      	ldr	r0, [r3, #12]
 80082c8:	893b      	ldrh	r3, [r7, #8]
 80082ca:	7af9      	ldrb	r1, [r7, #11]
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	47a0      	blx	r4
 80082d0:	6178      	str	r0, [r7, #20]

  return ret;
 80082d2:	697b      	ldr	r3, [r7, #20]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	371c      	adds	r7, #28
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd90      	pop	{r4, r7, pc}

080082dc <ism330dhcx_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dhcx_from_fs2g_to_mg(int16_t lsb)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 80082e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8008308 <ism330dhcx_from_fs2g_to_mg+0x2c>
 80082f6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80082fa:	eeb0 0a67 	vmov.f32	s0, s15
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	3d79db23 	.word	0x3d79db23

0800830c <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	460b      	mov	r3, r1
 8008316:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8008318:	f107 0208 	add.w	r2, r7, #8
 800831c:	2301      	movs	r3, #1
 800831e:	2110      	movs	r1, #16
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ffab 	bl	800827c <ism330dhcx_read_reg>
 8008326:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10f      	bne.n	800834e <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 800832e:	78fb      	ldrb	r3, [r7, #3]
 8008330:	f003 0303 	and.w	r3, r3, #3
 8008334:	b2da      	uxtb	r2, r3
 8008336:	7a3b      	ldrb	r3, [r7, #8]
 8008338:	f362 0383 	bfi	r3, r2, #2, #2
 800833c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800833e:	f107 0208 	add.w	r2, r7, #8
 8008342:	2301      	movs	r3, #1
 8008344:	2110      	movs	r1, #16
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff ffb0 	bl	80082ac <ism330dhcx_write_reg>
 800834c:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800834e:	68fb      	ldr	r3, [r7, #12]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8008364:	78fb      	ldrb	r3, [r7, #3]
 8008366:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8008368:	f107 030c 	add.w	r3, r7, #12
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fad0 	bl	8008914 <ism330dhcx_fsm_enable_get>
 8008374:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 80c4 	bne.w	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800837e:	7b3b      	ldrb	r3, [r7, #12]
 8008380:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008384:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8008386:	7b3b      	ldrb	r3, [r7, #12]
 8008388:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800838c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800838e:	4313      	orrs	r3, r2
 8008390:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8008392:	7b3b      	ldrb	r3, [r7, #12]
 8008394:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008398:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800839a:	4313      	orrs	r3, r2
 800839c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800839e:	7b3b      	ldrb	r3, [r7, #12]
 80083a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80083a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80083a6:	4313      	orrs	r3, r2
 80083a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80083aa:	7b3b      	ldrb	r3, [r7, #12]
 80083ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80083b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80083b2:	4313      	orrs	r3, r2
 80083b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80083b6:	7b3b      	ldrb	r3, [r7, #12]
 80083b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80083bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80083be:	4313      	orrs	r3, r2
 80083c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80083c2:	7b3b      	ldrb	r3, [r7, #12]
 80083c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80083c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80083ca:	4313      	orrs	r3, r2
 80083cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80083ce:	7b3b      	ldrb	r3, [r7, #12]
 80083d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80083d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80083d6:	4313      	orrs	r3, r2
 80083d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80083da:	7b7b      	ldrb	r3, [r7, #13]
 80083dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80083e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80083e2:	4313      	orrs	r3, r2
 80083e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80083e6:	7b7b      	ldrb	r3, [r7, #13]
 80083e8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80083ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80083ee:	4313      	orrs	r3, r2
 80083f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80083f2:	7b7b      	ldrb	r3, [r7, #13]
 80083f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80083f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80083fa:	4313      	orrs	r3, r2
 80083fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80083fe:	7b7b      	ldrb	r3, [r7, #13]
 8008400:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8008406:	4313      	orrs	r3, r2
 8008408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800840a:	7b7b      	ldrb	r3, [r7, #13]
 800840c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008410:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8008412:	4313      	orrs	r3, r2
 8008414:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8008416:	7b7b      	ldrb	r3, [r7, #13]
 8008418:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800841c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800841e:	4313      	orrs	r3, r2
 8008420:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008422:	7b7b      	ldrb	r3, [r7, #13]
 8008424:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8008428:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800842a:	4313      	orrs	r3, r2
 800842c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800842e:	7b7b      	ldrb	r3, [r7, #13]
 8008430:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8008434:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8008436:	4313      	orrs	r3, r2
 8008438:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800843a:	2b01      	cmp	r3, #1
 800843c:	d163      	bne.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800843e:	f107 030b 	add.w	r3, r7, #11
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa91 	bl	800896c <ism330dhcx_fsm_data_rate_get>
 800844a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d159      	bne.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b03      	cmp	r3, #3
 8008456:	d853      	bhi.n	8008500 <ism330dhcx_xl_data_rate_set+0x1a8>
 8008458:	a201      	add	r2, pc, #4	; (adr r2, 8008460 <ism330dhcx_xl_data_rate_set+0x108>)
 800845a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845e:	bf00      	nop
 8008460:	08008471 	.word	0x08008471
 8008464:	08008483 	.word	0x08008483
 8008468:	080084a1 	.word	0x080084a1
 800846c:	080084cb 	.word	0x080084cb
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8008476:	2301      	movs	r3, #1
 8008478:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800847a:	e044      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800847c:	78fb      	ldrb	r3, [r7, #3]
 800847e:	75fb      	strb	r3, [r7, #23]
            break;
 8008480:	e041      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8008482:	78fb      	ldrb	r3, [r7, #3]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d102      	bne.n	800848e <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8008488:	2302      	movs	r3, #2
 800848a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800848c:	e03b      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800848e:	78fb      	ldrb	r3, [r7, #3]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d102      	bne.n	800849a <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8008494:	2302      	movs	r3, #2
 8008496:	75fb      	strb	r3, [r7, #23]
            break;
 8008498:	e035      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	75fb      	strb	r3, [r7, #23]
            break;
 800849e:	e032      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80084a0:	78fb      	ldrb	r3, [r7, #3]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80084a6:	2303      	movs	r3, #3
 80084a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80084aa:	e02c      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d102      	bne.n	80084b8 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80084b2:	2303      	movs	r3, #3
 80084b4:	75fb      	strb	r3, [r7, #23]
            break;
 80084b6:	e026      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d102      	bne.n	80084c4 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80084be:	2303      	movs	r3, #3
 80084c0:	75fb      	strb	r3, [r7, #23]
            break;
 80084c2:	e020      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80084c4:	78fb      	ldrb	r3, [r7, #3]
 80084c6:	75fb      	strb	r3, [r7, #23]
            break;
 80084c8:	e01d      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80084d0:	2304      	movs	r3, #4
 80084d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80084d4:	e017      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80084d6:	78fb      	ldrb	r3, [r7, #3]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d102      	bne.n	80084e2 <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80084dc:	2304      	movs	r3, #4
 80084de:	75fb      	strb	r3, [r7, #23]
            break;
 80084e0:	e011      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d102      	bne.n	80084ee <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80084e8:	2304      	movs	r3, #4
 80084ea:	75fb      	strb	r3, [r7, #23]
            break;
 80084ec:	e00b      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d102      	bne.n	80084fa <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80084f4:	2304      	movs	r3, #4
 80084f6:	75fb      	strb	r3, [r7, #23]
            break;
 80084f8:	e005      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>
              odr_xl = val;
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	75fb      	strb	r3, [r7, #23]
            break;
 80084fe:	e002      	b.n	8008506 <ism330dhcx_xl_data_rate_set+0x1ae>

          default:
            odr_xl = val;
 8008500:	78fb      	ldrb	r3, [r7, #3]
 8008502:	75fb      	strb	r3, [r7, #23]
            break;
 8008504:	bf00      	nop
      }
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 8008506:	2300      	movs	r3, #0
 8008508:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d16c      	bne.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 8008510:	f107 030a 	add.w	r3, r7, #10
 8008514:	4619      	mov	r1, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa70 	bl	80089fc <ism330dhcx_mlc_get>
 800851c:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 800851e:	7abb      	ldrb	r3, [r7, #10]
 8008520:	2b01      	cmp	r3, #1
 8008522:	d162      	bne.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 8008524:	f107 0309 	add.w	r3, r7, #9
 8008528:	4619      	mov	r1, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fa90 	bl	8008a50 <ism330dhcx_mlc_data_rate_get>
 8008530:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d158      	bne.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
      {
        switch (mlc_odr)
 8008538:	7a7b      	ldrb	r3, [r7, #9]
 800853a:	2b03      	cmp	r3, #3
 800853c:	d852      	bhi.n	80085e4 <ism330dhcx_xl_data_rate_set+0x28c>
 800853e:	a201      	add	r2, pc, #4	; (adr r2, 8008544 <ism330dhcx_xl_data_rate_set+0x1ec>)
 8008540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008544:	08008555 	.word	0x08008555
 8008548:	08008567 	.word	0x08008567
 800854c:	08008585 	.word	0x08008585
 8008550:	080085af 	.word	0x080085af
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d102      	bne.n	8008560 <ism330dhcx_xl_data_rate_set+0x208>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800855a:	2301      	movs	r3, #1
 800855c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800855e:	e044      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 8008560:	78fb      	ldrb	r3, [r7, #3]
 8008562:	75fb      	strb	r3, [r7, #23]
            break;
 8008564:	e041      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8008566:	78fb      	ldrb	r3, [r7, #3]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <ism330dhcx_xl_data_rate_set+0x21a>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800856c:	2302      	movs	r3, #2
 800856e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8008570:	e03b      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d102      	bne.n	800857e <ism330dhcx_xl_data_rate_set+0x226>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8008578:	2302      	movs	r3, #2
 800857a:	75fb      	strb	r3, [r7, #23]
            break;
 800857c:	e035      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 800857e:	78fb      	ldrb	r3, [r7, #3]
 8008580:	75fb      	strb	r3, [r7, #23]
            break;
 8008582:	e032      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8008584:	78fb      	ldrb	r3, [r7, #3]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d102      	bne.n	8008590 <ism330dhcx_xl_data_rate_set+0x238>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800858a:	2303      	movs	r3, #3
 800858c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800858e:	e02c      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8008590:	78fb      	ldrb	r3, [r7, #3]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d102      	bne.n	800859c <ism330dhcx_xl_data_rate_set+0x244>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8008596:	2303      	movs	r3, #3
 8008598:	75fb      	strb	r3, [r7, #23]
            break;
 800859a:	e026      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d102      	bne.n	80085a8 <ism330dhcx_xl_data_rate_set+0x250>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 80085a2:	2303      	movs	r3, #3
 80085a4:	75fb      	strb	r3, [r7, #23]
            break;
 80085a6:	e020      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	75fb      	strb	r3, [r7, #23]
            break;
 80085ac:	e01d      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d102      	bne.n	80085ba <ism330dhcx_xl_data_rate_set+0x262>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80085b4:	2304      	movs	r3, #4
 80085b6:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80085b8:	e017      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d102      	bne.n	80085c6 <ism330dhcx_xl_data_rate_set+0x26e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80085c0:	2304      	movs	r3, #4
 80085c2:	75fb      	strb	r3, [r7, #23]
            break;
 80085c4:	e011      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d102      	bne.n	80085d2 <ism330dhcx_xl_data_rate_set+0x27a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80085cc:	2304      	movs	r3, #4
 80085ce:	75fb      	strb	r3, [r7, #23]
            break;
 80085d0:	e00b      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d102      	bne.n	80085de <ism330dhcx_xl_data_rate_set+0x286>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80085d8:	2304      	movs	r3, #4
 80085da:	75fb      	strb	r3, [r7, #23]
            break;
 80085dc:	e005      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>
              odr_xl = val;
 80085de:	78fb      	ldrb	r3, [r7, #3]
 80085e0:	75fb      	strb	r3, [r7, #23]
            break;
 80085e2:	e002      	b.n	80085ea <ism330dhcx_xl_data_rate_set+0x292>

          default:
            odr_xl = val;
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	75fb      	strb	r3, [r7, #23]
            break;
 80085e8:	bf00      	nop
        }
      }
    }
  }

  if (ret == 0)
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d107      	bne.n	8008600 <ism330dhcx_xl_data_rate_set+0x2a8>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80085f0:	f107 0208 	add.w	r2, r7, #8
 80085f4:	2301      	movs	r3, #1
 80085f6:	2110      	movs	r1, #16
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f7ff fe3f 	bl	800827c <ism330dhcx_read_reg>
 80085fe:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10f      	bne.n	8008626 <ism330dhcx_xl_data_rate_set+0x2ce>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8008606:	7dfb      	ldrb	r3, [r7, #23]
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	b2da      	uxtb	r2, r3
 800860e:	7a3b      	ldrb	r3, [r7, #8]
 8008610:	f362 1307 	bfi	r3, r2, #4, #4
 8008614:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 8008616:	f107 0208 	add.w	r2, r7, #8
 800861a:	2301      	movs	r3, #1
 800861c:	2110      	movs	r1, #16
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7ff fe44 	bl	80082ac <ism330dhcx_write_reg>
 8008624:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8008626:	693b      	ldr	r3, [r7, #16]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 800863c:	f107 0208 	add.w	r2, r7, #8
 8008640:	2301      	movs	r3, #1
 8008642:	2118      	movs	r1, #24
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f7ff fe19 	bl	800827c <ism330dhcx_read_reg>
 800864a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10f      	bne.n	8008672 <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	b2da      	uxtb	r2, r3
 800865a:	7a3b      	ldrb	r3, [r7, #8]
 800865c:	f362 0341 	bfi	r3, r2, #1, #1
 8008660:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 8008662:	f107 0208 	add.w	r2, r7, #8
 8008666:	2301      	movs	r3, #1
 8008668:	2118      	movs	r1, #24
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fe1e 	bl	80082ac <ism330dhcx_write_reg>
 8008670:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 8008672:	68fb      	ldr	r3, [r7, #12]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8008688:	f107 0208 	add.w	r2, r7, #8
 800868c:	2301      	movs	r3, #1
 800868e:	2101      	movs	r1, #1
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f7ff fdf3 	bl	800827c <ism330dhcx_read_reg>
 8008696:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10f      	bne.n	80086be <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	f003 0303 	and.w	r3, r3, #3
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	7a3b      	ldrb	r3, [r7, #8]
 80086a8:	f362 1387 	bfi	r3, r2, #6, #2
 80086ac:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 80086ae:	f107 0208 	add.w	r2, r7, #8
 80086b2:	2301      	movs	r3, #1
 80086b4:	2101      	movs	r1, #1
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7ff fdf8 	bl	80082ac <ism330dhcx_write_reg>
 80086bc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80086be:	68fb      	ldr	r3, [r7, #12]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80086d2:	2301      	movs	r3, #1
 80086d4:	683a      	ldr	r2, [r7, #0]
 80086d6:	210f      	movs	r1, #15
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f7ff fdcf 	bl	800827c <ism330dhcx_read_reg>
 80086de:	60f8      	str	r0, [r7, #12]

  return ret;
 80086e0:	68fb      	ldr	r3, [r7, #12]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80086ea:	b580      	push	{r7, lr}
 80086ec:	b084      	sub	sp, #16
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	460b      	mov	r3, r1
 80086f4:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80086f6:	f107 0208 	add.w	r2, r7, #8
 80086fa:	2301      	movs	r3, #1
 80086fc:	2112      	movs	r1, #18
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fdbc 	bl	800827c <ism330dhcx_read_reg>
 8008704:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10f      	bne.n	800872c <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 800870c:	78fb      	ldrb	r3, [r7, #3]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	b2da      	uxtb	r2, r3
 8008714:	7a3b      	ldrb	r3, [r7, #8]
 8008716:	f362 0300 	bfi	r3, r2, #0, #1
 800871a:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 800871c:	f107 0208 	add.w	r2, r7, #8
 8008720:	2301      	movs	r3, #1
 8008722:	2112      	movs	r1, #18
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f7ff fdc1 	bl	80082ac <ism330dhcx_write_reg>
 800872a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 800872c:	68fb      	ldr	r3, [r7, #12]
}
 800872e:	4618      	mov	r0, r3
 8008730:	3710      	adds	r7, #16
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b084      	sub	sp, #16
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8008740:	f107 0208 	add.w	r2, r7, #8
 8008744:	2301      	movs	r3, #1
 8008746:	2112      	movs	r1, #18
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fd97 	bl	800827c <ism330dhcx_read_reg>
 800874e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8008750:	7a3b      	ldrb	r3, [r7, #8]
 8008752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008756:	b2db      	uxtb	r3, r3
 8008758:	461a      	mov	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	701a      	strb	r2, [r3, #0]

  return ret;
 800875e:	68fb      	ldr	r3, [r7, #12]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <ism330dhcx_fifo_watermark_set>:
  * @param  val    Change the values of wtm in reg FIFO_CTRL1
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	807b      	strh	r3, [r7, #2]
  ism330dhcx_fifo_ctrl1_t fifo_ctrl1;
  ism330dhcx_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 8008774:	f107 020c 	add.w	r2, r7, #12
 8008778:	2301      	movs	r3, #1
 800877a:	2108      	movs	r1, #8
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f7ff fd7d 	bl	800827c <ism330dhcx_read_reg>
 8008782:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_ctrl2, 1);

  if (ret == 0)
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d111      	bne.n	80087ae <ism330dhcx_fifo_watermark_set+0x46>
  {
    fifo_ctrl2.wtm = (uint8_t)(val / 256U) & 0x01U;
 800878a:	887b      	ldrh	r3, [r7, #2]
 800878c:	0a1b      	lsrs	r3, r3, #8
 800878e:	b29b      	uxth	r3, r3
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	b2da      	uxtb	r2, r3
 8008796:	7b3b      	ldrb	r3, [r7, #12]
 8008798:	f362 0300 	bfi	r3, r2, #0, #1
 800879c:	733b      	strb	r3, [r7, #12]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL2,
 800879e:	f107 020c 	add.w	r2, r7, #12
 80087a2:	2301      	movs	r3, #1
 80087a4:	2108      	movs	r1, #8
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff fd80 	bl	80082ac <ism330dhcx_write_reg>
 80087ac:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl2, 1);
  }

  if (ret == 0)
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <ism330dhcx_fifo_watermark_set+0x62>
  {
    fifo_ctrl1.wtm = (uint8_t)(val - (fifo_ctrl2.wtm * 256U));
 80087b4:	887b      	ldrh	r3, [r7, #2]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	743b      	strb	r3, [r7, #16]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL1,
 80087ba:	f107 0210 	add.w	r2, r7, #16
 80087be:	2301      	movs	r3, #1
 80087c0:	2107      	movs	r1, #7
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f7ff fd72 	bl	80082ac <ism330dhcx_write_reg>
 80087c8:	6178      	str	r0, [r7, #20]
                               (uint8_t *)&fifo_ctrl1, 1);
  }

  return ret;
 80087ca:	697b      	ldr	r3, [r7, #20]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3718      	adds	r7, #24
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <ism330dhcx_fifo_xl_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_xl_t val)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 80087e0:	f107 0208 	add.w	r2, r7, #8
 80087e4:	2301      	movs	r3, #1
 80087e6:	2109      	movs	r1, #9
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff fd47 	bl	800827c <ism330dhcx_read_reg>
 80087ee:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d10f      	bne.n	8008816 <ism330dhcx_fifo_xl_batch_set+0x42>
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	b2da      	uxtb	r2, r3
 80087fe:	7a3b      	ldrb	r3, [r7, #8]
 8008800:	f362 0303 	bfi	r3, r2, #0, #4
 8008804:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8008806:	f107 0208 	add.w	r2, r7, #8
 800880a:	2301      	movs	r3, #1
 800880c:	2109      	movs	r1, #9
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff fd4c 	bl	80082ac <ism330dhcx_write_reg>
 8008814:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8008816:	68fb      	ldr	r3, [r7, #12]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <ism330dhcx_fifo_gy_batch_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_gy_batch_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_bdr_gy_t val)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 800882c:	f107 0208 	add.w	r2, r7, #8
 8008830:	2301      	movs	r3, #1
 8008832:	2109      	movs	r1, #9
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7ff fd21 	bl	800827c <ism330dhcx_read_reg>
 800883a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl3, 1);

  if (ret == 0)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10f      	bne.n	8008862 <ism330dhcx_fifo_gy_batch_set+0x42>
  {
    fifo_ctrl3.bdr_gy = (uint8_t)val;
 8008842:	78fb      	ldrb	r3, [r7, #3]
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	b2da      	uxtb	r2, r3
 800884a:	7a3b      	ldrb	r3, [r7, #8]
 800884c:	f362 1307 	bfi	r3, r2, #4, #4
 8008850:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL3,
 8008852:	f107 0208 	add.w	r2, r7, #8
 8008856:	2301      	movs	r3, #1
 8008858:	2109      	movs	r1, #9
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f7ff fd26 	bl	80082ac <ism330dhcx_write_reg>
 8008860:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl3, 1);
  }

  return ret;
 8008862:	68fb      	ldr	r3, [r7, #12]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <ism330dhcx_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_mode_set(stmdev_ctx_t *ctx,
                                 ism330dhcx_fifo_mode_t val)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 8008878:	f107 0208 	add.w	r2, r7, #8
 800887c:	2301      	movs	r3, #1
 800887e:	210a      	movs	r1, #10
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fcfb 	bl	800827c <ism330dhcx_read_reg>
 8008886:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl4, 1);

  if (ret == 0)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10f      	bne.n	80088ae <ism330dhcx_fifo_mode_set+0x42>
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
 800888e:	78fb      	ldrb	r3, [r7, #3]
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	b2da      	uxtb	r2, r3
 8008896:	7a3b      	ldrb	r3, [r7, #8]
 8008898:	f362 0302 	bfi	r3, r2, #0, #3
 800889c:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FIFO_CTRL4,
 800889e:	f107 0208 	add.w	r2, r7, #8
 80088a2:	2301      	movs	r3, #1
 80088a4:	210a      	movs	r1, #10
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fd00 	bl	80082ac <ism330dhcx_write_reg>
 80088ac:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&fifo_ctrl4, 1);
  }

  return ret;
 80088ae:	68fb      	ldr	r3, [r7, #12]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <ism330dhcx_fifo_data_level_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fifo_data_level_get(stmdev_ctx_t *ctx,
                                       uint16_t *val)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b086      	sub	sp, #24
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  ism330dhcx_fifo_status1_t fifo_status1;
  ism330dhcx_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS1,
 80088c2:	f107 0210 	add.w	r2, r7, #16
 80088c6:	2301      	movs	r3, #1
 80088c8:	213a      	movs	r1, #58	; 0x3a
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff fcd6 	bl	800827c <ism330dhcx_read_reg>
 80088d0:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d118      	bne.n	800890a <ism330dhcx_fifo_data_level_get+0x52>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FIFO_STATUS2,
 80088d8:	f107 020c 	add.w	r2, r7, #12
 80088dc:	2301      	movs	r3, #1
 80088de:	213b      	movs	r1, #59	; 0x3b
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff fccb 	bl	800827c <ism330dhcx_read_reg>
 80088e6:	6178      	str	r0, [r7, #20]
                              (uint8_t *)&fifo_status2, 1);
    *val = fifo_status2.diff_fifo;
 80088e8:	7b3b      	ldrb	r3, [r7, #12]
 80088ea:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256U) +  fifo_status1.diff_fifo;
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	881b      	ldrh	r3, [r3, #0]
 80088fa:	021b      	lsls	r3, r3, #8
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	7c3b      	ldrb	r3, [r7, #16]
 8008900:	b29b      	uxth	r3, r3
 8008902:	4413      	add	r3, r2
 8008904:	b29a      	uxth	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 800890a:	697b      	ldr	r3, [r7, #20]
}
 800890c:	4618      	mov	r0, r3
 800890e:	3718      	adds	r7, #24
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 800891e:	2102      	movs	r1, #2
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff feab 	bl	800867c <ism330dhcx_mem_bank_set>
 8008926:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 800892e:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 8008930:	2301      	movs	r3, #1
 8008932:	2146      	movs	r1, #70	; 0x46
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fca1 	bl	800827c <ism330dhcx_read_reg>
 800893a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d107      	bne.n	8008952 <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 8008946:	2301      	movs	r3, #1
 8008948:	2147      	movs	r1, #71	; 0x47
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f7ff fc96 	bl	800827c <ism330dhcx_read_reg>
 8008950:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d104      	bne.n	8008962 <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8008958:	2100      	movs	r1, #0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fe8e 	bl	800867c <ism330dhcx_mem_bank_set>
 8008960:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008962:	68fb      	ldr	r3, [r7, #12]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8008976:	2102      	movs	r1, #2
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7ff fe7f 	bl	800867c <ism330dhcx_mem_bank_set>
 800897e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d107      	bne.n	8008996 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8008986:	f107 0208 	add.w	r2, r7, #8
 800898a:	2301      	movs	r3, #1
 800898c:	215f      	movs	r1, #95	; 0x5f
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff fc74 	bl	800827c <ism330dhcx_read_reg>
 8008994:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 800899c:	2100      	movs	r1, #0
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff fe6c 	bl	800867c <ism330dhcx_mem_bank_set>
 80089a4:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 80089a6:	7a3b      	ldrb	r3, [r7, #8]
 80089a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d81a      	bhi.n	80089e8 <ism330dhcx_fsm_data_rate_get+0x7c>
 80089b2:	a201      	add	r2, pc, #4	; (adr r2, 80089b8 <ism330dhcx_fsm_data_rate_get+0x4c>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	080089c9 	.word	0x080089c9
 80089bc:	080089d1 	.word	0x080089d1
 80089c0:	080089d9 	.word	0x080089d9
 80089c4:	080089e1 	.word	0x080089e1
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
      break;
 80089ce:	e00f      	b.n	80089f0 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2201      	movs	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
      break;
 80089d6:	e00b      	b.n	80089f0 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2202      	movs	r2, #2
 80089dc:	701a      	strb	r2, [r3, #0]
      break;
 80089de:	e007      	b.n	80089f0 <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	2203      	movs	r2, #3
 80089e4:	701a      	strb	r2, [r3, #0]
      break;
 80089e6:	e003      	b.n	80089f0 <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	701a      	strb	r2, [r3, #0]
      break;
 80089ee:	bf00      	nop
  }

  return ret;
 80089f0:	68fb      	ldr	r3, [r7, #12]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3710      	adds	r7, #16
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop

080089fc <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8008a06:	2102      	movs	r1, #2
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fe37 	bl	800867c <ism330dhcx_mem_bank_set>
 8008a0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d107      	bne.n	8008a26 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 8008a16:	f107 0208 	add.w	r2, r7, #8
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	2105      	movs	r1, #5
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7ff fc2c 	bl	800827c <ism330dhcx_read_reg>
 8008a24:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10b      	bne.n	8008a44 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7ff fe24 	bl	800867c <ism330dhcx_mem_bank_set>
 8008a34:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 8008a36:	7a3b      	ldrb	r3, [r7, #8]
 8008a38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	461a      	mov	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008a44:	68fb      	ldr	r3, [r7, #12]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8008a5a:	2102      	movs	r1, #2
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff fe0d 	bl	800867c <ism330dhcx_mem_bank_set>
 8008a62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d107      	bne.n	8008a7a <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8008a6a:	f107 0208 	add.w	r2, r7, #8
 8008a6e:	2301      	movs	r3, #1
 8008a70:	2160      	movs	r1, #96	; 0x60
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f7ff fc02 	bl	800827c <ism330dhcx_read_reg>
 8008a78:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d12a      	bne.n	8008ad6 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 8008a80:	7a3b      	ldrb	r3, [r7, #8]
 8008a82:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b03      	cmp	r3, #3
 8008a8a:	d81b      	bhi.n	8008ac4 <ism330dhcx_mlc_data_rate_get+0x74>
 8008a8c:	a201      	add	r2, pc, #4	; (adr r2, 8008a94 <ism330dhcx_mlc_data_rate_get+0x44>)
 8008a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a92:	bf00      	nop
 8008a94:	08008aa5 	.word	0x08008aa5
 8008a98:	08008aad 	.word	0x08008aad
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008abd 	.word	0x08008abd
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	701a      	strb	r2, [r3, #0]
        break;
 8008aaa:	e00f      	b.n	8008acc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	701a      	strb	r2, [r3, #0]
        break;
 8008ab2:	e00b      	b.n	8008acc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	701a      	strb	r2, [r3, #0]
        break;
 8008aba:	e007      	b.n	8008acc <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	2203      	movs	r2, #3
 8008ac0:	701a      	strb	r2, [r3, #0]
        break;
 8008ac2:	e003      	b.n	8008acc <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	701a      	strb	r2, [r3, #0]
        break;
 8008aca:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff fdd4 	bl	800867c <ism330dhcx_mem_bank_set>
 8008ad4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <funchclassifier83.constprop.0>:
 8008ae0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8008b9c <funchclassifier83.constprop.0+0xbc>
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8008ba0 <funchclassifier83.constprop.0+0xc0>
 8008aea:	f04f 0e21 	mov.w	lr, #33	; 0x21
 8008aee:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8008ba4 <funchclassifier83.constprop.0+0xc4>
 8008af2:	f240 1c21 	movw	ip, #289	; 0x121
 8008af6:	ed9f 5a2c 	vldr	s10, [pc, #176]	; 8008ba8 <funchclassifier83.constprop.0+0xc8>
 8008afa:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008bac <funchclassifier83.constprop.0+0xcc>
 8008afe:	eeb0 6a47 	vmov.f32	s12, s14
 8008b02:	4d2b      	ldr	r5, [pc, #172]	; (8008bb0 <funchclassifier83.constprop.0+0xd0>)
 8008b04:	4e2b      	ldr	r6, [pc, #172]	; (8008bb4 <funchclassifier83.constprop.0+0xd4>)
 8008b06:	4c2c      	ldr	r4, [pc, #176]	; (8008bb8 <funchclassifier83.constprop.0+0xd8>)
 8008b08:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008b0c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008b10:	ee17 3a10 	vmov	r3, s14
 8008b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b18:	b299      	uxth	r1, r3
 8008b1a:	ee16 3a90 	vmov	r3, s13
 8008b1e:	b29a      	uxth	r2, r3
 8008b20:	ee17 3a90 	vmov	r3, s15
 8008b24:	4291      	cmp	r1, r2
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	d219      	bcs.n	8008b5e <funchclassifier83.constprop.0+0x7e>
 8008b2a:	ed95 7a00 	vldr	s14, [r5]
 8008b2e:	18c8      	adds	r0, r1, r3
 8008b30:	1a80      	subs	r0, r0, r2
 8008b32:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8008b36:	b280      	uxth	r0, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	ecf1 7a01 	vldmia	r1!, {s15}
 8008b3e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008b42:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8008b46:	edd2 6a00 	vldr	s13, [r2]
 8008b4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	4283      	cmp	r3, r0
 8008b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b58:	d1ee      	bne.n	8008b38 <funchclassifier83.constprop.0+0x58>
 8008b5a:	ed85 7a00 	vstr	s14, [r5]
 8008b5e:	f10e 0201 	add.w	r2, lr, #1
 8008b62:	4562      	cmp	r2, ip
 8008b64:	fa1f f38e 	uxth.w	r3, lr
 8008b68:	f105 0504 	add.w	r5, r5, #4
 8008b6c:	d015      	beq.n	8008b9a <funchclassifier83.constprop.0+0xba>
 8008b6e:	ee07 2a90 	vmov	s15, r2
 8008b72:	f1ae 0140 	sub.w	r1, lr, #64	; 0x40
 8008b76:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008b7a:	ee07 1a10 	vmov	s14, r1
 8008b7e:	ee07 3a90 	vmov	s15, r3
 8008b82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8a:	4696      	mov	lr, r2
 8008b8c:	fe87 7a06 	vmaxnm.f32	s14, s14, s12
 8008b90:	fec6 6ac5 	vminnm.f32	s13, s13, s10
 8008b94:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 8008b98:	e7b6      	b.n	8008b08 <funchclassifier83.constprop.0+0x28>
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	00000000 	.word	0x00000000
 8008ba0:	42000000 	.word	0x42000000
 8008ba4:	42040000 	.word	0x42040000
 8008ba8:	43800000 	.word	0x43800000
 8008bac:	42800000 	.word	0x42800000
 8008bb0:	20001024 	.word	0x20001024
 8008bb4:	20001424 	.word	0x20001424
 8008bb8:	20000f20 	.word	0x20000f20

08008bbc <funchclassifier84.constprop.2>:
 8008bbc:	b538      	push	{r3, r4, r5, lr}
 8008bbe:	4b7f      	ldr	r3, [pc, #508]	; (8008dbc <funchclassifier84.constprop.2+0x200>)
 8008bc0:	ed2d 8b0a 	vpush	{d8-d12}
 8008bc4:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8008bc8:	ecb3 8a01 	vldmia	r3!, {s16}
 8008bcc:	ecf3 7a01 	vldmia	r3!, {s15}
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	ee38 8a27 	vadd.f32	s16, s16, s15
 8008bd6:	d1f9      	bne.n	8008bcc <funchclassifier84.constprop.2+0x10>
 8008bd8:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8008dc0 <funchclassifier84.constprop.2+0x204>
 8008bdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008be0:	eddf 7a78 	vldr	s15, [pc, #480]	; 8008dc4 <funchclassifier84.constprop.2+0x208>
 8008be4:	2802      	cmp	r0, #2
 8008be6:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008bea:	ee80 9a27 	vdiv.f32	s18, s0, s15
 8008bee:	d14b      	bne.n	8008c88 <funchclassifier84.constprop.2+0xcc>
 8008bf0:	ee80 aaa7 	vdiv.f32	s20, s1, s15
 8008bf4:	2400      	movs	r4, #0
 8008bf6:	ed9f ca74 	vldr	s24, [pc, #464]	; 8008dc8 <funchclassifier84.constprop.2+0x20c>
 8008bfa:	eddf aa74 	vldr	s21, [pc, #464]	; 8008dcc <funchclassifier84.constprop.2+0x210>
 8008bfe:	ed9f ba74 	vldr	s22, [pc, #464]	; 8008dd0 <funchclassifier84.constprop.2+0x214>
 8008c02:	eddf ba74 	vldr	s23, [pc, #464]	; 8008dd4 <funchclassifier84.constprop.2+0x218>
 8008c06:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8008c0a:	4d73      	ldr	r5, [pc, #460]	; (8008dd8 <funchclassifier84.constprop.2+0x21c>)
 8008c0c:	e026      	b.n	8008c5c <funchclassifier84.constprop.2+0xa0>
 8008c0e:	ee60 9a0b 	vmul.f32	s19, s0, s22
 8008c12:	eeb0 0a69 	vmov.f32	s0, s19
 8008c16:	f005 f8ab 	bl	800dd70 <sinf>
 8008c1a:	eec0 7a29 	vdiv.f32	s15, s0, s19
 8008c1e:	ee67 9a8a 	vmul.f32	s19, s15, s20
 8008c22:	ee29 0a28 	vmul.f32	s0, s18, s17
 8008c26:	eeb4 0aea 	vcmpe.f32	s0, s21
 8008c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c2e:	dd04      	ble.n	8008c3a <funchclassifier84.constprop.2+0x7e>
 8008c30:	eeb4 0aeb 	vcmpe.f32	s0, s23
 8008c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c38:	d476      	bmi.n	8008d28 <funchclassifier84.constprop.2+0x16c>
 8008c3a:	ee60 8a0b 	vmul.f32	s17, s0, s22
 8008c3e:	eeb0 0a68 	vmov.f32	s0, s17
 8008c42:	f005 f895 	bl	800dd70 <sinf>
 8008c46:	eec0 7a28 	vdiv.f32	s15, s0, s17
 8008c4a:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008c4e:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8008c52:	3401      	adds	r4, #1
 8008c54:	2c41      	cmp	r4, #65	; 0x41
 8008c56:	ece5 9a01 	vstmia	r5!, {s19}
 8008c5a:	d05d      	beq.n	8008d18 <funchclassifier84.constprop.2+0x15c>
 8008c5c:	b2a3      	uxth	r3, r4
 8008c5e:	ee00 3a10 	vmov	s0, r3
 8008c62:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8008c66:	ee70 8a4c 	vsub.f32	s17, s0, s24
 8008c6a:	ee2a 0a28 	vmul.f32	s0, s20, s17
 8008c6e:	eeb4 0aea 	vcmpe.f32	s0, s21
 8008c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c76:	ddca      	ble.n	8008c0e <funchclassifier84.constprop.2+0x52>
 8008c78:	eeb4 0aeb 	vcmpe.f32	s0, s23
 8008c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c80:	d5c5      	bpl.n	8008c0e <funchclassifier84.constprop.2+0x52>
 8008c82:	eef0 9a4a 	vmov.f32	s19, s20
 8008c86:	e7cc      	b.n	8008c22 <funchclassifier84.constprop.2+0x66>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	d150      	bne.n	8008d2e <funchclassifier84.constprop.2+0x172>
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	ed9f aa4e 	vldr	s20, [pc, #312]	; 8008dc8 <funchclassifier84.constprop.2+0x20c>
 8008c92:	eddf 9a4e 	vldr	s19, [pc, #312]	; 8008dcc <funchclassifier84.constprop.2+0x210>
 8008c96:	eddf aa4e 	vldr	s21, [pc, #312]	; 8008dd0 <funchclassifier84.constprop.2+0x214>
 8008c9a:	ed9f ba4e 	vldr	s22, [pc, #312]	; 8008dd4 <funchclassifier84.constprop.2+0x218>
 8008c9e:	4d4e      	ldr	r5, [pc, #312]	; (8008dd8 <funchclassifier84.constprop.2+0x21c>)
 8008ca0:	e00e      	b.n	8008cc0 <funchclassifier84.constprop.2+0x104>
 8008ca2:	ee60 8a2a 	vmul.f32	s17, s0, s21
 8008ca6:	eeb0 0a68 	vmov.f32	s0, s17
 8008caa:	f005 f861 	bl	800dd70 <sinf>
 8008cae:	eec0 7a28 	vdiv.f32	s15, s0, s17
 8008cb2:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008cb6:	3401      	adds	r4, #1
 8008cb8:	2c41      	cmp	r4, #65	; 0x41
 8008cba:	ece5 7a01 	vstmia	r5!, {s15}
 8008cbe:	d019      	beq.n	8008cf4 <funchclassifier84.constprop.2+0x138>
 8008cc0:	b2a3      	uxth	r3, r4
 8008cc2:	ee00 3a10 	vmov	s0, r3
 8008cc6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8008cca:	ee30 0a4a 	vsub.f32	s0, s0, s20
 8008cce:	ee20 0a09 	vmul.f32	s0, s0, s18
 8008cd2:	eeb4 0ae9 	vcmpe.f32	s0, s19
 8008cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cda:	dde2      	ble.n	8008ca2 <funchclassifier84.constprop.2+0xe6>
 8008cdc:	eeb4 0acb 	vcmpe.f32	s0, s22
 8008ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce4:	d5dd      	bpl.n	8008ca2 <funchclassifier84.constprop.2+0xe6>
 8008ce6:	eef0 7a49 	vmov.f32	s15, s18
 8008cea:	3401      	adds	r4, #1
 8008cec:	2c41      	cmp	r4, #65	; 0x41
 8008cee:	ece5 7a01 	vstmia	r5!, {s15}
 8008cf2:	d1e5      	bne.n	8008cc0 <funchclassifier84.constprop.2+0x104>
 8008cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8008cf8:	f7ff fef2 	bl	8008ae0 <funchclassifier83.constprop.0>
 8008cfc:	4b37      	ldr	r3, [pc, #220]	; (8008ddc <funchclassifier84.constprop.2+0x220>)
 8008cfe:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8008d02:	edd3 7a00 	vldr	s15, [r3]
 8008d06:	ee78 7a27 	vadd.f32	s15, s16, s15
 8008d0a:	ece3 7a01 	vstmia	r3!, {s15}
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d1f7      	bne.n	8008d02 <funchclassifier84.constprop.2+0x146>
 8008d12:	ecbd 8b0a 	vpop	{d8-d12}
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	eeb0 0a48 	vmov.f32	s0, s16
 8008d1c:	ecbd 8b0a 	vpop	{d8-d12}
 8008d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d24:	f7ff bedc 	b.w	8008ae0 <funchclassifier83.constprop.0>
 8008d28:	eef0 7a49 	vmov.f32	s15, s18
 8008d2c:	e78f      	b.n	8008c4e <funchclassifier84.constprop.2+0x92>
 8008d2e:	2400      	movs	r4, #0
 8008d30:	ed9f ca25 	vldr	s24, [pc, #148]	; 8008dc8 <funchclassifier84.constprop.2+0x20c>
 8008d34:	eddf aa25 	vldr	s21, [pc, #148]	; 8008dcc <funchclassifier84.constprop.2+0x210>
 8008d38:	ed9f ba25 	vldr	s22, [pc, #148]	; 8008dd0 <funchclassifier84.constprop.2+0x214>
 8008d3c:	eddf ba25 	vldr	s23, [pc, #148]	; 8008dd4 <funchclassifier84.constprop.2+0x218>
 8008d40:	4d25      	ldr	r5, [pc, #148]	; (8008dd8 <funchclassifier84.constprop.2+0x21c>)
 8008d42:	e024      	b.n	8008d8e <funchclassifier84.constprop.2+0x1d2>
 8008d44:	ee28 aa8b 	vmul.f32	s20, s17, s22
 8008d48:	eeb0 0a4a 	vmov.f32	s0, s20
 8008d4c:	f005 f810 	bl	800dd70 <sinf>
 8008d50:	eec0 9a0a 	vdiv.f32	s19, s0, s20
 8008d54:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008d58:	eef4 8aea 	vcmpe.f32	s17, s21
 8008d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d60:	dd04      	ble.n	8008d6c <funchclassifier84.constprop.2+0x1b0>
 8008d62:	eef4 8aeb 	vcmpe.f32	s17, s23
 8008d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6a:	d424      	bmi.n	8008db6 <funchclassifier84.constprop.2+0x1fa>
 8008d6c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008d70:	eeb0 0a68 	vmov.f32	s0, s17
 8008d74:	f004 fffc 	bl	800dd70 <sinf>
 8008d78:	eec0 7a28 	vdiv.f32	s15, s0, s17
 8008d7c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8008d80:	ee79 9ae7 	vsub.f32	s19, s19, s15
 8008d84:	3401      	adds	r4, #1
 8008d86:	2c41      	cmp	r4, #65	; 0x41
 8008d88:	ece5 9a01 	vstmia	r5!, {s19}
 8008d8c:	d0c4      	beq.n	8008d18 <funchclassifier84.constprop.2+0x15c>
 8008d8e:	b2a3      	uxth	r3, r4
 8008d90:	ee08 3a90 	vmov	s17, r3
 8008d94:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8008d98:	ee78 8acc 	vsub.f32	s17, s17, s24
 8008d9c:	eef4 8aea 	vcmpe.f32	s17, s21
 8008da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da4:	ddce      	ble.n	8008d44 <funchclassifier84.constprop.2+0x188>
 8008da6:	eef4 8aeb 	vcmpe.f32	s17, s23
 8008daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dae:	d5c9      	bpl.n	8008d44 <funchclassifier84.constprop.2+0x188>
 8008db0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8008db4:	e7ce      	b.n	8008d54 <funchclassifier84.constprop.2+0x198>
 8008db6:	eef0 7a49 	vmov.f32	s15, s18
 8008dba:	e7e1      	b.n	8008d80 <funchclassifier84.constprop.2+0x1c4>
 8008dbc:	20001424 	.word	0x20001424
 8008dc0:	3b800000 	.word	0x3b800000
 8008dc4:	44504000 	.word	0x44504000
 8008dc8:	42000000 	.word	0x42000000
 8008dcc:	b727c5ac 	.word	0xb727c5ac
 8008dd0:	40490fdb 	.word	0x40490fdb
 8008dd4:	3727c5ac 	.word	0x3727c5ac
 8008dd8:	20000f20 	.word	0x20000f20
 8008ddc:	20001024 	.word	0x20001024

08008de0 <neai_classification_init>:
 8008de0:	4b5b      	ldr	r3, [pc, #364]	; (8008f50 <neai_classification_init+0x170>)
 8008de2:	b430      	push	{r4, r5}
 8008de4:	6018      	str	r0, [r3, #0]
 8008de6:	f200 53bc 	addw	r3, r0, #1468	; 0x5bc
 8008dea:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8008dee:	ed93 7a00 	vldr	s14, [r3]
 8008df2:	eeb4 7a67 	vcmp.f32	s14, s15
 8008df6:	f44f 75b7 	mov.w	r5, #366	; 0x16e
 8008dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dfe:	4c55      	ldr	r4, [pc, #340]	; (8008f54 <neai_classification_init+0x174>)
 8008e00:	4955      	ldr	r1, [pc, #340]	; (8008f58 <neai_classification_init+0x178>)
 8008e02:	4a56      	ldr	r2, [pc, #344]	; (8008f5c <neai_classification_init+0x17c>)
 8008e04:	6025      	str	r5, [r4, #0]
 8008e06:	f500 64b7 	add.w	r4, r0, #1464	; 0x5b8
 8008e0a:	600c      	str	r4, [r1, #0]
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	f040 809a 	bne.w	8008f46 <neai_classification_init+0x166>
 8008e12:	f500 63b8 	add.w	r3, r0, #1472	; 0x5c0
 8008e16:	ed93 7a00 	vldr	s14, [r3]
 8008e1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8008e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e22:	f040 8090 	bne.w	8008f46 <neai_classification_init+0x166>
 8008e26:	f200 53c4 	addw	r3, r0, #1476	; 0x5c4
 8008e2a:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8008f60 <neai_classification_init+0x180>
 8008e2e:	ed93 7a00 	vldr	s14, [r3]
 8008e32:	eeb4 7a67 	vcmp.f32	s14, s15
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	f040 8084 	bne.w	8008f46 <neai_classification_init+0x166>
 8008e3e:	f500 63b9 	add.w	r3, r0, #1480	; 0x5c8
 8008e42:	ed93 7a00 	vldr	s14, [r3]
 8008e46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008e4a:	eeb4 7a67 	vcmp.f32	s14, s15
 8008e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e52:	d178      	bne.n	8008f46 <neai_classification_init+0x166>
 8008e54:	f200 53cc 	addw	r3, r0, #1484	; 0x5cc
 8008e58:	ed93 7a00 	vldr	s14, [r3]
 8008e5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e64:	d16f      	bne.n	8008f46 <neai_classification_init+0x166>
 8008e66:	f500 63ba 	add.w	r3, r0, #1488	; 0x5d0
 8008e6a:	ed93 7a00 	vldr	s14, [r3]
 8008e6e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e76:	d166      	bne.n	8008f46 <neai_classification_init+0x166>
 8008e78:	f200 53d4 	addw	r3, r0, #1492	; 0x5d4
 8008e7c:	ed93 7a00 	vldr	s14, [r3]
 8008e80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e88:	d15d      	bne.n	8008f46 <neai_classification_init+0x166>
 8008e8a:	f500 63bb 	add.w	r3, r0, #1496	; 0x5d8
 8008e8e:	ed93 7a00 	vldr	s14, [r3]
 8008e92:	eeb4 7a67 	vcmp.f32	s14, s15
 8008e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e9a:	d154      	bne.n	8008f46 <neai_classification_init+0x166>
 8008e9c:	f200 53dc 	addw	r3, r0, #1500	; 0x5dc
 8008ea0:	eddf 7a30 	vldr	s15, [pc, #192]	; 8008f64 <neai_classification_init+0x184>
 8008ea4:	ed93 7a00 	vldr	s14, [r3]
 8008ea8:	eeb4 7a67 	vcmp.f32	s14, s15
 8008eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb0:	d149      	bne.n	8008f46 <neai_classification_init+0x166>
 8008eb2:	f500 63bc 	add.w	r3, r0, #1504	; 0x5e0
 8008eb6:	edd3 7a00 	vldr	s15, [r3]
 8008eba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec2:	d140      	bne.n	8008f46 <neai_classification_init+0x166>
 8008ec4:	f200 53e4 	addw	r3, r0, #1508	; 0x5e4
 8008ec8:	edd3 7a00 	vldr	s15, [r3]
 8008ecc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed4:	d137      	bne.n	8008f46 <neai_classification_init+0x166>
 8008ed6:	f500 63bd 	add.w	r3, r0, #1512	; 0x5e8
 8008eda:	ed93 7a00 	vldr	s14, [r3]
 8008ede:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8008ee2:	eeb4 7a67 	vcmp.f32	s14, s15
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	d12c      	bne.n	8008f46 <neai_classification_init+0x166>
 8008eec:	f200 53ec 	addw	r3, r0, #1516	; 0x5ec
 8008ef0:	ed93 7a00 	vldr	s14, [r3]
 8008ef4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008ef8:	eeb4 7a67 	vcmp.f32	s14, s15
 8008efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f00:	d121      	bne.n	8008f46 <neai_classification_init+0x166>
 8008f02:	f500 63be 	add.w	r3, r0, #1520	; 0x5f0
 8008f06:	eddf 7a18 	vldr	s15, [pc, #96]	; 8008f68 <neai_classification_init+0x188>
 8008f0a:	ed93 7a00 	vldr	s14, [r3]
 8008f0e:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f16:	d116      	bne.n	8008f46 <neai_classification_init+0x166>
 8008f18:	f200 53f4 	addw	r3, r0, #1524	; 0x5f4
 8008f1c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8008f6c <neai_classification_init+0x18c>
 8008f20:	ed93 7a00 	vldr	s14, [r3]
 8008f24:	eeb4 7a67 	vcmp.f32	s14, s15
 8008f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f2c:	d10b      	bne.n	8008f46 <neai_classification_init+0x166>
 8008f2e:	f500 60bf 	add.w	r0, r0, #1528	; 0x5f8
 8008f32:	edd0 7a00 	vldr	s15, [r0]
 8008f36:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f3e:	bf14      	ite	ne
 8008f40:	207d      	movne	r0, #125	; 0x7d
 8008f42:	2000      	moveq	r0, #0
 8008f44:	e000      	b.n	8008f48 <neai_classification_init+0x168>
 8008f46:	207d      	movs	r0, #125	; 0x7d
 8008f48:	4b09      	ldr	r3, [pc, #36]	; (8008f70 <neai_classification_init+0x190>)
 8008f4a:	7018      	strb	r0, [r3, #0]
 8008f4c:	bc30      	pop	{r4, r5}
 8008f4e:	4770      	bx	lr
 8008f50:	20000f14 	.word	0x20000f14
 8008f54:	20000f1c 	.word	0x20000f1c
 8008f58:	20000f18 	.word	0x20000f18
 8008f5c:	20000f10 	.word	0x20000f10
 8008f60:	43800000 	.word	0x43800000
 8008f64:	42400000 	.word	0x42400000
 8008f68:	44504000 	.word	0x44504000
 8008f6c:	43d00000 	.word	0x43d00000
 8008f70:	20000019 	.word	0x20000019

08008f74 <neai_classification>:
 8008f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f78:	ed2d 8b0a 	vpush	{d8-d12}
 8008f7c:	4b40      	ldr	r3, [pc, #256]	; (8009080 <neai_classification+0x10c>)
 8008f7e:	b089      	sub	sp, #36	; 0x24
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	9302      	str	r3, [sp, #8]
 8008f84:	b12b      	cbz	r3, 8008f92 <neai_classification+0x1e>
 8008f86:	9802      	ldr	r0, [sp, #8]
 8008f88:	b009      	add	sp, #36	; 0x24
 8008f8a:	ecbd 8b0a 	vpop	{d8-d12}
 8008f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f92:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80090bc <neai_classification+0x148>
 8008f96:	ed9f 8a3b 	vldr	s16, [pc, #236]	; 8009084 <neai_classification+0x110>
 8008f9a:	ed9f aa3b 	vldr	s20, [pc, #236]	; 8009088 <neai_classification+0x114>
 8008f9e:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 800908c <neai_classification+0x118>
 8008fa2:	eddf 8a3b 	vldr	s17, [pc, #236]	; 8009090 <neai_classification+0x11c>
 8008fa6:	eddf 9a3b 	vldr	s19, [pc, #236]	; 8009094 <neai_classification+0x120>
 8008faa:	464d      	mov	r5, r9
 8008fac:	4698      	mov	r8, r3
 8008fae:	46cb      	mov	fp, r9
 8008fb0:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8008fb4:	4c38      	ldr	r4, [pc, #224]	; (8009098 <neai_classification+0x124>)
 8008fb6:	4f39      	ldr	r7, [pc, #228]	; (800909c <neai_classification+0x128>)
 8008fb8:	f8cd 9014 	str.w	r9, [sp, #20]
 8008fbc:	9001      	str	r0, [sp, #4]
 8008fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4836      	ldr	r0, [pc, #216]	; (80090a0 <neai_classification+0x12c>)
 8008fc6:	f001 fac3 	bl	800a550 <memset>
 8008fca:	4a35      	ldr	r2, [pc, #212]	; (80090a0 <neai_classification+0x12c>)
 8008fcc:	9b01      	ldr	r3, [sp, #4]
 8008fce:	4691      	mov	r9, r2
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	eb03 0088 	add.w	r0, r3, r8, lsl #2
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	edd3 7a00 	vldr	s15, [r3]
 8008fdc:	ed91 7a00 	vldr	s14, [r1]
 8008fe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fe8:	ece1 7a01 	vstmia	r1!, {s15}
 8008fec:	428c      	cmp	r4, r1
 8008fee:	f100 000c 	add.w	r0, r0, #12
 8008ff2:	d1f0      	bne.n	8008fd6 <neai_classification+0x62>
 8008ff4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80090a4 <neai_classification+0x130>
 8008ff8:	2100      	movs	r1, #0
 8008ffa:	e007      	b.n	800900c <neai_classification+0x98>
 8008ffc:	eef0 7a48 	vmov.f32	s15, s16
 8009000:	4294      	cmp	r4, r2
 8009002:	ed42 7a01 	vstr	s15, [r2, #-4]
 8009006:	f101 0101 	add.w	r1, r1, #1
 800900a:	d019      	beq.n	8009040 <neai_classification+0xcc>
 800900c:	ecb2 7a01 	vldmia	r2!, {s14}
 8009010:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8009014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009018:	dbf0      	blt.n	8008ffc <neai_classification+0x88>
 800901a:	eef1 7ac7 	vsqrt.f32	s15, s14
 800901e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009026:	daeb      	bge.n	8009000 <neai_classification+0x8c>
 8009028:	ee07 1a90 	vmov	s15, r1
 800902c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009030:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009034:	4294      	cmp	r4, r2
 8009036:	ed42 7a01 	vstr	s15, [r2, #-4]
 800903a:	f101 0101 	add.w	r1, r1, #1
 800903e:	d1e5      	bne.n	800900c <neai_classification+0x98>
 8009040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009044:	2100      	movs	r1, #0
 8009046:	4818      	ldr	r0, [pc, #96]	; (80090a8 <neai_classification+0x134>)
 8009048:	f001 fa82 	bl	800a550 <memset>
 800904c:	4a17      	ldr	r2, [pc, #92]	; (80090ac <neai_classification+0x138>)
 800904e:	edd9 7a00 	vldr	s15, [r9]
 8009052:	4611      	mov	r1, r2
 8009054:	ecb1 7a01 	vldmia	r1!, {s14}
 8009058:	428c      	cmp	r4, r1
 800905a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800905e:	d1f9      	bne.n	8009054 <neai_classification+0xe0>
 8009060:	ee67 aa8a 	vmul.f32	s21, s15, s20
 8009064:	4b12      	ldr	r3, [pc, #72]	; (80090b0 <neai_classification+0x13c>)
 8009066:	ed9f ba13 	vldr	s22, [pc, #76]	; 80090b4 <neai_classification+0x140>
 800906a:	eddf ba13 	vldr	s23, [pc, #76]	; 80090b8 <neai_classification+0x144>
 800906e:	f04f 0a00 	mov.w	sl, #0
 8009072:	461e      	mov	r6, r3
 8009074:	eeb0 ca6a 	vmov.f32	s24, s21
 8009078:	9303      	str	r3, [sp, #12]
 800907a:	9204      	str	r2, [sp, #16]
 800907c:	e031      	b.n	80090e2 <neai_classification+0x16e>
 800907e:	bf00      	nop
 8009080:	20000019 	.word	0x20000019
 8009084:	00000000 	.word	0x00000000
 8009088:	3b800000 	.word	0x3b800000
 800908c:	42000000 	.word	0x42000000
 8009090:	b727c5ac 	.word	0xb727c5ac
 8009094:	40490fdb 	.word	0x40490fdb
 8009098:	20001824 	.word	0x20001824
 800909c:	20001424 	.word	0x20001424
 80090a0:	20001424 	.word	0x20001424
 80090a4:	3b03126f 	.word	0x3b03126f
 80090a8:	20001024 	.word	0x20001024
 80090ac:	20001428 	.word	0x20001428
 80090b0:	20000f20 	.word	0x20000f20
 80090b4:	3f7fb153 	.word	0x3f7fb153
 80090b8:	3727c5ac 	.word	0x3727c5ac
 80090bc:	20001824 	.word	0x20001824
 80090c0:	ee67 aaa9 	vmul.f32	s21, s15, s19
 80090c4:	eeb0 0a6a 	vmov.f32	s0, s21
 80090c8:	f004 fe52 	bl	800dd70 <sinf>
 80090cc:	eec0 7a2a 	vdiv.f32	s15, s0, s21
 80090d0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80090d4:	f10a 0a01 	add.w	sl, sl, #1
 80090d8:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
 80090dc:	ece6 7a01 	vstmia	r6!, {s15}
 80090e0:	d01c      	beq.n	800911c <neai_classification+0x1a8>
 80090e2:	fa1f f38a 	uxth.w	r3, sl
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ee:	ee77 7ac9 	vsub.f32	s15, s15, s18
 80090f2:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80090f6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80090fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fe:	dddf      	ble.n	80090c0 <neai_classification+0x14c>
 8009100:	eef4 7aeb 	vcmpe.f32	s15, s23
 8009104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009108:	d5da      	bpl.n	80090c0 <neai_classification+0x14c>
 800910a:	eef0 7a4b 	vmov.f32	s15, s22
 800910e:	f10a 0a01 	add.w	sl, sl, #1
 8009112:	f1ba 0f41 	cmp.w	sl, #65	; 0x41
 8009116:	ece6 7a01 	vstmia	r6!, {s15}
 800911a:	d1e2      	bne.n	80090e2 <neai_classification+0x16e>
 800911c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 80093f8 <neai_classification+0x484>
 8009120:	eeb0 0a4c 	vmov.f32	s0, s24
 8009124:	f7ff fcdc 	bl	8008ae0 <funchclassifier83.constprop.0>
 8009128:	eef0 aa4c 	vmov.f32	s21, s24
 800912c:	4650      	mov	r0, sl
 800912e:	9a04      	ldr	r2, [sp, #16]
 8009130:	edd0 7a00 	vldr	s15, [r0]
 8009134:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 8009138:	ece0 7a01 	vstmia	r0!, {s15}
 800913c:	4287      	cmp	r7, r0
 800913e:	d1f7      	bne.n	8009130 <neai_classification+0x1bc>
 8009140:	edd9 7a00 	vldr	s15, [r9]
 8009144:	ecb2 7a01 	vldmia	r2!, {s14}
 8009148:	4294      	cmp	r4, r2
 800914a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800914e:	d1f9      	bne.n	8009144 <neai_classification+0x1d0>
 8009150:	ee67 aa8a 	vmul.f32	s21, s15, s20
 8009154:	f04f 0900 	mov.w	r9, #0
 8009158:	9e03      	ldr	r6, [sp, #12]
 800915a:	fa1f f389 	uxth.w	r3, r9
 800915e:	ee07 3a90 	vmov	s15, r3
 8009162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009166:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800916a:	ee67 7a88 	vmul.f32	s15, s15, s16
 800916e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8009172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009176:	f340 811f 	ble.w	80093b8 <neai_classification+0x444>
 800917a:	f109 0901 	add.w	r9, r9, #1
 800917e:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 8009182:	eca6 8a01 	vstmia	r6!, {s16}
 8009186:	d1e8      	bne.n	800915a <neai_classification+0x1e6>
 8009188:	eeb0 0a6a 	vmov.f32	s0, s21
 800918c:	f7ff fca8 	bl	8008ae0 <funchclassifier83.constprop.0>
 8009190:	edda 7a00 	vldr	s15, [sl]
 8009194:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 8009198:	ecea 7a01 	vstmia	sl!, {s15}
 800919c:	4557      	cmp	r7, sl
 800919e:	d1f7      	bne.n	8009190 <neai_classification+0x21c>
 80091a0:	eddf 0a90 	vldr	s1, [pc, #576]	; 80093e4 <neai_classification+0x470>
 80091a4:	eeb0 0a48 	vmov.f32	s0, s16
 80091a8:	2000      	movs	r0, #0
 80091aa:	f7ff fd07 	bl	8008bbc <funchclassifier84.constprop.2>
 80091ae:	eddf 0a8d 	vldr	s1, [pc, #564]	; 80093e4 <neai_classification+0x470>
 80091b2:	2000      	movs	r0, #0
 80091b4:	eeb0 0a48 	vmov.f32	s0, s16
 80091b8:	f7ff fd00 	bl	8008bbc <funchclassifier84.constprop.2>
 80091bc:	4a8a      	ldr	r2, [pc, #552]	; (80093e8 <neai_classification+0x474>)
 80091be:	ed12 4a01 	vldr	s8, [r2, #-4]
 80091c2:	eeb0 7a44 	vmov.f32	s14, s8
 80091c6:	ecf2 7a01 	vldmia	r2!, {s15}
 80091ca:	eef4 7a47 	vcmp.f32	s15, s14
 80091ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d2:	bf48      	it	mi
 80091d4:	eeb0 7a67 	vmovmi.f32	s14, s15
 80091d8:	42ba      	cmp	r2, r7
 80091da:	d1f4      	bne.n	80091c6 <neai_classification+0x252>
 80091dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80091e0:	2200      	movs	r2, #0
 80091e2:	eddf 5a82 	vldr	s11, [pc, #520]	; 80093ec <neai_classification+0x478>
 80091e6:	eddf 4a82 	vldr	s9, [pc, #520]	; 80093f0 <neai_classification+0x47c>
 80091ea:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80091ee:	4659      	mov	r1, fp
 80091f0:	ee37 6a46 	vsub.f32	s12, s14, s12
 80091f4:	4694      	mov	ip, r2
 80091f6:	487f      	ldr	r0, [pc, #508]	; (80093f4 <neai_classification+0x480>)
 80091f8:	4613      	mov	r3, r2
 80091fa:	3201      	adds	r2, #1
 80091fc:	ee07 2a90 	vmov	s15, r2
 8009200:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009204:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8009208:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800920c:	eef4 5ae7 	vcmpe.f32	s11, s15
 8009210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009214:	eca1 6a01 	vstmia	r1!, {s12}
 8009218:	eef0 6a46 	vmov.f32	s13, s12
 800921c:	d815      	bhi.n	800924a <neai_classification+0x2d6>
 800921e:	4e76      	ldr	r6, [pc, #472]	; (80093f8 <neai_classification+0x484>)
 8009220:	f10c 0e01 	add.w	lr, ip, #1
 8009224:	eb06 0c8c 	add.w	ip, r6, ip, lsl #2
 8009228:	eddc 3a00 	vldr	s7, [ip]
 800922c:	fa1f fc8e 	uxth.w	ip, lr
 8009230:	ee05 ca90 	vmov	s11, ip
 8009234:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8009238:	eef4 5ae7 	vcmpe.f32	s11, s15
 800923c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009240:	fec6 6aa3 	vmaxnm.f32	s13, s13, s7
 8009244:	d9eb      	bls.n	800921e <neai_classification+0x2aa>
 8009246:	ed41 6a01 	vstr	s13, [r1, #-4]
 800924a:	eddb 7a00 	vldr	s15, [fp]
 800924e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009256:	bf44      	itt	mi
 8009258:	ed8b 4a00 	vstrmi	s8, [fp]
 800925c:	ed51 6a01 	vldrmi	s13, [r1, #-4]
 8009260:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009268:	d503      	bpl.n	8009272 <neai_classification+0x2fe>
 800926a:	b113      	cbz	r3, 8009272 <neai_classification+0x2fe>
 800926c:	6803      	ldr	r3, [r0, #0]
 800926e:	f841 3c04 	str.w	r3, [r1, #-4]
 8009272:	2a7a      	cmp	r2, #122	; 0x7a
 8009274:	f100 0004 	add.w	r0, r0, #4
 8009278:	d1be      	bne.n	80091f8 <neai_classification+0x284>
 800927a:	f108 0801 	add.w	r8, r8, #1
 800927e:	f1b8 0f03 	cmp.w	r8, #3
 8009282:	f50b 7bf4 	add.w	fp, fp, #488	; 0x1e8
 8009286:	f47f ae9a 	bne.w	8008fbe <neai_classification+0x4a>
 800928a:	e9dd 9a05 	ldrd	r9, sl, [sp, #20]
 800928e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8009292:	4b5a      	ldr	r3, [pc, #360]	; (80093fc <neai_classification+0x488>)
 8009294:	ecf9 7a01 	vldmia	r9!, {s15}
 8009298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800929c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092a0:	bf48      	it	mi
 80092a2:	eef1 7a67 	vnegmi.f32	s15, s15
 80092a6:	454b      	cmp	r3, r9
 80092a8:	ed49 7a01 	vstr	s15, [r9, #-4]
 80092ac:	d1f2      	bne.n	8009294 <neai_classification+0x320>
 80092ae:	4b54      	ldr	r3, [pc, #336]	; (8009400 <neai_classification+0x48c>)
 80092b0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80093ec <neai_classification+0x478>
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	2800      	cmp	r0, #0
 80092b8:	dd12      	ble.n	80092e0 <neai_classification+0x36c>
 80092ba:	2300      	movs	r3, #0
 80092bc:	4a51      	ldr	r2, [pc, #324]	; (8009404 <neai_classification+0x490>)
 80092be:	6814      	ldr	r4, [r2, #0]
 80092c0:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80092c4:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80092c8:	edd1 7a00 	vldr	s15, [r1]
 80092cc:	edd2 6a00 	vldr	s13, [r2]
 80092d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092d4:	3301      	adds	r3, #1
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	4283      	cmp	r3, r0
 80092da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092de:	dbef      	blt.n	80092c0 <neai_classification+0x34c>
 80092e0:	4b49      	ldr	r3, [pc, #292]	; (8009408 <neai_classification+0x494>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	edd3 7a00 	vldr	s15, [r3]
 80092e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80092ec:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	dd73      	ble.n	80093de <neai_classification+0x46a>
 80092f6:	2102      	movs	r1, #2
 80092f8:	f10a 0304 	add.w	r3, sl, #4
 80092fc:	eddf 8a3b 	vldr	s17, [pc, #236]	; 80093ec <neai_classification+0x478>
 8009300:	edca 8a00 	vstr	s17, [sl]
 8009304:	edca 8a01 	vstr	s17, [sl, #4]
 8009308:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800930c:	edd3 7a00 	vldr	s15, [r3]
 8009310:	ee77 7a89 	vadd.f32	s15, s15, s18
 8009314:	edc3 7a00 	vstr	s15, [r3]
 8009318:	ed9a 8a01 	vldr	s16, [sl, #4]
 800931c:	edda 7a00 	vldr	s15, [sl]
 8009320:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009328:	fe38 aa27 	vselgt.f32	s20, s16, s15
 800932c:	eef1 9a04 	vmov.f32	s19, #20	; 0x40a00000  5.0
 8009330:	ee77 7aca 	vsub.f32	s15, s15, s20
 8009334:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8009338:	4a34      	ldr	r2, [pc, #208]	; (800940c <neai_classification+0x498>)
 800933a:	ee17 0a90 	vmov	r0, s15
 800933e:	8011      	strh	r1, [r2, #0]
 8009340:	f7f7 f906 	bl	8000550 <__aeabi_f2d>
 8009344:	ec41 0b10 	vmov	d0, r0, r1
 8009348:	f004 fcca 	bl	800dce0 <exp>
 800934c:	ec51 0b10 	vmov	r0, r1, d0
 8009350:	f7f7 fc4e 	bl	8000bf0 <__aeabi_d2f>
 8009354:	ee78 7a4a 	vsub.f32	s15, s16, s20
 8009358:	ee67 7aa9 	vmul.f32	s15, s15, s19
 800935c:	ee08 0a10 	vmov	s16, r0
 8009360:	ee17 0a90 	vmov	r0, s15
 8009364:	f7f7 f8f4 	bl	8000550 <__aeabi_f2d>
 8009368:	ec41 0b10 	vmov	d0, r0, r1
 800936c:	f004 fcb8 	bl	800dce0 <exp>
 8009370:	ec51 0b10 	vmov	r0, r1, d0
 8009374:	f7f7 fc3c 	bl	8000bf0 <__aeabi_d2f>
 8009378:	ee78 8a28 	vadd.f32	s17, s16, s17
 800937c:	ee07 0a90 	vmov	s15, r0
 8009380:	ee77 8aa8 	vadd.f32	s17, s15, s17
 8009384:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8009388:	ee27 8a08 	vmul.f32	s16, s14, s16
 800938c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009390:	eef4 7ac8 	vcmpe.f32	s15, s16
 8009394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009398:	bfcc      	ite	gt
 800939a:	2301      	movgt	r3, #1
 800939c:	2300      	movle	r3, #0
 800939e:	9802      	ldr	r0, [sp, #8]
 80093a0:	3301      	adds	r3, #1
 80093a2:	ed8a 8a00 	vstr	s16, [sl]
 80093a6:	edca 7a01 	vstr	s15, [sl, #4]
 80093aa:	f8ab 3000 	strh.w	r3, [fp]
 80093ae:	b009      	add	sp, #36	; 0x24
 80093b0:	ecbd 8b0a 	vpop	{d8-d12}
 80093b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b8:	ee27 baa9 	vmul.f32	s22, s15, s19
 80093bc:	eeb0 0a4b 	vmov.f32	s0, s22
 80093c0:	f004 fcd6 	bl	800dd70 <sinf>
 80093c4:	eec0 7a0b 	vdiv.f32	s15, s0, s22
 80093c8:	ee67 7a88 	vmul.f32	s15, s15, s16
 80093cc:	f109 0901 	add.w	r9, r9, #1
 80093d0:	f1b9 0f41 	cmp.w	r9, #65	; 0x41
 80093d4:	ece6 7a01 	vstmia	r6!, {s15}
 80093d8:	f47f aebf 	bne.w	800915a <neai_classification+0x1e6>
 80093dc:	e6d4      	b.n	8009188 <neai_classification+0x214>
 80093de:	4653      	mov	r3, sl
 80093e0:	2101      	movs	r1, #1
 80093e2:	e78b      	b.n	80092fc <neai_classification+0x388>
 80093e4:	43d00000 	.word	0x43d00000
 80093e8:	20001028 	.word	0x20001028
 80093ec:	00000000 	.word	0x00000000
 80093f0:	40064b8a 	.word	0x40064b8a
 80093f4:	20001820 	.word	0x20001820
 80093f8:	20001024 	.word	0x20001024
 80093fc:	20001ddc 	.word	0x20001ddc
 8009400:	20000f1c 	.word	0x20000f1c
 8009404:	20000f14 	.word	0x20000f14
 8009408:	20000f18 	.word	0x20000f18
 800940c:	20000f0c 	.word	0x20000f0c

08009410 <__cvt>:
 8009410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009414:	ec55 4b10 	vmov	r4, r5, d0
 8009418:	2d00      	cmp	r5, #0
 800941a:	460e      	mov	r6, r1
 800941c:	4619      	mov	r1, r3
 800941e:	462b      	mov	r3, r5
 8009420:	bfb4      	ite	lt
 8009422:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009426:	2300      	movge	r3, #0
 8009428:	4691      	mov	r9, r2
 800942a:	bfbf      	itttt	lt
 800942c:	4622      	movlt	r2, r4
 800942e:	461d      	movlt	r5, r3
 8009430:	232d      	movlt	r3, #45	; 0x2d
 8009432:	4614      	movlt	r4, r2
 8009434:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009438:	700b      	strb	r3, [r1, #0]
 800943a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800943c:	f023 0820 	bic.w	r8, r3, #32
 8009440:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009444:	d005      	beq.n	8009452 <__cvt+0x42>
 8009446:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800944a:	d100      	bne.n	800944e <__cvt+0x3e>
 800944c:	3601      	adds	r6, #1
 800944e:	2102      	movs	r1, #2
 8009450:	e000      	b.n	8009454 <__cvt+0x44>
 8009452:	2103      	movs	r1, #3
 8009454:	ab03      	add	r3, sp, #12
 8009456:	4632      	mov	r2, r6
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	ab02      	add	r3, sp, #8
 800945c:	ec45 4b10 	vmov	d0, r4, r5
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	4653      	mov	r3, sl
 8009464:	f001 f998 	bl	800a798 <_dtoa_r>
 8009468:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800946c:	4607      	mov	r7, r0
 800946e:	d102      	bne.n	8009476 <__cvt+0x66>
 8009470:	f019 0f01 	tst.w	r9, #1
 8009474:	d022      	beq.n	80094bc <__cvt+0xac>
 8009476:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800947a:	eb07 0906 	add.w	r9, r7, r6
 800947e:	d110      	bne.n	80094a2 <__cvt+0x92>
 8009480:	783b      	ldrb	r3, [r7, #0]
 8009482:	2b30      	cmp	r3, #48	; 0x30
 8009484:	d10a      	bne.n	800949c <__cvt+0x8c>
 8009486:	2200      	movs	r2, #0
 8009488:	2300      	movs	r3, #0
 800948a:	4620      	mov	r0, r4
 800948c:	4629      	mov	r1, r5
 800948e:	f7f7 fb1f 	bl	8000ad0 <__aeabi_dcmpeq>
 8009492:	b918      	cbnz	r0, 800949c <__cvt+0x8c>
 8009494:	f1c6 0601 	rsb	r6, r6, #1
 8009498:	f8ca 6000 	str.w	r6, [sl]
 800949c:	f8da 3000 	ldr.w	r3, [sl]
 80094a0:	4499      	add	r9, r3
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	4620      	mov	r0, r4
 80094a8:	4629      	mov	r1, r5
 80094aa:	f7f7 fb11 	bl	8000ad0 <__aeabi_dcmpeq>
 80094ae:	b108      	cbz	r0, 80094b4 <__cvt+0xa4>
 80094b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80094b4:	2230      	movs	r2, #48	; 0x30
 80094b6:	9b03      	ldr	r3, [sp, #12]
 80094b8:	454b      	cmp	r3, r9
 80094ba:	d307      	bcc.n	80094cc <__cvt+0xbc>
 80094bc:	9b03      	ldr	r3, [sp, #12]
 80094be:	4638      	mov	r0, r7
 80094c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094c2:	1bdb      	subs	r3, r3, r7
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	b004      	add	sp, #16
 80094c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094cc:	1c59      	adds	r1, r3, #1
 80094ce:	9103      	str	r1, [sp, #12]
 80094d0:	701a      	strb	r2, [r3, #0]
 80094d2:	e7f0      	b.n	80094b6 <__cvt+0xa6>

080094d4 <__exponent>:
 80094d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094d6:	2900      	cmp	r1, #0
 80094d8:	4603      	mov	r3, r0
 80094da:	bfb8      	it	lt
 80094dc:	4249      	neglt	r1, r1
 80094de:	f803 2b02 	strb.w	r2, [r3], #2
 80094e2:	bfb4      	ite	lt
 80094e4:	222d      	movlt	r2, #45	; 0x2d
 80094e6:	222b      	movge	r2, #43	; 0x2b
 80094e8:	2909      	cmp	r1, #9
 80094ea:	7042      	strb	r2, [r0, #1]
 80094ec:	dd29      	ble.n	8009542 <__exponent+0x6e>
 80094ee:	f10d 0207 	add.w	r2, sp, #7
 80094f2:	260a      	movs	r6, #10
 80094f4:	4617      	mov	r7, r2
 80094f6:	4694      	mov	ip, r2
 80094f8:	3a01      	subs	r2, #1
 80094fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80094fe:	fb06 1415 	mls	r4, r6, r5, r1
 8009502:	3430      	adds	r4, #48	; 0x30
 8009504:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009508:	460c      	mov	r4, r1
 800950a:	4629      	mov	r1, r5
 800950c:	2c63      	cmp	r4, #99	; 0x63
 800950e:	dcf2      	bgt.n	80094f6 <__exponent+0x22>
 8009510:	3130      	adds	r1, #48	; 0x30
 8009512:	f1ac 0402 	sub.w	r4, ip, #2
 8009516:	f802 1c01 	strb.w	r1, [r2, #-1]
 800951a:	1c41      	adds	r1, r0, #1
 800951c:	4622      	mov	r2, r4
 800951e:	42ba      	cmp	r2, r7
 8009520:	d30a      	bcc.n	8009538 <__exponent+0x64>
 8009522:	f10d 0209 	add.w	r2, sp, #9
 8009526:	eba2 020c 	sub.w	r2, r2, ip
 800952a:	42bc      	cmp	r4, r7
 800952c:	bf88      	it	hi
 800952e:	2200      	movhi	r2, #0
 8009530:	4413      	add	r3, r2
 8009532:	1a18      	subs	r0, r3, r0
 8009534:	b003      	add	sp, #12
 8009536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009538:	f812 5b01 	ldrb.w	r5, [r2], #1
 800953c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009540:	e7ed      	b.n	800951e <__exponent+0x4a>
 8009542:	2330      	movs	r3, #48	; 0x30
 8009544:	3130      	adds	r1, #48	; 0x30
 8009546:	7083      	strb	r3, [r0, #2]
 8009548:	1d03      	adds	r3, r0, #4
 800954a:	70c1      	strb	r1, [r0, #3]
 800954c:	e7f1      	b.n	8009532 <__exponent+0x5e>
	...

08009550 <_printf_float>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	ed2d 8b02 	vpush	{d8}
 8009558:	b08d      	sub	sp, #52	; 0x34
 800955a:	460c      	mov	r4, r1
 800955c:	4616      	mov	r6, r2
 800955e:	461f      	mov	r7, r3
 8009560:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009564:	4605      	mov	r5, r0
 8009566:	f000 fffb 	bl	800a560 <_localeconv_r>
 800956a:	f8d0 a000 	ldr.w	sl, [r0]
 800956e:	4650      	mov	r0, sl
 8009570:	f7f6 fe82 	bl	8000278 <strlen>
 8009574:	2300      	movs	r3, #0
 8009576:	f894 b018 	ldrb.w	fp, [r4, #24]
 800957a:	ee08 0a10 	vmov	s16, r0
 800957e:	930a      	str	r3, [sp, #40]	; 0x28
 8009580:	6823      	ldr	r3, [r4, #0]
 8009582:	9305      	str	r3, [sp, #20]
 8009584:	f8d8 3000 	ldr.w	r3, [r8]
 8009588:	3307      	adds	r3, #7
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	f103 0208 	add.w	r2, r3, #8
 8009592:	f8c8 2000 	str.w	r2, [r8]
 8009596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800959a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800959e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095a2:	f8cd 8018 	str.w	r8, [sp, #24]
 80095a6:	9307      	str	r3, [sp, #28]
 80095a8:	4b9f      	ldr	r3, [pc, #636]	; (8009828 <_printf_float+0x2d8>)
 80095aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095ae:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80095b2:	f7f7 fabf 	bl	8000b34 <__aeabi_dcmpun>
 80095b6:	bb88      	cbnz	r0, 800961c <_printf_float+0xcc>
 80095b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095bc:	4b9a      	ldr	r3, [pc, #616]	; (8009828 <_printf_float+0x2d8>)
 80095be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095c2:	f7f7 fa99 	bl	8000af8 <__aeabi_dcmple>
 80095c6:	bb48      	cbnz	r0, 800961c <_printf_float+0xcc>
 80095c8:	2200      	movs	r2, #0
 80095ca:	2300      	movs	r3, #0
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f7 fa88 	bl	8000ae4 <__aeabi_dcmplt>
 80095d4:	b110      	cbz	r0, 80095dc <_printf_float+0x8c>
 80095d6:	232d      	movs	r3, #45	; 0x2d
 80095d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095dc:	4a93      	ldr	r2, [pc, #588]	; (800982c <_printf_float+0x2dc>)
 80095de:	4b94      	ldr	r3, [pc, #592]	; (8009830 <_printf_float+0x2e0>)
 80095e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80095e4:	bf94      	ite	ls
 80095e6:	4690      	movls	r8, r2
 80095e8:	4698      	movhi	r8, r3
 80095ea:	2303      	movs	r3, #3
 80095ec:	f04f 0900 	mov.w	r9, #0
 80095f0:	6123      	str	r3, [r4, #16]
 80095f2:	9b05      	ldr	r3, [sp, #20]
 80095f4:	f023 0304 	bic.w	r3, r3, #4
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	4633      	mov	r3, r6
 80095fc:	aa0b      	add	r2, sp, #44	; 0x2c
 80095fe:	4621      	mov	r1, r4
 8009600:	4628      	mov	r0, r5
 8009602:	9700      	str	r7, [sp, #0]
 8009604:	f000 f9da 	bl	80099bc <_printf_common>
 8009608:	3001      	adds	r0, #1
 800960a:	f040 8090 	bne.w	800972e <_printf_float+0x1de>
 800960e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009612:	b00d      	add	sp, #52	; 0x34
 8009614:	ecbd 8b02 	vpop	{d8}
 8009618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961c:	4642      	mov	r2, r8
 800961e:	464b      	mov	r3, r9
 8009620:	4640      	mov	r0, r8
 8009622:	4649      	mov	r1, r9
 8009624:	f7f7 fa86 	bl	8000b34 <__aeabi_dcmpun>
 8009628:	b140      	cbz	r0, 800963c <_printf_float+0xec>
 800962a:	464b      	mov	r3, r9
 800962c:	4a81      	ldr	r2, [pc, #516]	; (8009834 <_printf_float+0x2e4>)
 800962e:	2b00      	cmp	r3, #0
 8009630:	bfbc      	itt	lt
 8009632:	232d      	movlt	r3, #45	; 0x2d
 8009634:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009638:	4b7f      	ldr	r3, [pc, #508]	; (8009838 <_printf_float+0x2e8>)
 800963a:	e7d1      	b.n	80095e0 <_printf_float+0x90>
 800963c:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009640:	6863      	ldr	r3, [r4, #4]
 8009642:	9206      	str	r2, [sp, #24]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	d13f      	bne.n	80096c8 <_printf_float+0x178>
 8009648:	2306      	movs	r3, #6
 800964a:	6063      	str	r3, [r4, #4]
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	4628      	mov	r0, r5
 8009650:	6861      	ldr	r1, [r4, #4]
 8009652:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009656:	2300      	movs	r3, #0
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	ab0a      	add	r3, sp, #40	; 0x28
 800965c:	6022      	str	r2, [r4, #0]
 800965e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009662:	ab09      	add	r3, sp, #36	; 0x24
 8009664:	ec49 8b10 	vmov	d0, r8, r9
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800966e:	f7ff fecf 	bl	8009410 <__cvt>
 8009672:	9b06      	ldr	r3, [sp, #24]
 8009674:	4680      	mov	r8, r0
 8009676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009678:	2b47      	cmp	r3, #71	; 0x47
 800967a:	d108      	bne.n	800968e <_printf_float+0x13e>
 800967c:	1cc8      	adds	r0, r1, #3
 800967e:	db02      	blt.n	8009686 <_printf_float+0x136>
 8009680:	6863      	ldr	r3, [r4, #4]
 8009682:	4299      	cmp	r1, r3
 8009684:	dd41      	ble.n	800970a <_printf_float+0x1ba>
 8009686:	f1ab 0302 	sub.w	r3, fp, #2
 800968a:	fa5f fb83 	uxtb.w	fp, r3
 800968e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009692:	d820      	bhi.n	80096d6 <_printf_float+0x186>
 8009694:	3901      	subs	r1, #1
 8009696:	465a      	mov	r2, fp
 8009698:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800969c:	9109      	str	r1, [sp, #36]	; 0x24
 800969e:	f7ff ff19 	bl	80094d4 <__exponent>
 80096a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a4:	4681      	mov	r9, r0
 80096a6:	1813      	adds	r3, r2, r0
 80096a8:	2a01      	cmp	r2, #1
 80096aa:	6123      	str	r3, [r4, #16]
 80096ac:	dc02      	bgt.n	80096b4 <_printf_float+0x164>
 80096ae:	6822      	ldr	r2, [r4, #0]
 80096b0:	07d2      	lsls	r2, r2, #31
 80096b2:	d501      	bpl.n	80096b8 <_printf_float+0x168>
 80096b4:	3301      	adds	r3, #1
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d09c      	beq.n	80095fa <_printf_float+0xaa>
 80096c0:	232d      	movs	r3, #45	; 0x2d
 80096c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096c6:	e798      	b.n	80095fa <_printf_float+0xaa>
 80096c8:	9a06      	ldr	r2, [sp, #24]
 80096ca:	2a47      	cmp	r2, #71	; 0x47
 80096cc:	d1be      	bne.n	800964c <_printf_float+0xfc>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1bc      	bne.n	800964c <_printf_float+0xfc>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e7b9      	b.n	800964a <_printf_float+0xfa>
 80096d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80096da:	d118      	bne.n	800970e <_printf_float+0x1be>
 80096dc:	2900      	cmp	r1, #0
 80096de:	6863      	ldr	r3, [r4, #4]
 80096e0:	dd0b      	ble.n	80096fa <_printf_float+0x1aa>
 80096e2:	6121      	str	r1, [r4, #16]
 80096e4:	b913      	cbnz	r3, 80096ec <_printf_float+0x19c>
 80096e6:	6822      	ldr	r2, [r4, #0]
 80096e8:	07d0      	lsls	r0, r2, #31
 80096ea:	d502      	bpl.n	80096f2 <_printf_float+0x1a2>
 80096ec:	3301      	adds	r3, #1
 80096ee:	440b      	add	r3, r1
 80096f0:	6123      	str	r3, [r4, #16]
 80096f2:	f04f 0900 	mov.w	r9, #0
 80096f6:	65a1      	str	r1, [r4, #88]	; 0x58
 80096f8:	e7de      	b.n	80096b8 <_printf_float+0x168>
 80096fa:	b913      	cbnz	r3, 8009702 <_printf_float+0x1b2>
 80096fc:	6822      	ldr	r2, [r4, #0]
 80096fe:	07d2      	lsls	r2, r2, #31
 8009700:	d501      	bpl.n	8009706 <_printf_float+0x1b6>
 8009702:	3302      	adds	r3, #2
 8009704:	e7f4      	b.n	80096f0 <_printf_float+0x1a0>
 8009706:	2301      	movs	r3, #1
 8009708:	e7f2      	b.n	80096f0 <_printf_float+0x1a0>
 800970a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800970e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009710:	4299      	cmp	r1, r3
 8009712:	db05      	blt.n	8009720 <_printf_float+0x1d0>
 8009714:	6823      	ldr	r3, [r4, #0]
 8009716:	6121      	str	r1, [r4, #16]
 8009718:	07d8      	lsls	r0, r3, #31
 800971a:	d5ea      	bpl.n	80096f2 <_printf_float+0x1a2>
 800971c:	1c4b      	adds	r3, r1, #1
 800971e:	e7e7      	b.n	80096f0 <_printf_float+0x1a0>
 8009720:	2900      	cmp	r1, #0
 8009722:	bfd4      	ite	le
 8009724:	f1c1 0202 	rsble	r2, r1, #2
 8009728:	2201      	movgt	r2, #1
 800972a:	4413      	add	r3, r2
 800972c:	e7e0      	b.n	80096f0 <_printf_float+0x1a0>
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	055a      	lsls	r2, r3, #21
 8009732:	d407      	bmi.n	8009744 <_printf_float+0x1f4>
 8009734:	6923      	ldr	r3, [r4, #16]
 8009736:	4642      	mov	r2, r8
 8009738:	4631      	mov	r1, r6
 800973a:	4628      	mov	r0, r5
 800973c:	47b8      	blx	r7
 800973e:	3001      	adds	r0, #1
 8009740:	d12c      	bne.n	800979c <_printf_float+0x24c>
 8009742:	e764      	b.n	800960e <_printf_float+0xbe>
 8009744:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009748:	f240 80e0 	bls.w	800990c <_printf_float+0x3bc>
 800974c:	2200      	movs	r2, #0
 800974e:	2300      	movs	r3, #0
 8009750:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009754:	f7f7 f9bc 	bl	8000ad0 <__aeabi_dcmpeq>
 8009758:	2800      	cmp	r0, #0
 800975a:	d034      	beq.n	80097c6 <_printf_float+0x276>
 800975c:	2301      	movs	r3, #1
 800975e:	4a37      	ldr	r2, [pc, #220]	; (800983c <_printf_float+0x2ec>)
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f af51 	beq.w	800960e <_printf_float+0xbe>
 800976c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009770:	429a      	cmp	r2, r3
 8009772:	db02      	blt.n	800977a <_printf_float+0x22a>
 8009774:	6823      	ldr	r3, [r4, #0]
 8009776:	07d8      	lsls	r0, r3, #31
 8009778:	d510      	bpl.n	800979c <_printf_float+0x24c>
 800977a:	ee18 3a10 	vmov	r3, s16
 800977e:	4652      	mov	r2, sl
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f af41 	beq.w	800960e <_printf_float+0xbe>
 800978c:	f04f 0800 	mov.w	r8, #0
 8009790:	f104 091a 	add.w	r9, r4, #26
 8009794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009796:	3b01      	subs	r3, #1
 8009798:	4543      	cmp	r3, r8
 800979a:	dc09      	bgt.n	80097b0 <_printf_float+0x260>
 800979c:	6823      	ldr	r3, [r4, #0]
 800979e:	079b      	lsls	r3, r3, #30
 80097a0:	f100 8107 	bmi.w	80099b2 <_printf_float+0x462>
 80097a4:	68e0      	ldr	r0, [r4, #12]
 80097a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097a8:	4298      	cmp	r0, r3
 80097aa:	bfb8      	it	lt
 80097ac:	4618      	movlt	r0, r3
 80097ae:	e730      	b.n	8009612 <_printf_float+0xc2>
 80097b0:	2301      	movs	r3, #1
 80097b2:	464a      	mov	r2, r9
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f43f af27 	beq.w	800960e <_printf_float+0xbe>
 80097c0:	f108 0801 	add.w	r8, r8, #1
 80097c4:	e7e6      	b.n	8009794 <_printf_float+0x244>
 80097c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	dc39      	bgt.n	8009840 <_printf_float+0x2f0>
 80097cc:	2301      	movs	r3, #1
 80097ce:	4a1b      	ldr	r2, [pc, #108]	; (800983c <_printf_float+0x2ec>)
 80097d0:	4631      	mov	r1, r6
 80097d2:	4628      	mov	r0, r5
 80097d4:	47b8      	blx	r7
 80097d6:	3001      	adds	r0, #1
 80097d8:	f43f af19 	beq.w	800960e <_printf_float+0xbe>
 80097dc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80097e0:	4313      	orrs	r3, r2
 80097e2:	d102      	bne.n	80097ea <_printf_float+0x29a>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	07d9      	lsls	r1, r3, #31
 80097e8:	d5d8      	bpl.n	800979c <_printf_float+0x24c>
 80097ea:	ee18 3a10 	vmov	r3, s16
 80097ee:	4652      	mov	r2, sl
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	f43f af09 	beq.w	800960e <_printf_float+0xbe>
 80097fc:	f04f 0900 	mov.w	r9, #0
 8009800:	f104 0a1a 	add.w	sl, r4, #26
 8009804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009806:	425b      	negs	r3, r3
 8009808:	454b      	cmp	r3, r9
 800980a:	dc01      	bgt.n	8009810 <_printf_float+0x2c0>
 800980c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800980e:	e792      	b.n	8009736 <_printf_float+0x1e6>
 8009810:	2301      	movs	r3, #1
 8009812:	4652      	mov	r2, sl
 8009814:	4631      	mov	r1, r6
 8009816:	4628      	mov	r0, r5
 8009818:	47b8      	blx	r7
 800981a:	3001      	adds	r0, #1
 800981c:	f43f aef7 	beq.w	800960e <_printf_float+0xbe>
 8009820:	f109 0901 	add.w	r9, r9, #1
 8009824:	e7ee      	b.n	8009804 <_printf_float+0x2b4>
 8009826:	bf00      	nop
 8009828:	7fefffff 	.word	0x7fefffff
 800982c:	0800f268 	.word	0x0800f268
 8009830:	0800f26c 	.word	0x0800f26c
 8009834:	0800f270 	.word	0x0800f270
 8009838:	0800f274 	.word	0x0800f274
 800983c:	0800f278 	.word	0x0800f278
 8009840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009842:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009844:	429a      	cmp	r2, r3
 8009846:	bfa8      	it	ge
 8009848:	461a      	movge	r2, r3
 800984a:	2a00      	cmp	r2, #0
 800984c:	4691      	mov	r9, r2
 800984e:	dc37      	bgt.n	80098c0 <_printf_float+0x370>
 8009850:	f04f 0b00 	mov.w	fp, #0
 8009854:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009858:	f104 021a 	add.w	r2, r4, #26
 800985c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800985e:	9305      	str	r3, [sp, #20]
 8009860:	eba3 0309 	sub.w	r3, r3, r9
 8009864:	455b      	cmp	r3, fp
 8009866:	dc33      	bgt.n	80098d0 <_printf_float+0x380>
 8009868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800986c:	429a      	cmp	r2, r3
 800986e:	db3b      	blt.n	80098e8 <_printf_float+0x398>
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	07da      	lsls	r2, r3, #31
 8009874:	d438      	bmi.n	80098e8 <_printf_float+0x398>
 8009876:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800987a:	eba2 0903 	sub.w	r9, r2, r3
 800987e:	9b05      	ldr	r3, [sp, #20]
 8009880:	1ad2      	subs	r2, r2, r3
 8009882:	4591      	cmp	r9, r2
 8009884:	bfa8      	it	ge
 8009886:	4691      	movge	r9, r2
 8009888:	f1b9 0f00 	cmp.w	r9, #0
 800988c:	dc35      	bgt.n	80098fa <_printf_float+0x3aa>
 800988e:	f04f 0800 	mov.w	r8, #0
 8009892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009896:	f104 0a1a 	add.w	sl, r4, #26
 800989a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800989e:	1a9b      	subs	r3, r3, r2
 80098a0:	eba3 0309 	sub.w	r3, r3, r9
 80098a4:	4543      	cmp	r3, r8
 80098a6:	f77f af79 	ble.w	800979c <_printf_float+0x24c>
 80098aa:	2301      	movs	r3, #1
 80098ac:	4652      	mov	r2, sl
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	f43f aeaa 	beq.w	800960e <_printf_float+0xbe>
 80098ba:	f108 0801 	add.w	r8, r8, #1
 80098be:	e7ec      	b.n	800989a <_printf_float+0x34a>
 80098c0:	4613      	mov	r3, r2
 80098c2:	4631      	mov	r1, r6
 80098c4:	4642      	mov	r2, r8
 80098c6:	4628      	mov	r0, r5
 80098c8:	47b8      	blx	r7
 80098ca:	3001      	adds	r0, #1
 80098cc:	d1c0      	bne.n	8009850 <_printf_float+0x300>
 80098ce:	e69e      	b.n	800960e <_printf_float+0xbe>
 80098d0:	2301      	movs	r3, #1
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	9205      	str	r2, [sp, #20]
 80098d8:	47b8      	blx	r7
 80098da:	3001      	adds	r0, #1
 80098dc:	f43f ae97 	beq.w	800960e <_printf_float+0xbe>
 80098e0:	f10b 0b01 	add.w	fp, fp, #1
 80098e4:	9a05      	ldr	r2, [sp, #20]
 80098e6:	e7b9      	b.n	800985c <_printf_float+0x30c>
 80098e8:	ee18 3a10 	vmov	r3, s16
 80098ec:	4652      	mov	r2, sl
 80098ee:	4631      	mov	r1, r6
 80098f0:	4628      	mov	r0, r5
 80098f2:	47b8      	blx	r7
 80098f4:	3001      	adds	r0, #1
 80098f6:	d1be      	bne.n	8009876 <_printf_float+0x326>
 80098f8:	e689      	b.n	800960e <_printf_float+0xbe>
 80098fa:	9a05      	ldr	r2, [sp, #20]
 80098fc:	464b      	mov	r3, r9
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	4442      	add	r2, r8
 8009904:	47b8      	blx	r7
 8009906:	3001      	adds	r0, #1
 8009908:	d1c1      	bne.n	800988e <_printf_float+0x33e>
 800990a:	e680      	b.n	800960e <_printf_float+0xbe>
 800990c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800990e:	2a01      	cmp	r2, #1
 8009910:	dc01      	bgt.n	8009916 <_printf_float+0x3c6>
 8009912:	07db      	lsls	r3, r3, #31
 8009914:	d53a      	bpl.n	800998c <_printf_float+0x43c>
 8009916:	2301      	movs	r3, #1
 8009918:	4642      	mov	r2, r8
 800991a:	4631      	mov	r1, r6
 800991c:	4628      	mov	r0, r5
 800991e:	47b8      	blx	r7
 8009920:	3001      	adds	r0, #1
 8009922:	f43f ae74 	beq.w	800960e <_printf_float+0xbe>
 8009926:	ee18 3a10 	vmov	r3, s16
 800992a:	4652      	mov	r2, sl
 800992c:	4631      	mov	r1, r6
 800992e:	4628      	mov	r0, r5
 8009930:	47b8      	blx	r7
 8009932:	3001      	adds	r0, #1
 8009934:	f43f ae6b 	beq.w	800960e <_printf_float+0xbe>
 8009938:	2200      	movs	r2, #0
 800993a:	2300      	movs	r3, #0
 800993c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009940:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009944:	f7f7 f8c4 	bl	8000ad0 <__aeabi_dcmpeq>
 8009948:	b9d8      	cbnz	r0, 8009982 <_printf_float+0x432>
 800994a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800994e:	f108 0201 	add.w	r2, r8, #1
 8009952:	4631      	mov	r1, r6
 8009954:	4628      	mov	r0, r5
 8009956:	47b8      	blx	r7
 8009958:	3001      	adds	r0, #1
 800995a:	d10e      	bne.n	800997a <_printf_float+0x42a>
 800995c:	e657      	b.n	800960e <_printf_float+0xbe>
 800995e:	2301      	movs	r3, #1
 8009960:	4652      	mov	r2, sl
 8009962:	4631      	mov	r1, r6
 8009964:	4628      	mov	r0, r5
 8009966:	47b8      	blx	r7
 8009968:	3001      	adds	r0, #1
 800996a:	f43f ae50 	beq.w	800960e <_printf_float+0xbe>
 800996e:	f108 0801 	add.w	r8, r8, #1
 8009972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009974:	3b01      	subs	r3, #1
 8009976:	4543      	cmp	r3, r8
 8009978:	dcf1      	bgt.n	800995e <_printf_float+0x40e>
 800997a:	464b      	mov	r3, r9
 800997c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009980:	e6da      	b.n	8009738 <_printf_float+0x1e8>
 8009982:	f04f 0800 	mov.w	r8, #0
 8009986:	f104 0a1a 	add.w	sl, r4, #26
 800998a:	e7f2      	b.n	8009972 <_printf_float+0x422>
 800998c:	2301      	movs	r3, #1
 800998e:	4642      	mov	r2, r8
 8009990:	e7df      	b.n	8009952 <_printf_float+0x402>
 8009992:	2301      	movs	r3, #1
 8009994:	464a      	mov	r2, r9
 8009996:	4631      	mov	r1, r6
 8009998:	4628      	mov	r0, r5
 800999a:	47b8      	blx	r7
 800999c:	3001      	adds	r0, #1
 800999e:	f43f ae36 	beq.w	800960e <_printf_float+0xbe>
 80099a2:	f108 0801 	add.w	r8, r8, #1
 80099a6:	68e3      	ldr	r3, [r4, #12]
 80099a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099aa:	1a5b      	subs	r3, r3, r1
 80099ac:	4543      	cmp	r3, r8
 80099ae:	dcf0      	bgt.n	8009992 <_printf_float+0x442>
 80099b0:	e6f8      	b.n	80097a4 <_printf_float+0x254>
 80099b2:	f04f 0800 	mov.w	r8, #0
 80099b6:	f104 0919 	add.w	r9, r4, #25
 80099ba:	e7f4      	b.n	80099a6 <_printf_float+0x456>

080099bc <_printf_common>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	4616      	mov	r6, r2
 80099c2:	4699      	mov	r9, r3
 80099c4:	688a      	ldr	r2, [r1, #8]
 80099c6:	4607      	mov	r7, r0
 80099c8:	690b      	ldr	r3, [r1, #16]
 80099ca:	460c      	mov	r4, r1
 80099cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099d0:	4293      	cmp	r3, r2
 80099d2:	bfb8      	it	lt
 80099d4:	4613      	movlt	r3, r2
 80099d6:	6033      	str	r3, [r6, #0]
 80099d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099dc:	b10a      	cbz	r2, 80099e2 <_printf_common+0x26>
 80099de:	3301      	adds	r3, #1
 80099e0:	6033      	str	r3, [r6, #0]
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	0699      	lsls	r1, r3, #26
 80099e6:	bf42      	ittt	mi
 80099e8:	6833      	ldrmi	r3, [r6, #0]
 80099ea:	3302      	addmi	r3, #2
 80099ec:	6033      	strmi	r3, [r6, #0]
 80099ee:	6825      	ldr	r5, [r4, #0]
 80099f0:	f015 0506 	ands.w	r5, r5, #6
 80099f4:	d106      	bne.n	8009a04 <_printf_common+0x48>
 80099f6:	f104 0a19 	add.w	sl, r4, #25
 80099fa:	68e3      	ldr	r3, [r4, #12]
 80099fc:	6832      	ldr	r2, [r6, #0]
 80099fe:	1a9b      	subs	r3, r3, r2
 8009a00:	42ab      	cmp	r3, r5
 8009a02:	dc2b      	bgt.n	8009a5c <_printf_common+0xa0>
 8009a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a08:	1e13      	subs	r3, r2, #0
 8009a0a:	6822      	ldr	r2, [r4, #0]
 8009a0c:	bf18      	it	ne
 8009a0e:	2301      	movne	r3, #1
 8009a10:	0692      	lsls	r2, r2, #26
 8009a12:	d430      	bmi.n	8009a76 <_printf_common+0xba>
 8009a14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a18:	4649      	mov	r1, r9
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	47c0      	blx	r8
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d023      	beq.n	8009a6a <_printf_common+0xae>
 8009a22:	6823      	ldr	r3, [r4, #0]
 8009a24:	341a      	adds	r4, #26
 8009a26:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009a2a:	f003 0306 	and.w	r3, r3, #6
 8009a2e:	2b04      	cmp	r3, #4
 8009a30:	bf0a      	itet	eq
 8009a32:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009a36:	2500      	movne	r5, #0
 8009a38:	6833      	ldreq	r3, [r6, #0]
 8009a3a:	f04f 0600 	mov.w	r6, #0
 8009a3e:	bf08      	it	eq
 8009a40:	1aed      	subeq	r5, r5, r3
 8009a42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009a46:	bf08      	it	eq
 8009a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	bfc4      	itt	gt
 8009a50:	1a9b      	subgt	r3, r3, r2
 8009a52:	18ed      	addgt	r5, r5, r3
 8009a54:	42b5      	cmp	r5, r6
 8009a56:	d11a      	bne.n	8009a8e <_printf_common+0xd2>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e008      	b.n	8009a6e <_printf_common+0xb2>
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4652      	mov	r2, sl
 8009a60:	4649      	mov	r1, r9
 8009a62:	4638      	mov	r0, r7
 8009a64:	47c0      	blx	r8
 8009a66:	3001      	adds	r0, #1
 8009a68:	d103      	bne.n	8009a72 <_printf_common+0xb6>
 8009a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a72:	3501      	adds	r5, #1
 8009a74:	e7c1      	b.n	80099fa <_printf_common+0x3e>
 8009a76:	18e1      	adds	r1, r4, r3
 8009a78:	1c5a      	adds	r2, r3, #1
 8009a7a:	2030      	movs	r0, #48	; 0x30
 8009a7c:	3302      	adds	r3, #2
 8009a7e:	4422      	add	r2, r4
 8009a80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a8c:	e7c2      	b.n	8009a14 <_printf_common+0x58>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4622      	mov	r2, r4
 8009a92:	4649      	mov	r1, r9
 8009a94:	4638      	mov	r0, r7
 8009a96:	47c0      	blx	r8
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d0e6      	beq.n	8009a6a <_printf_common+0xae>
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	e7d9      	b.n	8009a54 <_printf_common+0x98>

08009aa0 <_printf_i>:
 8009aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	7e0f      	ldrb	r7, [r1, #24]
 8009aa6:	4691      	mov	r9, r2
 8009aa8:	4680      	mov	r8, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	2f78      	cmp	r7, #120	; 0x78
 8009aae:	469a      	mov	sl, r3
 8009ab0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ab2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ab6:	d807      	bhi.n	8009ac8 <_printf_i+0x28>
 8009ab8:	2f62      	cmp	r7, #98	; 0x62
 8009aba:	d80a      	bhi.n	8009ad2 <_printf_i+0x32>
 8009abc:	2f00      	cmp	r7, #0
 8009abe:	f000 80d3 	beq.w	8009c68 <_printf_i+0x1c8>
 8009ac2:	2f58      	cmp	r7, #88	; 0x58
 8009ac4:	f000 80bf 	beq.w	8009c46 <_printf_i+0x1a6>
 8009ac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009acc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ad0:	e03a      	b.n	8009b48 <_printf_i+0xa8>
 8009ad2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ad6:	2b15      	cmp	r3, #21
 8009ad8:	d8f6      	bhi.n	8009ac8 <_printf_i+0x28>
 8009ada:	a101      	add	r1, pc, #4	; (adr r1, 8009ae0 <_printf_i+0x40>)
 8009adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ae0:	08009b39 	.word	0x08009b39
 8009ae4:	08009b4d 	.word	0x08009b4d
 8009ae8:	08009ac9 	.word	0x08009ac9
 8009aec:	08009ac9 	.word	0x08009ac9
 8009af0:	08009ac9 	.word	0x08009ac9
 8009af4:	08009ac9 	.word	0x08009ac9
 8009af8:	08009b4d 	.word	0x08009b4d
 8009afc:	08009ac9 	.word	0x08009ac9
 8009b00:	08009ac9 	.word	0x08009ac9
 8009b04:	08009ac9 	.word	0x08009ac9
 8009b08:	08009ac9 	.word	0x08009ac9
 8009b0c:	08009c4f 	.word	0x08009c4f
 8009b10:	08009b79 	.word	0x08009b79
 8009b14:	08009c0b 	.word	0x08009c0b
 8009b18:	08009ac9 	.word	0x08009ac9
 8009b1c:	08009ac9 	.word	0x08009ac9
 8009b20:	08009c71 	.word	0x08009c71
 8009b24:	08009ac9 	.word	0x08009ac9
 8009b28:	08009b79 	.word	0x08009b79
 8009b2c:	08009ac9 	.word	0x08009ac9
 8009b30:	08009ac9 	.word	0x08009ac9
 8009b34:	08009c13 	.word	0x08009c13
 8009b38:	682b      	ldr	r3, [r5, #0]
 8009b3a:	1d1a      	adds	r2, r3, #4
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	602a      	str	r2, [r5, #0]
 8009b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e09e      	b.n	8009c8a <_printf_i+0x1ea>
 8009b4c:	6820      	ldr	r0, [r4, #0]
 8009b4e:	682b      	ldr	r3, [r5, #0]
 8009b50:	0607      	lsls	r7, r0, #24
 8009b52:	f103 0104 	add.w	r1, r3, #4
 8009b56:	6029      	str	r1, [r5, #0]
 8009b58:	d501      	bpl.n	8009b5e <_printf_i+0xbe>
 8009b5a:	681e      	ldr	r6, [r3, #0]
 8009b5c:	e003      	b.n	8009b66 <_printf_i+0xc6>
 8009b5e:	0646      	lsls	r6, r0, #25
 8009b60:	d5fb      	bpl.n	8009b5a <_printf_i+0xba>
 8009b62:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009b66:	2e00      	cmp	r6, #0
 8009b68:	da03      	bge.n	8009b72 <_printf_i+0xd2>
 8009b6a:	232d      	movs	r3, #45	; 0x2d
 8009b6c:	4276      	negs	r6, r6
 8009b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b72:	4859      	ldr	r0, [pc, #356]	; (8009cd8 <_printf_i+0x238>)
 8009b74:	230a      	movs	r3, #10
 8009b76:	e012      	b.n	8009b9e <_printf_i+0xfe>
 8009b78:	682b      	ldr	r3, [r5, #0]
 8009b7a:	6820      	ldr	r0, [r4, #0]
 8009b7c:	1d19      	adds	r1, r3, #4
 8009b7e:	6029      	str	r1, [r5, #0]
 8009b80:	0605      	lsls	r5, r0, #24
 8009b82:	d501      	bpl.n	8009b88 <_printf_i+0xe8>
 8009b84:	681e      	ldr	r6, [r3, #0]
 8009b86:	e002      	b.n	8009b8e <_printf_i+0xee>
 8009b88:	0641      	lsls	r1, r0, #25
 8009b8a:	d5fb      	bpl.n	8009b84 <_printf_i+0xe4>
 8009b8c:	881e      	ldrh	r6, [r3, #0]
 8009b8e:	2f6f      	cmp	r7, #111	; 0x6f
 8009b90:	4851      	ldr	r0, [pc, #324]	; (8009cd8 <_printf_i+0x238>)
 8009b92:	bf0c      	ite	eq
 8009b94:	2308      	moveq	r3, #8
 8009b96:	230a      	movne	r3, #10
 8009b98:	2100      	movs	r1, #0
 8009b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b9e:	6865      	ldr	r5, [r4, #4]
 8009ba0:	2d00      	cmp	r5, #0
 8009ba2:	60a5      	str	r5, [r4, #8]
 8009ba4:	bfa2      	ittt	ge
 8009ba6:	6821      	ldrge	r1, [r4, #0]
 8009ba8:	f021 0104 	bicge.w	r1, r1, #4
 8009bac:	6021      	strge	r1, [r4, #0]
 8009bae:	b90e      	cbnz	r6, 8009bb4 <_printf_i+0x114>
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	d04a      	beq.n	8009c4a <_printf_i+0x1aa>
 8009bb4:	4615      	mov	r5, r2
 8009bb6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009bba:	fb03 6711 	mls	r7, r3, r1, r6
 8009bbe:	5dc7      	ldrb	r7, [r0, r7]
 8009bc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009bc4:	4637      	mov	r7, r6
 8009bc6:	460e      	mov	r6, r1
 8009bc8:	42bb      	cmp	r3, r7
 8009bca:	d9f4      	bls.n	8009bb6 <_printf_i+0x116>
 8009bcc:	2b08      	cmp	r3, #8
 8009bce:	d10b      	bne.n	8009be8 <_printf_i+0x148>
 8009bd0:	6823      	ldr	r3, [r4, #0]
 8009bd2:	07de      	lsls	r6, r3, #31
 8009bd4:	d508      	bpl.n	8009be8 <_printf_i+0x148>
 8009bd6:	6923      	ldr	r3, [r4, #16]
 8009bd8:	6861      	ldr	r1, [r4, #4]
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	bfde      	ittt	le
 8009bde:	2330      	movle	r3, #48	; 0x30
 8009be0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009be4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009be8:	1b52      	subs	r2, r2, r5
 8009bea:	6122      	str	r2, [r4, #16]
 8009bec:	464b      	mov	r3, r9
 8009bee:	aa03      	add	r2, sp, #12
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f8cd a000 	str.w	sl, [sp]
 8009bf8:	f7ff fee0 	bl	80099bc <_printf_common>
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d149      	bne.n	8009c94 <_printf_i+0x1f4>
 8009c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c04:	b004      	add	sp, #16
 8009c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	f043 0320 	orr.w	r3, r3, #32
 8009c10:	6023      	str	r3, [r4, #0]
 8009c12:	2778      	movs	r7, #120	; 0x78
 8009c14:	4831      	ldr	r0, [pc, #196]	; (8009cdc <_printf_i+0x23c>)
 8009c16:	6823      	ldr	r3, [r4, #0]
 8009c18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c1c:	061f      	lsls	r7, r3, #24
 8009c1e:	6829      	ldr	r1, [r5, #0]
 8009c20:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c24:	d402      	bmi.n	8009c2c <_printf_i+0x18c>
 8009c26:	065f      	lsls	r7, r3, #25
 8009c28:	bf48      	it	mi
 8009c2a:	b2b6      	uxthmi	r6, r6
 8009c2c:	07df      	lsls	r7, r3, #31
 8009c2e:	6029      	str	r1, [r5, #0]
 8009c30:	bf44      	itt	mi
 8009c32:	f043 0320 	orrmi.w	r3, r3, #32
 8009c36:	6023      	strmi	r3, [r4, #0]
 8009c38:	b91e      	cbnz	r6, 8009c42 <_printf_i+0x1a2>
 8009c3a:	6823      	ldr	r3, [r4, #0]
 8009c3c:	f023 0320 	bic.w	r3, r3, #32
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	2310      	movs	r3, #16
 8009c44:	e7a8      	b.n	8009b98 <_printf_i+0xf8>
 8009c46:	4824      	ldr	r0, [pc, #144]	; (8009cd8 <_printf_i+0x238>)
 8009c48:	e7e5      	b.n	8009c16 <_printf_i+0x176>
 8009c4a:	4615      	mov	r5, r2
 8009c4c:	e7be      	b.n	8009bcc <_printf_i+0x12c>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	6826      	ldr	r6, [r4, #0]
 8009c52:	1d18      	adds	r0, r3, #4
 8009c54:	6961      	ldr	r1, [r4, #20]
 8009c56:	6028      	str	r0, [r5, #0]
 8009c58:	0635      	lsls	r5, r6, #24
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	d501      	bpl.n	8009c62 <_printf_i+0x1c2>
 8009c5e:	6019      	str	r1, [r3, #0]
 8009c60:	e002      	b.n	8009c68 <_printf_i+0x1c8>
 8009c62:	0670      	lsls	r0, r6, #25
 8009c64:	d5fb      	bpl.n	8009c5e <_printf_i+0x1be>
 8009c66:	8019      	strh	r1, [r3, #0]
 8009c68:	2300      	movs	r3, #0
 8009c6a:	4615      	mov	r5, r2
 8009c6c:	6123      	str	r3, [r4, #16]
 8009c6e:	e7bd      	b.n	8009bec <_printf_i+0x14c>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	2100      	movs	r1, #0
 8009c74:	1d1a      	adds	r2, r3, #4
 8009c76:	602a      	str	r2, [r5, #0]
 8009c78:	681d      	ldr	r5, [r3, #0]
 8009c7a:	6862      	ldr	r2, [r4, #4]
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f000 fce6 	bl	800a64e <memchr>
 8009c82:	b108      	cbz	r0, 8009c88 <_printf_i+0x1e8>
 8009c84:	1b40      	subs	r0, r0, r5
 8009c86:	6060      	str	r0, [r4, #4]
 8009c88:	6863      	ldr	r3, [r4, #4]
 8009c8a:	6123      	str	r3, [r4, #16]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c92:	e7ab      	b.n	8009bec <_printf_i+0x14c>
 8009c94:	6923      	ldr	r3, [r4, #16]
 8009c96:	462a      	mov	r2, r5
 8009c98:	4649      	mov	r1, r9
 8009c9a:	4640      	mov	r0, r8
 8009c9c:	47d0      	blx	sl
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	d0ae      	beq.n	8009c00 <_printf_i+0x160>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	079b      	lsls	r3, r3, #30
 8009ca6:	d413      	bmi.n	8009cd0 <_printf_i+0x230>
 8009ca8:	68e0      	ldr	r0, [r4, #12]
 8009caa:	9b03      	ldr	r3, [sp, #12]
 8009cac:	4298      	cmp	r0, r3
 8009cae:	bfb8      	it	lt
 8009cb0:	4618      	movlt	r0, r3
 8009cb2:	e7a7      	b.n	8009c04 <_printf_i+0x164>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4632      	mov	r2, r6
 8009cb8:	4649      	mov	r1, r9
 8009cba:	4640      	mov	r0, r8
 8009cbc:	47d0      	blx	sl
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	d09e      	beq.n	8009c00 <_printf_i+0x160>
 8009cc2:	3501      	adds	r5, #1
 8009cc4:	68e3      	ldr	r3, [r4, #12]
 8009cc6:	9903      	ldr	r1, [sp, #12]
 8009cc8:	1a5b      	subs	r3, r3, r1
 8009cca:	42ab      	cmp	r3, r5
 8009ccc:	dcf2      	bgt.n	8009cb4 <_printf_i+0x214>
 8009cce:	e7eb      	b.n	8009ca8 <_printf_i+0x208>
 8009cd0:	2500      	movs	r5, #0
 8009cd2:	f104 0619 	add.w	r6, r4, #25
 8009cd6:	e7f5      	b.n	8009cc4 <_printf_i+0x224>
 8009cd8:	0800f27a 	.word	0x0800f27a
 8009cdc:	0800f28b 	.word	0x0800f28b

08009ce0 <_scanf_float>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	b087      	sub	sp, #28
 8009ce6:	4617      	mov	r7, r2
 8009ce8:	468b      	mov	fp, r1
 8009cea:	4680      	mov	r8, r0
 8009cec:	9303      	str	r3, [sp, #12]
 8009cee:	460c      	mov	r4, r1
 8009cf0:	688b      	ldr	r3, [r1, #8]
 8009cf2:	1e5a      	subs	r2, r3, #1
 8009cf4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009cf8:	bf8b      	itete	hi
 8009cfa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009cfe:	2300      	movls	r3, #0
 8009d00:	195b      	addhi	r3, r3, r5
 8009d02:	9302      	strls	r3, [sp, #8]
 8009d04:	f04f 0500 	mov.w	r5, #0
 8009d08:	bf84      	itt	hi
 8009d0a:	9302      	strhi	r3, [sp, #8]
 8009d0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d10:	46aa      	mov	sl, r5
 8009d12:	46a9      	mov	r9, r5
 8009d14:	bf88      	it	hi
 8009d16:	608b      	strhi	r3, [r1, #8]
 8009d18:	680b      	ldr	r3, [r1, #0]
 8009d1a:	9501      	str	r5, [sp, #4]
 8009d1c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009d20:	f84b 3b1c 	str.w	r3, [fp], #28
 8009d24:	465e      	mov	r6, fp
 8009d26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009d2a:	68a2      	ldr	r2, [r4, #8]
 8009d2c:	b152      	cbz	r2, 8009d44 <_scanf_float+0x64>
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	2b4e      	cmp	r3, #78	; 0x4e
 8009d34:	d864      	bhi.n	8009e00 <_scanf_float+0x120>
 8009d36:	2b40      	cmp	r3, #64	; 0x40
 8009d38:	d83c      	bhi.n	8009db4 <_scanf_float+0xd4>
 8009d3a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009d3e:	b2c8      	uxtb	r0, r1
 8009d40:	280e      	cmp	r0, #14
 8009d42:	d93a      	bls.n	8009dba <_scanf_float+0xda>
 8009d44:	f1b9 0f00 	cmp.w	r9, #0
 8009d48:	d003      	beq.n	8009d52 <_scanf_float+0x72>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009d56:	f1ba 0f01 	cmp.w	sl, #1
 8009d5a:	f200 8113 	bhi.w	8009f84 <_scanf_float+0x2a4>
 8009d5e:	455e      	cmp	r6, fp
 8009d60:	f200 8105 	bhi.w	8009f6e <_scanf_float+0x28e>
 8009d64:	2501      	movs	r5, #1
 8009d66:	4628      	mov	r0, r5
 8009d68:	b007      	add	sp, #28
 8009d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d6e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009d72:	2a0d      	cmp	r2, #13
 8009d74:	d8e6      	bhi.n	8009d44 <_scanf_float+0x64>
 8009d76:	a101      	add	r1, pc, #4	; (adr r1, 8009d7c <_scanf_float+0x9c>)
 8009d78:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009d7c:	08009ebb 	.word	0x08009ebb
 8009d80:	08009d45 	.word	0x08009d45
 8009d84:	08009d45 	.word	0x08009d45
 8009d88:	08009d45 	.word	0x08009d45
 8009d8c:	08009f1b 	.word	0x08009f1b
 8009d90:	08009ef3 	.word	0x08009ef3
 8009d94:	08009d45 	.word	0x08009d45
 8009d98:	08009d45 	.word	0x08009d45
 8009d9c:	08009ec9 	.word	0x08009ec9
 8009da0:	08009d45 	.word	0x08009d45
 8009da4:	08009d45 	.word	0x08009d45
 8009da8:	08009d45 	.word	0x08009d45
 8009dac:	08009d45 	.word	0x08009d45
 8009db0:	08009e81 	.word	0x08009e81
 8009db4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009db8:	e7db      	b.n	8009d72 <_scanf_float+0x92>
 8009dba:	290e      	cmp	r1, #14
 8009dbc:	d8c2      	bhi.n	8009d44 <_scanf_float+0x64>
 8009dbe:	a001      	add	r0, pc, #4	; (adr r0, 8009dc4 <_scanf_float+0xe4>)
 8009dc0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009dc4:	08009e73 	.word	0x08009e73
 8009dc8:	08009d45 	.word	0x08009d45
 8009dcc:	08009e73 	.word	0x08009e73
 8009dd0:	08009f07 	.word	0x08009f07
 8009dd4:	08009d45 	.word	0x08009d45
 8009dd8:	08009e21 	.word	0x08009e21
 8009ddc:	08009e5d 	.word	0x08009e5d
 8009de0:	08009e5d 	.word	0x08009e5d
 8009de4:	08009e5d 	.word	0x08009e5d
 8009de8:	08009e5d 	.word	0x08009e5d
 8009dec:	08009e5d 	.word	0x08009e5d
 8009df0:	08009e5d 	.word	0x08009e5d
 8009df4:	08009e5d 	.word	0x08009e5d
 8009df8:	08009e5d 	.word	0x08009e5d
 8009dfc:	08009e5d 	.word	0x08009e5d
 8009e00:	2b6e      	cmp	r3, #110	; 0x6e
 8009e02:	d809      	bhi.n	8009e18 <_scanf_float+0x138>
 8009e04:	2b60      	cmp	r3, #96	; 0x60
 8009e06:	d8b2      	bhi.n	8009d6e <_scanf_float+0x8e>
 8009e08:	2b54      	cmp	r3, #84	; 0x54
 8009e0a:	d077      	beq.n	8009efc <_scanf_float+0x21c>
 8009e0c:	2b59      	cmp	r3, #89	; 0x59
 8009e0e:	d199      	bne.n	8009d44 <_scanf_float+0x64>
 8009e10:	2d07      	cmp	r5, #7
 8009e12:	d197      	bne.n	8009d44 <_scanf_float+0x64>
 8009e14:	2508      	movs	r5, #8
 8009e16:	e029      	b.n	8009e6c <_scanf_float+0x18c>
 8009e18:	2b74      	cmp	r3, #116	; 0x74
 8009e1a:	d06f      	beq.n	8009efc <_scanf_float+0x21c>
 8009e1c:	2b79      	cmp	r3, #121	; 0x79
 8009e1e:	e7f6      	b.n	8009e0e <_scanf_float+0x12e>
 8009e20:	6821      	ldr	r1, [r4, #0]
 8009e22:	05c8      	lsls	r0, r1, #23
 8009e24:	d51a      	bpl.n	8009e5c <_scanf_float+0x17c>
 8009e26:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009e2a:	9b02      	ldr	r3, [sp, #8]
 8009e2c:	f109 0901 	add.w	r9, r9, #1
 8009e30:	6021      	str	r1, [r4, #0]
 8009e32:	b11b      	cbz	r3, 8009e3c <_scanf_float+0x15c>
 8009e34:	3b01      	subs	r3, #1
 8009e36:	3201      	adds	r2, #1
 8009e38:	9302      	str	r3, [sp, #8]
 8009e3a:	60a2      	str	r2, [r4, #8]
 8009e3c:	68a3      	ldr	r3, [r4, #8]
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	60a3      	str	r3, [r4, #8]
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	3301      	adds	r3, #1
 8009e46:	6123      	str	r3, [r4, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	607b      	str	r3, [r7, #4]
 8009e50:	f340 8084 	ble.w	8009f5c <_scanf_float+0x27c>
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	603b      	str	r3, [r7, #0]
 8009e5a:	e766      	b.n	8009d2a <_scanf_float+0x4a>
 8009e5c:	eb1a 0f05 	cmn.w	sl, r5
 8009e60:	f47f af70 	bne.w	8009d44 <_scanf_float+0x64>
 8009e64:	6822      	ldr	r2, [r4, #0]
 8009e66:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009e6a:	6022      	str	r2, [r4, #0]
 8009e6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e70:	e7e4      	b.n	8009e3c <_scanf_float+0x15c>
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	0610      	lsls	r0, r2, #24
 8009e76:	f57f af65 	bpl.w	8009d44 <_scanf_float+0x64>
 8009e7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e7e:	e7f4      	b.n	8009e6a <_scanf_float+0x18a>
 8009e80:	f1ba 0f00 	cmp.w	sl, #0
 8009e84:	d10e      	bne.n	8009ea4 <_scanf_float+0x1c4>
 8009e86:	f1b9 0f00 	cmp.w	r9, #0
 8009e8a:	d10e      	bne.n	8009eaa <_scanf_float+0x1ca>
 8009e8c:	6822      	ldr	r2, [r4, #0]
 8009e8e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e92:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e96:	d108      	bne.n	8009eaa <_scanf_float+0x1ca>
 8009e98:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e9c:	f04f 0a01 	mov.w	sl, #1
 8009ea0:	6022      	str	r2, [r4, #0]
 8009ea2:	e7e3      	b.n	8009e6c <_scanf_float+0x18c>
 8009ea4:	f1ba 0f02 	cmp.w	sl, #2
 8009ea8:	d055      	beq.n	8009f56 <_scanf_float+0x276>
 8009eaa:	2d01      	cmp	r5, #1
 8009eac:	d002      	beq.n	8009eb4 <_scanf_float+0x1d4>
 8009eae:	2d04      	cmp	r5, #4
 8009eb0:	f47f af48 	bne.w	8009d44 <_scanf_float+0x64>
 8009eb4:	3501      	adds	r5, #1
 8009eb6:	b2ed      	uxtb	r5, r5
 8009eb8:	e7d8      	b.n	8009e6c <_scanf_float+0x18c>
 8009eba:	f1ba 0f01 	cmp.w	sl, #1
 8009ebe:	f47f af41 	bne.w	8009d44 <_scanf_float+0x64>
 8009ec2:	f04f 0a02 	mov.w	sl, #2
 8009ec6:	e7d1      	b.n	8009e6c <_scanf_float+0x18c>
 8009ec8:	b97d      	cbnz	r5, 8009eea <_scanf_float+0x20a>
 8009eca:	f1b9 0f00 	cmp.w	r9, #0
 8009ece:	f47f af3c 	bne.w	8009d4a <_scanf_float+0x6a>
 8009ed2:	6822      	ldr	r2, [r4, #0]
 8009ed4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009ed8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009edc:	f47f af39 	bne.w	8009d52 <_scanf_float+0x72>
 8009ee0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009ee4:	2501      	movs	r5, #1
 8009ee6:	6022      	str	r2, [r4, #0]
 8009ee8:	e7c0      	b.n	8009e6c <_scanf_float+0x18c>
 8009eea:	2d03      	cmp	r5, #3
 8009eec:	d0e2      	beq.n	8009eb4 <_scanf_float+0x1d4>
 8009eee:	2d05      	cmp	r5, #5
 8009ef0:	e7de      	b.n	8009eb0 <_scanf_float+0x1d0>
 8009ef2:	2d02      	cmp	r5, #2
 8009ef4:	f47f af26 	bne.w	8009d44 <_scanf_float+0x64>
 8009ef8:	2503      	movs	r5, #3
 8009efa:	e7b7      	b.n	8009e6c <_scanf_float+0x18c>
 8009efc:	2d06      	cmp	r5, #6
 8009efe:	f47f af21 	bne.w	8009d44 <_scanf_float+0x64>
 8009f02:	2507      	movs	r5, #7
 8009f04:	e7b2      	b.n	8009e6c <_scanf_float+0x18c>
 8009f06:	6822      	ldr	r2, [r4, #0]
 8009f08:	0591      	lsls	r1, r2, #22
 8009f0a:	f57f af1b 	bpl.w	8009d44 <_scanf_float+0x64>
 8009f0e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009f12:	f8cd 9004 	str.w	r9, [sp, #4]
 8009f16:	6022      	str	r2, [r4, #0]
 8009f18:	e7a8      	b.n	8009e6c <_scanf_float+0x18c>
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009f20:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009f24:	d006      	beq.n	8009f34 <_scanf_float+0x254>
 8009f26:	0550      	lsls	r0, r2, #21
 8009f28:	f57f af0c 	bpl.w	8009d44 <_scanf_float+0x64>
 8009f2c:	f1b9 0f00 	cmp.w	r9, #0
 8009f30:	f43f af0f 	beq.w	8009d52 <_scanf_float+0x72>
 8009f34:	0591      	lsls	r1, r2, #22
 8009f36:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009f3a:	bf58      	it	pl
 8009f3c:	9901      	ldrpl	r1, [sp, #4]
 8009f3e:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009f42:	bf58      	it	pl
 8009f44:	eba9 0101 	subpl.w	r1, r9, r1
 8009f48:	6022      	str	r2, [r4, #0]
 8009f4a:	f04f 0900 	mov.w	r9, #0
 8009f4e:	bf58      	it	pl
 8009f50:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009f54:	e78a      	b.n	8009e6c <_scanf_float+0x18c>
 8009f56:	f04f 0a03 	mov.w	sl, #3
 8009f5a:	e787      	b.n	8009e6c <_scanf_float+0x18c>
 8009f5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f60:	4639      	mov	r1, r7
 8009f62:	4640      	mov	r0, r8
 8009f64:	4798      	blx	r3
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f aedf 	beq.w	8009d2a <_scanf_float+0x4a>
 8009f6c:	e6ea      	b.n	8009d44 <_scanf_float+0x64>
 8009f6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f72:	463a      	mov	r2, r7
 8009f74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f78:	4640      	mov	r0, r8
 8009f7a:	4798      	blx	r3
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	3b01      	subs	r3, #1
 8009f80:	6123      	str	r3, [r4, #16]
 8009f82:	e6ec      	b.n	8009d5e <_scanf_float+0x7e>
 8009f84:	1e6b      	subs	r3, r5, #1
 8009f86:	2b06      	cmp	r3, #6
 8009f88:	d825      	bhi.n	8009fd6 <_scanf_float+0x2f6>
 8009f8a:	2d02      	cmp	r5, #2
 8009f8c:	d836      	bhi.n	8009ffc <_scanf_float+0x31c>
 8009f8e:	455e      	cmp	r6, fp
 8009f90:	f67f aee8 	bls.w	8009d64 <_scanf_float+0x84>
 8009f94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f98:	463a      	mov	r2, r7
 8009f9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f9e:	4640      	mov	r0, r8
 8009fa0:	4798      	blx	r3
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	6123      	str	r3, [r4, #16]
 8009fa8:	e7f1      	b.n	8009f8e <_scanf_float+0x2ae>
 8009faa:	9802      	ldr	r0, [sp, #8]
 8009fac:	463a      	mov	r2, r7
 8009fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fb2:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009fb6:	9002      	str	r0, [sp, #8]
 8009fb8:	4640      	mov	r0, r8
 8009fba:	4798      	blx	r3
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	6123      	str	r3, [r4, #16]
 8009fc2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009fc6:	fa5f fa8a 	uxtb.w	sl, sl
 8009fca:	f1ba 0f02 	cmp.w	sl, #2
 8009fce:	d1ec      	bne.n	8009faa <_scanf_float+0x2ca>
 8009fd0:	3d03      	subs	r5, #3
 8009fd2:	b2ed      	uxtb	r5, r5
 8009fd4:	1b76      	subs	r6, r6, r5
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	05da      	lsls	r2, r3, #23
 8009fda:	d52e      	bpl.n	800a03a <_scanf_float+0x35a>
 8009fdc:	055b      	lsls	r3, r3, #21
 8009fde:	d510      	bpl.n	800a002 <_scanf_float+0x322>
 8009fe0:	455e      	cmp	r6, fp
 8009fe2:	f67f aebf 	bls.w	8009d64 <_scanf_float+0x84>
 8009fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fea:	463a      	mov	r2, r7
 8009fec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ff0:	4640      	mov	r0, r8
 8009ff2:	4798      	blx	r3
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	e7f1      	b.n	8009fe0 <_scanf_float+0x300>
 8009ffc:	46aa      	mov	sl, r5
 8009ffe:	9602      	str	r6, [sp, #8]
 800a000:	e7df      	b.n	8009fc2 <_scanf_float+0x2e2>
 800a002:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a006:	1e75      	subs	r5, r6, #1
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	2965      	cmp	r1, #101	; 0x65
 800a00c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a010:	6123      	str	r3, [r4, #16]
 800a012:	d00c      	beq.n	800a02e <_scanf_float+0x34e>
 800a014:	2945      	cmp	r1, #69	; 0x45
 800a016:	d00a      	beq.n	800a02e <_scanf_float+0x34e>
 800a018:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a01c:	463a      	mov	r2, r7
 800a01e:	4640      	mov	r0, r8
 800a020:	1eb5      	subs	r5, r6, #2
 800a022:	4798      	blx	r3
 800a024:	6923      	ldr	r3, [r4, #16]
 800a026:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a02a:	3b01      	subs	r3, #1
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	462e      	mov	r6, r5
 800a030:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a034:	463a      	mov	r2, r7
 800a036:	4640      	mov	r0, r8
 800a038:	4798      	blx	r3
 800a03a:	6825      	ldr	r5, [r4, #0]
 800a03c:	f015 0510 	ands.w	r5, r5, #16
 800a040:	d158      	bne.n	800a0f4 <_scanf_float+0x414>
 800a042:	7035      	strb	r5, [r6, #0]
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a04a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a04e:	d11c      	bne.n	800a08a <_scanf_float+0x3aa>
 800a050:	9b01      	ldr	r3, [sp, #4]
 800a052:	454b      	cmp	r3, r9
 800a054:	eba3 0209 	sub.w	r2, r3, r9
 800a058:	d124      	bne.n	800a0a4 <_scanf_float+0x3c4>
 800a05a:	2200      	movs	r2, #0
 800a05c:	4659      	mov	r1, fp
 800a05e:	4640      	mov	r0, r8
 800a060:	f002 fd56 	bl	800cb10 <_strtod_r>
 800a064:	6821      	ldr	r1, [r4, #0]
 800a066:	9b03      	ldr	r3, [sp, #12]
 800a068:	f011 0f02 	tst.w	r1, #2
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	ec57 6b10 	vmov	r6, r7, d0
 800a072:	f103 0204 	add.w	r2, r3, #4
 800a076:	d020      	beq.n	800a0ba <_scanf_float+0x3da>
 800a078:	9903      	ldr	r1, [sp, #12]
 800a07a:	600a      	str	r2, [r1, #0]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	e9c3 6700 	strd	r6, r7, [r3]
 800a082:	68e3      	ldr	r3, [r4, #12]
 800a084:	3301      	adds	r3, #1
 800a086:	60e3      	str	r3, [r4, #12]
 800a088:	e66d      	b.n	8009d66 <_scanf_float+0x86>
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0e4      	beq.n	800a05a <_scanf_float+0x37a>
 800a090:	9905      	ldr	r1, [sp, #20]
 800a092:	230a      	movs	r3, #10
 800a094:	462a      	mov	r2, r5
 800a096:	4640      	mov	r0, r8
 800a098:	3101      	adds	r1, #1
 800a09a:	f002 fdc1 	bl	800cc20 <_strtol_r>
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	9e05      	ldr	r6, [sp, #20]
 800a0a2:	1ac2      	subs	r2, r0, r3
 800a0a4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a0a8:	4913      	ldr	r1, [pc, #76]	; (800a0f8 <_scanf_float+0x418>)
 800a0aa:	429e      	cmp	r6, r3
 800a0ac:	bf28      	it	cs
 800a0ae:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a0b2:	4630      	mov	r0, r6
 800a0b4:	f000 f954 	bl	800a360 <siprintf>
 800a0b8:	e7cf      	b.n	800a05a <_scanf_float+0x37a>
 800a0ba:	f011 0f04 	tst.w	r1, #4
 800a0be:	9903      	ldr	r1, [sp, #12]
 800a0c0:	600a      	str	r2, [r1, #0]
 800a0c2:	d1db      	bne.n	800a07c <_scanf_float+0x39c>
 800a0c4:	f8d3 8000 	ldr.w	r8, [r3]
 800a0c8:	ee10 2a10 	vmov	r2, s0
 800a0cc:	463b      	mov	r3, r7
 800a0ce:	ee10 0a10 	vmov	r0, s0
 800a0d2:	4639      	mov	r1, r7
 800a0d4:	f7f6 fd2e 	bl	8000b34 <__aeabi_dcmpun>
 800a0d8:	b128      	cbz	r0, 800a0e6 <_scanf_float+0x406>
 800a0da:	4808      	ldr	r0, [pc, #32]	; (800a0fc <_scanf_float+0x41c>)
 800a0dc:	f000 fac6 	bl	800a66c <nanf>
 800a0e0:	ed88 0a00 	vstr	s0, [r8]
 800a0e4:	e7cd      	b.n	800a082 <_scanf_float+0x3a2>
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	4639      	mov	r1, r7
 800a0ea:	f7f6 fd81 	bl	8000bf0 <__aeabi_d2f>
 800a0ee:	f8c8 0000 	str.w	r0, [r8]
 800a0f2:	e7c6      	b.n	800a082 <_scanf_float+0x3a2>
 800a0f4:	2500      	movs	r5, #0
 800a0f6:	e636      	b.n	8009d66 <_scanf_float+0x86>
 800a0f8:	0800f29c 	.word	0x0800f29c
 800a0fc:	0800f62d 	.word	0x0800f62d

0800a100 <std>:
 800a100:	2300      	movs	r3, #0
 800a102:	b510      	push	{r4, lr}
 800a104:	4604      	mov	r4, r0
 800a106:	6083      	str	r3, [r0, #8]
 800a108:	8181      	strh	r1, [r0, #12]
 800a10a:	4619      	mov	r1, r3
 800a10c:	6643      	str	r3, [r0, #100]	; 0x64
 800a10e:	81c2      	strh	r2, [r0, #14]
 800a110:	2208      	movs	r2, #8
 800a112:	6183      	str	r3, [r0, #24]
 800a114:	e9c0 3300 	strd	r3, r3, [r0]
 800a118:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a11c:	305c      	adds	r0, #92	; 0x5c
 800a11e:	f000 fa17 	bl	800a550 <memset>
 800a122:	4b0d      	ldr	r3, [pc, #52]	; (800a158 <std+0x58>)
 800a124:	6224      	str	r4, [r4, #32]
 800a126:	6263      	str	r3, [r4, #36]	; 0x24
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <std+0x5c>)
 800a12a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a12c:	4b0c      	ldr	r3, [pc, #48]	; (800a160 <std+0x60>)
 800a12e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a130:	4b0c      	ldr	r3, [pc, #48]	; (800a164 <std+0x64>)
 800a132:	6323      	str	r3, [r4, #48]	; 0x30
 800a134:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <std+0x68>)
 800a136:	429c      	cmp	r4, r3
 800a138:	d006      	beq.n	800a148 <std+0x48>
 800a13a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a13e:	4294      	cmp	r4, r2
 800a140:	d002      	beq.n	800a148 <std+0x48>
 800a142:	33d0      	adds	r3, #208	; 0xd0
 800a144:	429c      	cmp	r4, r3
 800a146:	d105      	bne.n	800a154 <std+0x54>
 800a148:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a150:	f000 ba7a 	b.w	800a648 <__retarget_lock_init_recursive>
 800a154:	bd10      	pop	{r4, pc}
 800a156:	bf00      	nop
 800a158:	0800a3a1 	.word	0x0800a3a1
 800a15c:	0800a3c3 	.word	0x0800a3c3
 800a160:	0800a3fb 	.word	0x0800a3fb
 800a164:	0800a41f 	.word	0x0800a41f
 800a168:	20001ddc 	.word	0x20001ddc

0800a16c <stdio_exit_handler>:
 800a16c:	4a02      	ldr	r2, [pc, #8]	; (800a178 <stdio_exit_handler+0xc>)
 800a16e:	4903      	ldr	r1, [pc, #12]	; (800a17c <stdio_exit_handler+0x10>)
 800a170:	4803      	ldr	r0, [pc, #12]	; (800a180 <stdio_exit_handler+0x14>)
 800a172:	f000 b869 	b.w	800a248 <_fwalk_sglue>
 800a176:	bf00      	nop
 800a178:	2000001c 	.word	0x2000001c
 800a17c:	0800d265 	.word	0x0800d265
 800a180:	20000028 	.word	0x20000028

0800a184 <cleanup_stdio>:
 800a184:	6841      	ldr	r1, [r0, #4]
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <cleanup_stdio+0x34>)
 800a188:	4299      	cmp	r1, r3
 800a18a:	b510      	push	{r4, lr}
 800a18c:	4604      	mov	r4, r0
 800a18e:	d001      	beq.n	800a194 <cleanup_stdio+0x10>
 800a190:	f003 f868 	bl	800d264 <_fflush_r>
 800a194:	68a1      	ldr	r1, [r4, #8]
 800a196:	4b09      	ldr	r3, [pc, #36]	; (800a1bc <cleanup_stdio+0x38>)
 800a198:	4299      	cmp	r1, r3
 800a19a:	d002      	beq.n	800a1a2 <cleanup_stdio+0x1e>
 800a19c:	4620      	mov	r0, r4
 800a19e:	f003 f861 	bl	800d264 <_fflush_r>
 800a1a2:	68e1      	ldr	r1, [r4, #12]
 800a1a4:	4b06      	ldr	r3, [pc, #24]	; (800a1c0 <cleanup_stdio+0x3c>)
 800a1a6:	4299      	cmp	r1, r3
 800a1a8:	d004      	beq.n	800a1b4 <cleanup_stdio+0x30>
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b0:	f003 b858 	b.w	800d264 <_fflush_r>
 800a1b4:	bd10      	pop	{r4, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20001ddc 	.word	0x20001ddc
 800a1bc:	20001e44 	.word	0x20001e44
 800a1c0:	20001eac 	.word	0x20001eac

0800a1c4 <global_stdio_init.part.0>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	4b0b      	ldr	r3, [pc, #44]	; (800a1f4 <global_stdio_init.part.0+0x30>)
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	4c0b      	ldr	r4, [pc, #44]	; (800a1f8 <global_stdio_init.part.0+0x34>)
 800a1cc:	4a0b      	ldr	r2, [pc, #44]	; (800a1fc <global_stdio_init.part.0+0x38>)
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	601a      	str	r2, [r3, #0]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f7ff ff94 	bl	800a100 <std>
 800a1d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1dc:	2201      	movs	r2, #1
 800a1de:	2109      	movs	r1, #9
 800a1e0:	f7ff ff8e 	bl	800a100 <std>
 800a1e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1e8:	2202      	movs	r2, #2
 800a1ea:	2112      	movs	r1, #18
 800a1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f0:	f7ff bf86 	b.w	800a100 <std>
 800a1f4:	20001f14 	.word	0x20001f14
 800a1f8:	20001ddc 	.word	0x20001ddc
 800a1fc:	0800a16d 	.word	0x0800a16d

0800a200 <__sfp_lock_acquire>:
 800a200:	4801      	ldr	r0, [pc, #4]	; (800a208 <__sfp_lock_acquire+0x8>)
 800a202:	f000 ba22 	b.w	800a64a <__retarget_lock_acquire_recursive>
 800a206:	bf00      	nop
 800a208:	20001f1d 	.word	0x20001f1d

0800a20c <__sfp_lock_release>:
 800a20c:	4801      	ldr	r0, [pc, #4]	; (800a214 <__sfp_lock_release+0x8>)
 800a20e:	f000 ba1d 	b.w	800a64c <__retarget_lock_release_recursive>
 800a212:	bf00      	nop
 800a214:	20001f1d 	.word	0x20001f1d

0800a218 <__sinit>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	4604      	mov	r4, r0
 800a21c:	f7ff fff0 	bl	800a200 <__sfp_lock_acquire>
 800a220:	6a23      	ldr	r3, [r4, #32]
 800a222:	b11b      	cbz	r3, 800a22c <__sinit+0x14>
 800a224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a228:	f7ff bff0 	b.w	800a20c <__sfp_lock_release>
 800a22c:	4b04      	ldr	r3, [pc, #16]	; (800a240 <__sinit+0x28>)
 800a22e:	6223      	str	r3, [r4, #32]
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <__sinit+0x2c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d1f5      	bne.n	800a224 <__sinit+0xc>
 800a238:	f7ff ffc4 	bl	800a1c4 <global_stdio_init.part.0>
 800a23c:	e7f2      	b.n	800a224 <__sinit+0xc>
 800a23e:	bf00      	nop
 800a240:	0800a185 	.word	0x0800a185
 800a244:	20001f14 	.word	0x20001f14

0800a248 <_fwalk_sglue>:
 800a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a24c:	4607      	mov	r7, r0
 800a24e:	4688      	mov	r8, r1
 800a250:	4614      	mov	r4, r2
 800a252:	2600      	movs	r6, #0
 800a254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a258:	f1b9 0901 	subs.w	r9, r9, #1
 800a25c:	d505      	bpl.n	800a26a <_fwalk_sglue+0x22>
 800a25e:	6824      	ldr	r4, [r4, #0]
 800a260:	2c00      	cmp	r4, #0
 800a262:	d1f7      	bne.n	800a254 <_fwalk_sglue+0xc>
 800a264:	4630      	mov	r0, r6
 800a266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26a:	89ab      	ldrh	r3, [r5, #12]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d907      	bls.n	800a280 <_fwalk_sglue+0x38>
 800a270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a274:	3301      	adds	r3, #1
 800a276:	d003      	beq.n	800a280 <_fwalk_sglue+0x38>
 800a278:	4629      	mov	r1, r5
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c0      	blx	r8
 800a27e:	4306      	orrs	r6, r0
 800a280:	3568      	adds	r5, #104	; 0x68
 800a282:	e7e9      	b.n	800a258 <_fwalk_sglue+0x10>

0800a284 <iprintf>:
 800a284:	b40f      	push	{r0, r1, r2, r3}
 800a286:	b507      	push	{r0, r1, r2, lr}
 800a288:	4906      	ldr	r1, [pc, #24]	; (800a2a4 <iprintf+0x20>)
 800a28a:	ab04      	add	r3, sp, #16
 800a28c:	6808      	ldr	r0, [r1, #0]
 800a28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a292:	6881      	ldr	r1, [r0, #8]
 800a294:	9301      	str	r3, [sp, #4]
 800a296:	f002 fe47 	bl	800cf28 <_vfiprintf_r>
 800a29a:	b003      	add	sp, #12
 800a29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2a0:	b004      	add	sp, #16
 800a2a2:	4770      	bx	lr
 800a2a4:	20000074 	.word	0x20000074

0800a2a8 <_puts_r>:
 800a2a8:	6a03      	ldr	r3, [r0, #32]
 800a2aa:	b570      	push	{r4, r5, r6, lr}
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	460e      	mov	r6, r1
 800a2b0:	6884      	ldr	r4, [r0, #8]
 800a2b2:	b90b      	cbnz	r3, 800a2b8 <_puts_r+0x10>
 800a2b4:	f7ff ffb0 	bl	800a218 <__sinit>
 800a2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2ba:	07db      	lsls	r3, r3, #31
 800a2bc:	d405      	bmi.n	800a2ca <_puts_r+0x22>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	0598      	lsls	r0, r3, #22
 800a2c2:	d402      	bmi.n	800a2ca <_puts_r+0x22>
 800a2c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c6:	f000 f9c0 	bl	800a64a <__retarget_lock_acquire_recursive>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	0719      	lsls	r1, r3, #28
 800a2ce:	d513      	bpl.n	800a2f8 <_puts_r+0x50>
 800a2d0:	6923      	ldr	r3, [r4, #16]
 800a2d2:	b18b      	cbz	r3, 800a2f8 <_puts_r+0x50>
 800a2d4:	3e01      	subs	r6, #1
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	60a3      	str	r3, [r4, #8]
 800a2e0:	b9e9      	cbnz	r1, 800a31e <_puts_r+0x76>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	da2e      	bge.n	800a344 <_puts_r+0x9c>
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	210a      	movs	r1, #10
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	f000 f89b 	bl	800a426 <__swbuf_r>
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d007      	beq.n	800a304 <_puts_r+0x5c>
 800a2f4:	250a      	movs	r5, #10
 800a2f6:	e007      	b.n	800a308 <_puts_r+0x60>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f8d0 	bl	800a4a0 <__swsetup_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	d0e7      	beq.n	800a2d4 <_puts_r+0x2c>
 800a304:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a308:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a30a:	07da      	lsls	r2, r3, #31
 800a30c:	d405      	bmi.n	800a31a <_puts_r+0x72>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	059b      	lsls	r3, r3, #22
 800a312:	d402      	bmi.n	800a31a <_puts_r+0x72>
 800a314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a316:	f000 f999 	bl	800a64c <__retarget_lock_release_recursive>
 800a31a:	4628      	mov	r0, r5
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
 800a31e:	2b00      	cmp	r3, #0
 800a320:	da04      	bge.n	800a32c <_puts_r+0x84>
 800a322:	69a2      	ldr	r2, [r4, #24]
 800a324:	429a      	cmp	r2, r3
 800a326:	dc06      	bgt.n	800a336 <_puts_r+0x8e>
 800a328:	290a      	cmp	r1, #10
 800a32a:	d004      	beq.n	800a336 <_puts_r+0x8e>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	6022      	str	r2, [r4, #0]
 800a332:	7019      	strb	r1, [r3, #0]
 800a334:	e7cf      	b.n	800a2d6 <_puts_r+0x2e>
 800a336:	4622      	mov	r2, r4
 800a338:	4628      	mov	r0, r5
 800a33a:	f000 f874 	bl	800a426 <__swbuf_r>
 800a33e:	3001      	adds	r0, #1
 800a340:	d1c9      	bne.n	800a2d6 <_puts_r+0x2e>
 800a342:	e7df      	b.n	800a304 <_puts_r+0x5c>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	250a      	movs	r5, #10
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	6022      	str	r2, [r4, #0]
 800a34c:	701d      	strb	r5, [r3, #0]
 800a34e:	e7db      	b.n	800a308 <_puts_r+0x60>

0800a350 <puts>:
 800a350:	4b02      	ldr	r3, [pc, #8]	; (800a35c <puts+0xc>)
 800a352:	4601      	mov	r1, r0
 800a354:	6818      	ldr	r0, [r3, #0]
 800a356:	f7ff bfa7 	b.w	800a2a8 <_puts_r>
 800a35a:	bf00      	nop
 800a35c:	20000074 	.word	0x20000074

0800a360 <siprintf>:
 800a360:	b40e      	push	{r1, r2, r3}
 800a362:	b500      	push	{lr}
 800a364:	b09c      	sub	sp, #112	; 0x70
 800a366:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a36a:	ab1d      	add	r3, sp, #116	; 0x74
 800a36c:	9002      	str	r0, [sp, #8]
 800a36e:	9006      	str	r0, [sp, #24]
 800a370:	9107      	str	r1, [sp, #28]
 800a372:	9104      	str	r1, [sp, #16]
 800a374:	4808      	ldr	r0, [pc, #32]	; (800a398 <siprintf+0x38>)
 800a376:	4909      	ldr	r1, [pc, #36]	; (800a39c <siprintf+0x3c>)
 800a378:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37c:	9105      	str	r1, [sp, #20]
 800a37e:	a902      	add	r1, sp, #8
 800a380:	6800      	ldr	r0, [r0, #0]
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	f002 fca8 	bl	800ccd8 <_svfiprintf_r>
 800a388:	9b02      	ldr	r3, [sp, #8]
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
 800a38e:	b01c      	add	sp, #112	; 0x70
 800a390:	f85d eb04 	ldr.w	lr, [sp], #4
 800a394:	b003      	add	sp, #12
 800a396:	4770      	bx	lr
 800a398:	20000074 	.word	0x20000074
 800a39c:	ffff0208 	.word	0xffff0208

0800a3a0 <__sread>:
 800a3a0:	b510      	push	{r4, lr}
 800a3a2:	460c      	mov	r4, r1
 800a3a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a8:	f000 f900 	bl	800a5ac <_read_r>
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	bfab      	itete	ge
 800a3b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b4:	181b      	addge	r3, r3, r0
 800a3b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3ba:	bfac      	ite	ge
 800a3bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3be:	81a3      	strhlt	r3, [r4, #12]
 800a3c0:	bd10      	pop	{r4, pc}

0800a3c2 <__swrite>:
 800a3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	898b      	ldrh	r3, [r1, #12]
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	05db      	lsls	r3, r3, #23
 800a3d0:	4616      	mov	r6, r2
 800a3d2:	d505      	bpl.n	800a3e0 <__swrite+0x1e>
 800a3d4:	2302      	movs	r3, #2
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3dc:	f000 f8d4 	bl	800a588 <_lseek_r>
 800a3e0:	89a3      	ldrh	r3, [r4, #12]
 800a3e2:	4632      	mov	r2, r6
 800a3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	463b      	mov	r3, r7
 800a3f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f6:	f000 b8eb 	b.w	800a5d0 <_write_r>

0800a3fa <__sseek>:
 800a3fa:	b510      	push	{r4, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a402:	f000 f8c1 	bl	800a588 <_lseek_r>
 800a406:	1c43      	adds	r3, r0, #1
 800a408:	89a3      	ldrh	r3, [r4, #12]
 800a40a:	bf15      	itete	ne
 800a40c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a40e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a412:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a416:	81a3      	strheq	r3, [r4, #12]
 800a418:	bf18      	it	ne
 800a41a:	81a3      	strhne	r3, [r4, #12]
 800a41c:	bd10      	pop	{r4, pc}

0800a41e <__sclose>:
 800a41e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a422:	f000 b8a1 	b.w	800a568 <_close_r>

0800a426 <__swbuf_r>:
 800a426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a428:	460e      	mov	r6, r1
 800a42a:	4614      	mov	r4, r2
 800a42c:	4605      	mov	r5, r0
 800a42e:	b118      	cbz	r0, 800a438 <__swbuf_r+0x12>
 800a430:	6a03      	ldr	r3, [r0, #32]
 800a432:	b90b      	cbnz	r3, 800a438 <__swbuf_r+0x12>
 800a434:	f7ff fef0 	bl	800a218 <__sinit>
 800a438:	69a3      	ldr	r3, [r4, #24]
 800a43a:	60a3      	str	r3, [r4, #8]
 800a43c:	89a3      	ldrh	r3, [r4, #12]
 800a43e:	071a      	lsls	r2, r3, #28
 800a440:	d525      	bpl.n	800a48e <__swbuf_r+0x68>
 800a442:	6923      	ldr	r3, [r4, #16]
 800a444:	b31b      	cbz	r3, 800a48e <__swbuf_r+0x68>
 800a446:	6823      	ldr	r3, [r4, #0]
 800a448:	b2f6      	uxtb	r6, r6
 800a44a:	6922      	ldr	r2, [r4, #16]
 800a44c:	4637      	mov	r7, r6
 800a44e:	1a98      	subs	r0, r3, r2
 800a450:	6963      	ldr	r3, [r4, #20]
 800a452:	4283      	cmp	r3, r0
 800a454:	dc04      	bgt.n	800a460 <__swbuf_r+0x3a>
 800a456:	4621      	mov	r1, r4
 800a458:	4628      	mov	r0, r5
 800a45a:	f002 ff03 	bl	800d264 <_fflush_r>
 800a45e:	b9e0      	cbnz	r0, 800a49a <__swbuf_r+0x74>
 800a460:	68a3      	ldr	r3, [r4, #8]
 800a462:	3b01      	subs	r3, #1
 800a464:	60a3      	str	r3, [r4, #8]
 800a466:	6823      	ldr	r3, [r4, #0]
 800a468:	1c5a      	adds	r2, r3, #1
 800a46a:	6022      	str	r2, [r4, #0]
 800a46c:	701e      	strb	r6, [r3, #0]
 800a46e:	1c43      	adds	r3, r0, #1
 800a470:	6962      	ldr	r2, [r4, #20]
 800a472:	429a      	cmp	r2, r3
 800a474:	d004      	beq.n	800a480 <__swbuf_r+0x5a>
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	07db      	lsls	r3, r3, #31
 800a47a:	d506      	bpl.n	800a48a <__swbuf_r+0x64>
 800a47c:	2e0a      	cmp	r6, #10
 800a47e:	d104      	bne.n	800a48a <__swbuf_r+0x64>
 800a480:	4621      	mov	r1, r4
 800a482:	4628      	mov	r0, r5
 800a484:	f002 feee 	bl	800d264 <_fflush_r>
 800a488:	b938      	cbnz	r0, 800a49a <__swbuf_r+0x74>
 800a48a:	4638      	mov	r0, r7
 800a48c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a48e:	4621      	mov	r1, r4
 800a490:	4628      	mov	r0, r5
 800a492:	f000 f805 	bl	800a4a0 <__swsetup_r>
 800a496:	2800      	cmp	r0, #0
 800a498:	d0d5      	beq.n	800a446 <__swbuf_r+0x20>
 800a49a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a49e:	e7f4      	b.n	800a48a <__swbuf_r+0x64>

0800a4a0 <__swsetup_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <__swsetup_r+0xac>)
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	460c      	mov	r4, r1
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	b118      	cbz	r0, 800a4b4 <__swsetup_r+0x14>
 800a4ac:	6a03      	ldr	r3, [r0, #32]
 800a4ae:	b90b      	cbnz	r3, 800a4b4 <__swsetup_r+0x14>
 800a4b0:	f7ff feb2 	bl	800a218 <__sinit>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4ba:	0718      	lsls	r0, r3, #28
 800a4bc:	d422      	bmi.n	800a504 <__swsetup_r+0x64>
 800a4be:	06d9      	lsls	r1, r3, #27
 800a4c0:	d407      	bmi.n	800a4d2 <__swsetup_r+0x32>
 800a4c2:	2309      	movs	r3, #9
 800a4c4:	602b      	str	r3, [r5, #0]
 800a4c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	e034      	b.n	800a53c <__swsetup_r+0x9c>
 800a4d2:	0758      	lsls	r0, r3, #29
 800a4d4:	d512      	bpl.n	800a4fc <__swsetup_r+0x5c>
 800a4d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4d8:	b141      	cbz	r1, 800a4ec <__swsetup_r+0x4c>
 800a4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4de:	4299      	cmp	r1, r3
 800a4e0:	d002      	beq.n	800a4e8 <__swsetup_r+0x48>
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	f000 ff48 	bl	800b378 <_free_r>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	6363      	str	r3, [r4, #52]	; 0x34
 800a4ec:	89a3      	ldrh	r3, [r4, #12]
 800a4ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4f2:	81a3      	strh	r3, [r4, #12]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	6063      	str	r3, [r4, #4]
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	6023      	str	r3, [r4, #0]
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	f043 0308 	orr.w	r3, r3, #8
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	6923      	ldr	r3, [r4, #16]
 800a506:	b94b      	cbnz	r3, 800a51c <__swsetup_r+0x7c>
 800a508:	89a3      	ldrh	r3, [r4, #12]
 800a50a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a50e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a512:	d003      	beq.n	800a51c <__swsetup_r+0x7c>
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f002 fef1 	bl	800d2fe <__smakebuf_r>
 800a51c:	89a0      	ldrh	r0, [r4, #12]
 800a51e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a522:	f010 0301 	ands.w	r3, r0, #1
 800a526:	d00a      	beq.n	800a53e <__swsetup_r+0x9e>
 800a528:	2300      	movs	r3, #0
 800a52a:	60a3      	str	r3, [r4, #8]
 800a52c:	6963      	ldr	r3, [r4, #20]
 800a52e:	425b      	negs	r3, r3
 800a530:	61a3      	str	r3, [r4, #24]
 800a532:	6923      	ldr	r3, [r4, #16]
 800a534:	b943      	cbnz	r3, 800a548 <__swsetup_r+0xa8>
 800a536:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a53a:	d1c4      	bne.n	800a4c6 <__swsetup_r+0x26>
 800a53c:	bd38      	pop	{r3, r4, r5, pc}
 800a53e:	0781      	lsls	r1, r0, #30
 800a540:	bf58      	it	pl
 800a542:	6963      	ldrpl	r3, [r4, #20]
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	e7f4      	b.n	800a532 <__swsetup_r+0x92>
 800a548:	2000      	movs	r0, #0
 800a54a:	e7f7      	b.n	800a53c <__swsetup_r+0x9c>
 800a54c:	20000074 	.word	0x20000074

0800a550 <memset>:
 800a550:	4402      	add	r2, r0
 800a552:	4603      	mov	r3, r0
 800a554:	4293      	cmp	r3, r2
 800a556:	d100      	bne.n	800a55a <memset+0xa>
 800a558:	4770      	bx	lr
 800a55a:	f803 1b01 	strb.w	r1, [r3], #1
 800a55e:	e7f9      	b.n	800a554 <memset+0x4>

0800a560 <_localeconv_r>:
 800a560:	4800      	ldr	r0, [pc, #0]	; (800a564 <_localeconv_r+0x4>)
 800a562:	4770      	bx	lr
 800a564:	20000168 	.word	0x20000168

0800a568 <_close_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	2300      	movs	r3, #0
 800a56c:	4d05      	ldr	r5, [pc, #20]	; (800a584 <_close_r+0x1c>)
 800a56e:	4604      	mov	r4, r0
 800a570:	4608      	mov	r0, r1
 800a572:	602b      	str	r3, [r5, #0]
 800a574:	f7f7 fd1d 	bl	8001fb2 <_close>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_close_r+0x1a>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_close_r+0x1a>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	20001f18 	.word	0x20001f18

0800a588 <_lseek_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4604      	mov	r4, r0
 800a58c:	4d06      	ldr	r5, [pc, #24]	; (800a5a8 <_lseek_r+0x20>)
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7f7 fd32 	bl	8002000 <_lseek>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_lseek_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_lseek_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20001f18 	.word	0x20001f18

0800a5ac <_read_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	4d06      	ldr	r5, [pc, #24]	; (800a5cc <_read_r+0x20>)
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7f7 fcc0 	bl	8001f40 <_read>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_read_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_read_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	20001f18 	.word	0x20001f18

0800a5d0 <_write_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4d06      	ldr	r5, [pc, #24]	; (800a5f0 <_write_r+0x20>)
 800a5d6:	4608      	mov	r0, r1
 800a5d8:	4611      	mov	r1, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f7f7 fccb 	bl	8001f7a <_write>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_write_r+0x1e>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_write_r+0x1e>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20001f18 	.word	0x20001f18

0800a5f4 <__errno>:
 800a5f4:	4b01      	ldr	r3, [pc, #4]	; (800a5fc <__errno+0x8>)
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	20000074 	.word	0x20000074

0800a600 <__libc_init_array>:
 800a600:	b570      	push	{r4, r5, r6, lr}
 800a602:	4d0d      	ldr	r5, [pc, #52]	; (800a638 <__libc_init_array+0x38>)
 800a604:	2600      	movs	r6, #0
 800a606:	4c0d      	ldr	r4, [pc, #52]	; (800a63c <__libc_init_array+0x3c>)
 800a608:	1b64      	subs	r4, r4, r5
 800a60a:	10a4      	asrs	r4, r4, #2
 800a60c:	42a6      	cmp	r6, r4
 800a60e:	d109      	bne.n	800a624 <__libc_init_array+0x24>
 800a610:	4d0b      	ldr	r5, [pc, #44]	; (800a640 <__libc_init_array+0x40>)
 800a612:	2600      	movs	r6, #0
 800a614:	4c0b      	ldr	r4, [pc, #44]	; (800a644 <__libc_init_array+0x44>)
 800a616:	f004 fa61 	bl	800eadc <_init>
 800a61a:	1b64      	subs	r4, r4, r5
 800a61c:	10a4      	asrs	r4, r4, #2
 800a61e:	42a6      	cmp	r6, r4
 800a620:	d105      	bne.n	800a62e <__libc_init_array+0x2e>
 800a622:	bd70      	pop	{r4, r5, r6, pc}
 800a624:	f855 3b04 	ldr.w	r3, [r5], #4
 800a628:	3601      	adds	r6, #1
 800a62a:	4798      	blx	r3
 800a62c:	e7ee      	b.n	800a60c <__libc_init_array+0xc>
 800a62e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a632:	3601      	adds	r6, #1
 800a634:	4798      	blx	r3
 800a636:	e7f2      	b.n	800a61e <__libc_init_array+0x1e>
 800a638:	0800fa98 	.word	0x0800fa98
 800a63c:	0800fa98 	.word	0x0800fa98
 800a640:	0800fa98 	.word	0x0800fa98
 800a644:	0800fa9c 	.word	0x0800fa9c

0800a648 <__retarget_lock_init_recursive>:
 800a648:	4770      	bx	lr

0800a64a <__retarget_lock_acquire_recursive>:
 800a64a:	4770      	bx	lr

0800a64c <__retarget_lock_release_recursive>:
 800a64c:	4770      	bx	lr

0800a64e <memchr>:
 800a64e:	b2c9      	uxtb	r1, r1
 800a650:	4402      	add	r2, r0
 800a652:	b510      	push	{r4, lr}
 800a654:	4290      	cmp	r0, r2
 800a656:	4603      	mov	r3, r0
 800a658:	d101      	bne.n	800a65e <memchr+0x10>
 800a65a:	2300      	movs	r3, #0
 800a65c:	e003      	b.n	800a666 <memchr+0x18>
 800a65e:	781c      	ldrb	r4, [r3, #0]
 800a660:	3001      	adds	r0, #1
 800a662:	428c      	cmp	r4, r1
 800a664:	d1f6      	bne.n	800a654 <memchr+0x6>
 800a666:	4618      	mov	r0, r3
 800a668:	bd10      	pop	{r4, pc}
	...

0800a66c <nanf>:
 800a66c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a674 <nanf+0x8>
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	7fc00000 	.word	0x7fc00000

0800a678 <quorem>:
 800a678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	6903      	ldr	r3, [r0, #16]
 800a67e:	4607      	mov	r7, r0
 800a680:	690c      	ldr	r4, [r1, #16]
 800a682:	42a3      	cmp	r3, r4
 800a684:	f2c0 8086 	blt.w	800a794 <quorem+0x11c>
 800a688:	3c01      	subs	r4, #1
 800a68a:	f100 0514 	add.w	r5, r0, #20
 800a68e:	f101 0814 	add.w	r8, r1, #20
 800a692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a69a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6a8:	3301      	adds	r3, #1
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6b0:	d335      	bcc.n	800a71e <quorem+0xa6>
 800a6b2:	f04f 0e00 	mov.w	lr, #0
 800a6b6:	4640      	mov	r0, r8
 800a6b8:	46ac      	mov	ip, r5
 800a6ba:	46f2      	mov	sl, lr
 800a6bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6c0:	b293      	uxth	r3, r2
 800a6c2:	4581      	cmp	r9, r0
 800a6c4:	fb06 e303 	mla	r3, r6, r3, lr
 800a6c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6cc:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	fb06 220e 	mla	r2, r6, lr, r2
 800a6d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a6da:	f8dc a000 	ldr.w	sl, [ip]
 800a6de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6e2:	fa1f fa8a 	uxth.w	sl, sl
 800a6e6:	b292      	uxth	r2, r2
 800a6e8:	4453      	add	r3, sl
 800a6ea:	9300      	str	r3, [sp, #0]
 800a6ec:	f8dc 3000 	ldr.w	r3, [ip]
 800a6f0:	ebc2 4213 	rsb	r2, r2, r3, lsr #16
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6fa:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a702:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a706:	f84c 3b04 	str.w	r3, [ip], #4
 800a70a:	d2d7      	bcs.n	800a6bc <quorem+0x44>
 800a70c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a710:	b92b      	cbnz	r3, 800a71e <quorem+0xa6>
 800a712:	9b01      	ldr	r3, [sp, #4]
 800a714:	3b04      	subs	r3, #4
 800a716:	429d      	cmp	r5, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	d32f      	bcc.n	800a77c <quorem+0x104>
 800a71c:	613c      	str	r4, [r7, #16]
 800a71e:	4638      	mov	r0, r7
 800a720:	f001 f9f2 	bl	800bb08 <__mcmp>
 800a724:	2800      	cmp	r0, #0
 800a726:	db25      	blt.n	800a774 <quorem+0xfc>
 800a728:	3601      	adds	r6, #1
 800a72a:	4629      	mov	r1, r5
 800a72c:	2000      	movs	r0, #0
 800a72e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a732:	f8d1 c000 	ldr.w	ip, [r1]
 800a736:	b293      	uxth	r3, r2
 800a738:	45c1      	cmp	r9, r8
 800a73a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a73e:	eba0 0303 	sub.w	r3, r0, r3
 800a742:	fa1f f08c 	uxth.w	r0, ip
 800a746:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a74a:	4403      	add	r3, r0
 800a74c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a750:	b29b      	uxth	r3, r3
 800a752:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a75a:	f841 3b04 	str.w	r3, [r1], #4
 800a75e:	d2e6      	bcs.n	800a72e <quorem+0xb6>
 800a760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a764:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a768:	b922      	cbnz	r2, 800a774 <quorem+0xfc>
 800a76a:	3b04      	subs	r3, #4
 800a76c:	429d      	cmp	r5, r3
 800a76e:	461a      	mov	r2, r3
 800a770:	d30a      	bcc.n	800a788 <quorem+0x110>
 800a772:	613c      	str	r4, [r7, #16]
 800a774:	4630      	mov	r0, r6
 800a776:	b003      	add	sp, #12
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	6812      	ldr	r2, [r2, #0]
 800a77e:	3b04      	subs	r3, #4
 800a780:	2a00      	cmp	r2, #0
 800a782:	d1cb      	bne.n	800a71c <quorem+0xa4>
 800a784:	3c01      	subs	r4, #1
 800a786:	e7c6      	b.n	800a716 <quorem+0x9e>
 800a788:	6812      	ldr	r2, [r2, #0]
 800a78a:	3b04      	subs	r3, #4
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	d1f0      	bne.n	800a772 <quorem+0xfa>
 800a790:	3c01      	subs	r4, #1
 800a792:	e7eb      	b.n	800a76c <quorem+0xf4>
 800a794:	2000      	movs	r0, #0
 800a796:	e7ee      	b.n	800a776 <quorem+0xfe>

0800a798 <_dtoa_r>:
 800a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	69c5      	ldr	r5, [r0, #28]
 800a79e:	4604      	mov	r4, r0
 800a7a0:	ed2d 8b04 	vpush	{d8-d9}
 800a7a4:	b093      	sub	sp, #76	; 0x4c
 800a7a6:	ec57 6b10 	vmov	r6, r7, d0
 800a7aa:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a7ae:	9107      	str	r1, [sp, #28]
 800a7b0:	920a      	str	r2, [sp, #40]	; 0x28
 800a7b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a7b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7b8:	b975      	cbnz	r5, 800a7d8 <_dtoa_r+0x40>
 800a7ba:	2010      	movs	r0, #16
 800a7bc:	f000 fe28 	bl	800b410 <malloc>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	61e0      	str	r0, [r4, #28]
 800a7c4:	b920      	cbnz	r0, 800a7d0 <_dtoa_r+0x38>
 800a7c6:	4bae      	ldr	r3, [pc, #696]	; (800aa80 <_dtoa_r+0x2e8>)
 800a7c8:	21ef      	movs	r1, #239	; 0xef
 800a7ca:	48ae      	ldr	r0, [pc, #696]	; (800aa84 <_dtoa_r+0x2ec>)
 800a7cc:	f002 fe48 	bl	800d460 <__assert_func>
 800a7d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7d4:	6005      	str	r5, [r0, #0]
 800a7d6:	60c5      	str	r5, [r0, #12]
 800a7d8:	69e3      	ldr	r3, [r4, #28]
 800a7da:	6819      	ldr	r1, [r3, #0]
 800a7dc:	b151      	cbz	r1, 800a7f4 <_dtoa_r+0x5c>
 800a7de:	685a      	ldr	r2, [r3, #4]
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	4093      	lsls	r3, r2
 800a7e6:	604a      	str	r2, [r1, #4]
 800a7e8:	608b      	str	r3, [r1, #8]
 800a7ea:	f000 ff05 	bl	800b5f8 <_Bfree>
 800a7ee:	69e3      	ldr	r3, [r4, #28]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	1e3b      	subs	r3, r7, #0
 800a7f6:	bfb7      	itett	lt
 800a7f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7fc:	2300      	movge	r3, #0
 800a7fe:	2201      	movlt	r2, #1
 800a800:	9303      	strlt	r3, [sp, #12]
 800a802:	bfac      	ite	ge
 800a804:	f8c8 3000 	strge.w	r3, [r8]
 800a808:	f8c8 2000 	strlt.w	r2, [r8]
 800a80c:	4b9e      	ldr	r3, [pc, #632]	; (800aa88 <_dtoa_r+0x2f0>)
 800a80e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a812:	ea33 0308 	bics.w	r3, r3, r8
 800a816:	d11b      	bne.n	800a850 <_dtoa_r+0xb8>
 800a818:	f242 730f 	movw	r3, #9999	; 0x270f
 800a81c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a81e:	6013      	str	r3, [r2, #0]
 800a820:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a824:	4333      	orrs	r3, r6
 800a826:	f000 8592 	beq.w	800b34e <_dtoa_r+0xbb6>
 800a82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a82c:	b963      	cbnz	r3, 800a848 <_dtoa_r+0xb0>
 800a82e:	4b97      	ldr	r3, [pc, #604]	; (800aa8c <_dtoa_r+0x2f4>)
 800a830:	e027      	b.n	800a882 <_dtoa_r+0xea>
 800a832:	4b97      	ldr	r3, [pc, #604]	; (800aa90 <_dtoa_r+0x2f8>)
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	3308      	adds	r3, #8
 800a838:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a83a:	6013      	str	r3, [r2, #0]
 800a83c:	9800      	ldr	r0, [sp, #0]
 800a83e:	b013      	add	sp, #76	; 0x4c
 800a840:	ecbd 8b04 	vpop	{d8-d9}
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	4b90      	ldr	r3, [pc, #576]	; (800aa8c <_dtoa_r+0x2f4>)
 800a84a:	9300      	str	r3, [sp, #0]
 800a84c:	3303      	adds	r3, #3
 800a84e:	e7f3      	b.n	800a838 <_dtoa_r+0xa0>
 800a850:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a854:	2200      	movs	r2, #0
 800a856:	2300      	movs	r3, #0
 800a858:	ec51 0b17 	vmov	r0, r1, d7
 800a85c:	eeb0 8a47 	vmov.f32	s16, s14
 800a860:	eef0 8a67 	vmov.f32	s17, s15
 800a864:	f7f6 f934 	bl	8000ad0 <__aeabi_dcmpeq>
 800a868:	4681      	mov	r9, r0
 800a86a:	b160      	cbz	r0, 800a886 <_dtoa_r+0xee>
 800a86c:	2301      	movs	r3, #1
 800a86e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a874:	2b00      	cmp	r3, #0
 800a876:	f000 8567 	beq.w	800b348 <_dtoa_r+0xbb0>
 800a87a:	4b86      	ldr	r3, [pc, #536]	; (800aa94 <_dtoa_r+0x2fc>)
 800a87c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a87e:	6013      	str	r3, [r2, #0]
 800a880:	3b01      	subs	r3, #1
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	e7da      	b.n	800a83c <_dtoa_r+0xa4>
 800a886:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a88a:	eeb0 0a48 	vmov.f32	s0, s16
 800a88e:	eef0 0a68 	vmov.f32	s1, s17
 800a892:	aa10      	add	r2, sp, #64	; 0x40
 800a894:	a911      	add	r1, sp, #68	; 0x44
 800a896:	4620      	mov	r0, r4
 800a898:	f001 fa56 	bl	800bd48 <__d2b>
 800a89c:	4682      	mov	sl, r0
 800a89e:	2d00      	cmp	r5, #0
 800a8a0:	d07d      	beq.n	800a99e <_dtoa_r+0x206>
 800a8a2:	ee18 3a90 	vmov	r3, s17
 800a8a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a8aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a8ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a8b6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8ba:	ec51 0b18 	vmov	r0, r1, d8
 800a8be:	4619      	mov	r1, r3
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4b75      	ldr	r3, [pc, #468]	; (800aa98 <_dtoa_r+0x300>)
 800a8c4:	f7f5 fce4 	bl	8000290 <__aeabi_dsub>
 800a8c8:	a367      	add	r3, pc, #412	; (adr r3, 800aa68 <_dtoa_r+0x2d0>)
 800a8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ce:	f7f5 fe97 	bl	8000600 <__aeabi_dmul>
 800a8d2:	a367      	add	r3, pc, #412	; (adr r3, 800aa70 <_dtoa_r+0x2d8>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fcdc 	bl	8000294 <__adddf3>
 800a8dc:	4606      	mov	r6, r0
 800a8de:	460f      	mov	r7, r1
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	f7f5 fe23 	bl	800052c <__aeabi_i2d>
 800a8e6:	a364      	add	r3, pc, #400	; (adr r3, 800aa78 <_dtoa_r+0x2e0>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fe88 	bl	8000600 <__aeabi_dmul>
 800a8f0:	4602      	mov	r2, r0
 800a8f2:	460b      	mov	r3, r1
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	f7f5 fccc 	bl	8000294 <__adddf3>
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	f7f6 f92e 	bl	8000b60 <__aeabi_d2iz>
 800a904:	2200      	movs	r2, #0
 800a906:	4683      	mov	fp, r0
 800a908:	2300      	movs	r3, #0
 800a90a:	4630      	mov	r0, r6
 800a90c:	4639      	mov	r1, r7
 800a90e:	f7f6 f8e9 	bl	8000ae4 <__aeabi_dcmplt>
 800a912:	b148      	cbz	r0, 800a928 <_dtoa_r+0x190>
 800a914:	4658      	mov	r0, fp
 800a916:	f7f5 fe09 	bl	800052c <__aeabi_i2d>
 800a91a:	4632      	mov	r2, r6
 800a91c:	463b      	mov	r3, r7
 800a91e:	f7f6 f8d7 	bl	8000ad0 <__aeabi_dcmpeq>
 800a922:	b908      	cbnz	r0, 800a928 <_dtoa_r+0x190>
 800a924:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a928:	f1bb 0f16 	cmp.w	fp, #22
 800a92c:	d857      	bhi.n	800a9de <_dtoa_r+0x246>
 800a92e:	4b5b      	ldr	r3, [pc, #364]	; (800aa9c <_dtoa_r+0x304>)
 800a930:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a934:	ec51 0b18 	vmov	r0, r1, d8
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f6 f8d2 	bl	8000ae4 <__aeabi_dcmplt>
 800a940:	2800      	cmp	r0, #0
 800a942:	d04e      	beq.n	800a9e2 <_dtoa_r+0x24a>
 800a944:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800a948:	2300      	movs	r3, #0
 800a94a:	930c      	str	r3, [sp, #48]	; 0x30
 800a94c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a94e:	1b5b      	subs	r3, r3, r5
 800a950:	1e5a      	subs	r2, r3, #1
 800a952:	bf4c      	ite	mi
 800a954:	f1c3 0301 	rsbmi	r3, r3, #1
 800a958:	2300      	movpl	r3, #0
 800a95a:	9206      	str	r2, [sp, #24]
 800a95c:	bf45      	ittet	mi
 800a95e:	9305      	strmi	r3, [sp, #20]
 800a960:	2300      	movmi	r3, #0
 800a962:	9305      	strpl	r3, [sp, #20]
 800a964:	9306      	strmi	r3, [sp, #24]
 800a966:	f1bb 0f00 	cmp.w	fp, #0
 800a96a:	db3c      	blt.n	800a9e6 <_dtoa_r+0x24e>
 800a96c:	9b06      	ldr	r3, [sp, #24]
 800a96e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a972:	445b      	add	r3, fp
 800a974:	9306      	str	r3, [sp, #24]
 800a976:	2300      	movs	r3, #0
 800a978:	9308      	str	r3, [sp, #32]
 800a97a:	9b07      	ldr	r3, [sp, #28]
 800a97c:	2b09      	cmp	r3, #9
 800a97e:	d868      	bhi.n	800aa52 <_dtoa_r+0x2ba>
 800a980:	2b05      	cmp	r3, #5
 800a982:	bfc5      	ittet	gt
 800a984:	3b04      	subgt	r3, #4
 800a986:	2500      	movgt	r5, #0
 800a988:	2501      	movle	r5, #1
 800a98a:	9307      	strgt	r3, [sp, #28]
 800a98c:	9b07      	ldr	r3, [sp, #28]
 800a98e:	3b02      	subs	r3, #2
 800a990:	2b03      	cmp	r3, #3
 800a992:	f200 8087 	bhi.w	800aaa4 <_dtoa_r+0x30c>
 800a996:	e8df f003 	tbb	[pc, r3]
 800a99a:	3d30      	.short	0x3d30
 800a99c:	5a3b      	.short	0x5a3b
 800a99e:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a9a2:	441d      	add	r5, r3
 800a9a4:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	bfc9      	itett	gt
 800a9ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a9b0:	f1c3 0320 	rsble	r3, r3, #32
 800a9b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a9b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a9bc:	bfd8      	it	le
 800a9be:	fa06 f003 	lslle.w	r0, r6, r3
 800a9c2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800a9c6:	bfc4      	itt	gt
 800a9c8:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a9cc:	ea48 0003 	orrgt.w	r0, r8, r3
 800a9d0:	f7f5 fd9c 	bl	800050c <__aeabi_ui2d>
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a9da:	920e      	str	r2, [sp, #56]	; 0x38
 800a9dc:	e76f      	b.n	800a8be <_dtoa_r+0x126>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e7b3      	b.n	800a94a <_dtoa_r+0x1b2>
 800a9e2:	900c      	str	r0, [sp, #48]	; 0x30
 800a9e4:	e7b2      	b.n	800a94c <_dtoa_r+0x1b4>
 800a9e6:	9b05      	ldr	r3, [sp, #20]
 800a9e8:	eba3 030b 	sub.w	r3, r3, fp
 800a9ec:	9305      	str	r3, [sp, #20]
 800a9ee:	f1cb 0300 	rsb	r3, fp, #0
 800a9f2:	9308      	str	r3, [sp, #32]
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9f8:	e7bf      	b.n	800a97a <_dtoa_r+0x1e2>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	dc52      	bgt.n	800aaaa <_dtoa_r+0x312>
 800aa04:	2301      	movs	r3, #1
 800aa06:	461a      	mov	r2, r3
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	9304      	str	r3, [sp, #16]
 800aa0c:	920a      	str	r2, [sp, #40]	; 0x28
 800aa0e:	e00b      	b.n	800aa28 <_dtoa_r+0x290>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e7f3      	b.n	800a9fc <_dtoa_r+0x264>
 800aa14:	2300      	movs	r3, #0
 800aa16:	9309      	str	r3, [sp, #36]	; 0x24
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	445b      	add	r3, fp
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	9304      	str	r3, [sp, #16]
 800aa24:	bfb8      	it	lt
 800aa26:	2301      	movlt	r3, #1
 800aa28:	69e0      	ldr	r0, [r4, #28]
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	2204      	movs	r2, #4
 800aa2e:	f102 0614 	add.w	r6, r2, #20
 800aa32:	429e      	cmp	r6, r3
 800aa34:	d93d      	bls.n	800aab2 <_dtoa_r+0x31a>
 800aa36:	6041      	str	r1, [r0, #4]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 fd9d 	bl	800b578 <_Balloc>
 800aa3e:	9000      	str	r0, [sp, #0]
 800aa40:	2800      	cmp	r0, #0
 800aa42:	d139      	bne.n	800aab8 <_dtoa_r+0x320>
 800aa44:	4b16      	ldr	r3, [pc, #88]	; (800aaa0 <_dtoa_r+0x308>)
 800aa46:	4602      	mov	r2, r0
 800aa48:	f240 11af 	movw	r1, #431	; 0x1af
 800aa4c:	e6bd      	b.n	800a7ca <_dtoa_r+0x32>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e7e1      	b.n	800aa16 <_dtoa_r+0x27e>
 800aa52:	2501      	movs	r5, #1
 800aa54:	2300      	movs	r3, #0
 800aa56:	9509      	str	r5, [sp, #36]	; 0x24
 800aa58:	9307      	str	r3, [sp, #28]
 800aa5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa5e:	2200      	movs	r2, #0
 800aa60:	9301      	str	r3, [sp, #4]
 800aa62:	9304      	str	r3, [sp, #16]
 800aa64:	2312      	movs	r3, #18
 800aa66:	e7d1      	b.n	800aa0c <_dtoa_r+0x274>
 800aa68:	636f4361 	.word	0x636f4361
 800aa6c:	3fd287a7 	.word	0x3fd287a7
 800aa70:	8b60c8b3 	.word	0x8b60c8b3
 800aa74:	3fc68a28 	.word	0x3fc68a28
 800aa78:	509f79fb 	.word	0x509f79fb
 800aa7c:	3fd34413 	.word	0x3fd34413
 800aa80:	0800f2ae 	.word	0x0800f2ae
 800aa84:	0800f2c5 	.word	0x0800f2c5
 800aa88:	7ff00000 	.word	0x7ff00000
 800aa8c:	0800f2aa 	.word	0x0800f2aa
 800aa90:	0800f2a1 	.word	0x0800f2a1
 800aa94:	0800f279 	.word	0x0800f279
 800aa98:	3ff80000 	.word	0x3ff80000
 800aa9c:	0800f3b0 	.word	0x0800f3b0
 800aaa0:	0800f31d 	.word	0x0800f31d
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	9309      	str	r3, [sp, #36]	; 0x24
 800aaa8:	e7d7      	b.n	800aa5a <_dtoa_r+0x2c2>
 800aaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaac:	9301      	str	r3, [sp, #4]
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	e7ba      	b.n	800aa28 <_dtoa_r+0x290>
 800aab2:	3101      	adds	r1, #1
 800aab4:	0052      	lsls	r2, r2, #1
 800aab6:	e7ba      	b.n	800aa2e <_dtoa_r+0x296>
 800aab8:	69e3      	ldr	r3, [r4, #28]
 800aaba:	9a00      	ldr	r2, [sp, #0]
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	9b04      	ldr	r3, [sp, #16]
 800aac0:	2b0e      	cmp	r3, #14
 800aac2:	f200 80a8 	bhi.w	800ac16 <_dtoa_r+0x47e>
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	f000 80a5 	beq.w	800ac16 <_dtoa_r+0x47e>
 800aacc:	f1bb 0f00 	cmp.w	fp, #0
 800aad0:	dd38      	ble.n	800ab44 <_dtoa_r+0x3ac>
 800aad2:	f00b 020f 	and.w	r2, fp, #15
 800aad6:	4bbf      	ldr	r3, [pc, #764]	; (800add4 <_dtoa_r+0x63c>)
 800aad8:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aadc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aae0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aae4:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aae8:	d019      	beq.n	800ab1e <_dtoa_r+0x386>
 800aaea:	4bbb      	ldr	r3, [pc, #748]	; (800add8 <_dtoa_r+0x640>)
 800aaec:	f008 080f 	and.w	r8, r8, #15
 800aaf0:	2503      	movs	r5, #3
 800aaf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aaf6:	ec51 0b18 	vmov	r0, r1, d8
 800aafa:	f7f5 feab 	bl	8000854 <__aeabi_ddiv>
 800aafe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800add8 <_dtoa_r+0x640>
 800ab06:	f1b8 0f00 	cmp.w	r8, #0
 800ab0a:	d10a      	bne.n	800ab22 <_dtoa_r+0x38a>
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	463b      	mov	r3, r7
 800ab10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab14:	f7f5 fe9e 	bl	8000854 <__aeabi_ddiv>
 800ab18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab1c:	e02b      	b.n	800ab76 <_dtoa_r+0x3de>
 800ab1e:	2502      	movs	r5, #2
 800ab20:	e7ef      	b.n	800ab02 <_dtoa_r+0x36a>
 800ab22:	f018 0f01 	tst.w	r8, #1
 800ab26:	d008      	beq.n	800ab3a <_dtoa_r+0x3a2>
 800ab28:	4630      	mov	r0, r6
 800ab2a:	4639      	mov	r1, r7
 800ab2c:	3501      	adds	r5, #1
 800ab2e:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab32:	f7f5 fd65 	bl	8000600 <__aeabi_dmul>
 800ab36:	4606      	mov	r6, r0
 800ab38:	460f      	mov	r7, r1
 800ab3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab3e:	f109 0908 	add.w	r9, r9, #8
 800ab42:	e7e0      	b.n	800ab06 <_dtoa_r+0x36e>
 800ab44:	f000 809f 	beq.w	800ac86 <_dtoa_r+0x4ee>
 800ab48:	f1cb 0600 	rsb	r6, fp, #0
 800ab4c:	4ba1      	ldr	r3, [pc, #644]	; (800add4 <_dtoa_r+0x63c>)
 800ab4e:	4fa2      	ldr	r7, [pc, #648]	; (800add8 <_dtoa_r+0x640>)
 800ab50:	2502      	movs	r5, #2
 800ab52:	f006 020f 	and.w	r2, r6, #15
 800ab56:	1136      	asrs	r6, r6, #4
 800ab58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab5c:	ec51 0b18 	vmov	r0, r1, d8
 800ab60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab64:	f7f5 fd4c 	bl	8000600 <__aeabi_dmul>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab6e:	2e00      	cmp	r6, #0
 800ab70:	d17e      	bne.n	800ac70 <_dtoa_r+0x4d8>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d1d0      	bne.n	800ab18 <_dtoa_r+0x380>
 800ab76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	f000 8084 	beq.w	800ac8a <_dtoa_r+0x4f2>
 800ab82:	2200      	movs	r2, #0
 800ab84:	4b95      	ldr	r3, [pc, #596]	; (800addc <_dtoa_r+0x644>)
 800ab86:	4640      	mov	r0, r8
 800ab88:	4649      	mov	r1, r9
 800ab8a:	f7f5 ffab 	bl	8000ae4 <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d07b      	beq.n	800ac8a <_dtoa_r+0x4f2>
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d078      	beq.n	800ac8a <_dtoa_r+0x4f2>
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	dd39      	ble.n	800ac12 <_dtoa_r+0x47a>
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4b8f      	ldr	r3, [pc, #572]	; (800ade0 <_dtoa_r+0x648>)
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	f7f5 fd2b 	bl	8000600 <__aeabi_dmul>
 800abaa:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800abae:	3501      	adds	r5, #1
 800abb0:	9e01      	ldr	r6, [sp, #4]
 800abb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800abba:	4628      	mov	r0, r5
 800abbc:	f7f5 fcb6 	bl	800052c <__aeabi_i2d>
 800abc0:	4642      	mov	r2, r8
 800abc2:	464b      	mov	r3, r9
 800abc4:	f7f5 fd1c 	bl	8000600 <__aeabi_dmul>
 800abc8:	4b86      	ldr	r3, [pc, #536]	; (800ade4 <_dtoa_r+0x64c>)
 800abca:	2200      	movs	r2, #0
 800abcc:	f7f5 fb62 	bl	8000294 <__adddf3>
 800abd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800abd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abd8:	9303      	str	r3, [sp, #12]
 800abda:	2e00      	cmp	r6, #0
 800abdc:	d158      	bne.n	800ac90 <_dtoa_r+0x4f8>
 800abde:	2200      	movs	r2, #0
 800abe0:	4b81      	ldr	r3, [pc, #516]	; (800ade8 <_dtoa_r+0x650>)
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 fb53 	bl	8000290 <__aeabi_dsub>
 800abea:	4680      	mov	r8, r0
 800abec:	4689      	mov	r9, r1
 800abee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abf2:	f7f5 ff95 	bl	8000b20 <__aeabi_dcmpgt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	f040 8296 	bne.w	800b128 <_dtoa_r+0x990>
 800abfc:	4640      	mov	r0, r8
 800abfe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ac02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac06:	4649      	mov	r1, r9
 800ac08:	f7f5 ff6c 	bl	8000ae4 <__aeabi_dcmplt>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	f040 8289 	bne.w	800b124 <_dtoa_r+0x98c>
 800ac12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f2c0 814e 	blt.w	800aeba <_dtoa_r+0x722>
 800ac1e:	f1bb 0f0e 	cmp.w	fp, #14
 800ac22:	f300 814a 	bgt.w	800aeba <_dtoa_r+0x722>
 800ac26:	4b6b      	ldr	r3, [pc, #428]	; (800add4 <_dtoa_r+0x63c>)
 800ac28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f280 80dc 	bge.w	800adf0 <_dtoa_r+0x658>
 800ac38:	9b04      	ldr	r3, [sp, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f300 80d8 	bgt.w	800adf0 <_dtoa_r+0x658>
 800ac40:	f040 826f 	bne.w	800b122 <_dtoa_r+0x98a>
 800ac44:	2200      	movs	r2, #0
 800ac46:	4b68      	ldr	r3, [pc, #416]	; (800ade8 <_dtoa_r+0x650>)
 800ac48:	4640      	mov	r0, r8
 800ac4a:	4649      	mov	r1, r9
 800ac4c:	f7f5 fcd8 	bl	8000600 <__aeabi_dmul>
 800ac50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac54:	f7f5 ff5a 	bl	8000b0c <__aeabi_dcmpge>
 800ac58:	9e04      	ldr	r6, [sp, #16]
 800ac5a:	4637      	mov	r7, r6
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f040 8245 	bne.w	800b0ec <_dtoa_r+0x954>
 800ac62:	9d00      	ldr	r5, [sp, #0]
 800ac64:	2331      	movs	r3, #49	; 0x31
 800ac66:	f10b 0b01 	add.w	fp, fp, #1
 800ac6a:	f805 3b01 	strb.w	r3, [r5], #1
 800ac6e:	e241      	b.n	800b0f4 <_dtoa_r+0x95c>
 800ac70:	07f2      	lsls	r2, r6, #31
 800ac72:	d505      	bpl.n	800ac80 <_dtoa_r+0x4e8>
 800ac74:	3501      	adds	r5, #1
 800ac76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac7a:	f7f5 fcc1 	bl	8000600 <__aeabi_dmul>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	1076      	asrs	r6, r6, #1
 800ac82:	3708      	adds	r7, #8
 800ac84:	e773      	b.n	800ab6e <_dtoa_r+0x3d6>
 800ac86:	2502      	movs	r5, #2
 800ac88:	e775      	b.n	800ab76 <_dtoa_r+0x3de>
 800ac8a:	465f      	mov	r7, fp
 800ac8c:	9e04      	ldr	r6, [sp, #16]
 800ac8e:	e792      	b.n	800abb6 <_dtoa_r+0x41e>
 800ac90:	9900      	ldr	r1, [sp, #0]
 800ac92:	4b50      	ldr	r3, [pc, #320]	; (800add4 <_dtoa_r+0x63c>)
 800ac94:	4431      	add	r1, r6
 800ac96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac9e:	9102      	str	r1, [sp, #8]
 800aca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aca2:	eeb0 9a47 	vmov.f32	s18, s14
 800aca6:	eef0 9a67 	vmov.f32	s19, s15
 800acaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acae:	2900      	cmp	r1, #0
 800acb0:	d044      	beq.n	800ad3c <_dtoa_r+0x5a4>
 800acb2:	2000      	movs	r0, #0
 800acb4:	494d      	ldr	r1, [pc, #308]	; (800adec <_dtoa_r+0x654>)
 800acb6:	f7f5 fdcd 	bl	8000854 <__aeabi_ddiv>
 800acba:	ec53 2b19 	vmov	r2, r3, d9
 800acbe:	f7f5 fae7 	bl	8000290 <__aeabi_dsub>
 800acc2:	9d00      	ldr	r5, [sp, #0]
 800acc4:	ec41 0b19 	vmov	d9, r0, r1
 800acc8:	4649      	mov	r1, r9
 800acca:	4640      	mov	r0, r8
 800accc:	f7f5 ff48 	bl	8000b60 <__aeabi_d2iz>
 800acd0:	4606      	mov	r6, r0
 800acd2:	f7f5 fc2b 	bl	800052c <__aeabi_i2d>
 800acd6:	4602      	mov	r2, r0
 800acd8:	3630      	adds	r6, #48	; 0x30
 800acda:	460b      	mov	r3, r1
 800acdc:	4640      	mov	r0, r8
 800acde:	4649      	mov	r1, r9
 800ace0:	f7f5 fad6 	bl	8000290 <__aeabi_dsub>
 800ace4:	f805 6b01 	strb.w	r6, [r5], #1
 800ace8:	4680      	mov	r8, r0
 800acea:	4689      	mov	r9, r1
 800acec:	ec53 2b19 	vmov	r2, r3, d9
 800acf0:	f7f5 fef8 	bl	8000ae4 <__aeabi_dcmplt>
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d164      	bne.n	800adc2 <_dtoa_r+0x62a>
 800acf8:	4642      	mov	r2, r8
 800acfa:	464b      	mov	r3, r9
 800acfc:	2000      	movs	r0, #0
 800acfe:	4937      	ldr	r1, [pc, #220]	; (800addc <_dtoa_r+0x644>)
 800ad00:	f7f5 fac6 	bl	8000290 <__aeabi_dsub>
 800ad04:	ec53 2b19 	vmov	r2, r3, d9
 800ad08:	f7f5 feec 	bl	8000ae4 <__aeabi_dcmplt>
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	f040 80b6 	bne.w	800ae7e <_dtoa_r+0x6e6>
 800ad12:	9b02      	ldr	r3, [sp, #8]
 800ad14:	429d      	cmp	r5, r3
 800ad16:	f43f af7c 	beq.w	800ac12 <_dtoa_r+0x47a>
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4b30      	ldr	r3, [pc, #192]	; (800ade0 <_dtoa_r+0x648>)
 800ad1e:	ec51 0b19 	vmov	r0, r1, d9
 800ad22:	f7f5 fc6d 	bl	8000600 <__aeabi_dmul>
 800ad26:	2200      	movs	r2, #0
 800ad28:	4b2d      	ldr	r3, [pc, #180]	; (800ade0 <_dtoa_r+0x648>)
 800ad2a:	ec41 0b19 	vmov	d9, r0, r1
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7f5 fc65 	bl	8000600 <__aeabi_dmul>
 800ad36:	4680      	mov	r8, r0
 800ad38:	4689      	mov	r9, r1
 800ad3a:	e7c5      	b.n	800acc8 <_dtoa_r+0x530>
 800ad3c:	ec51 0b17 	vmov	r0, r1, d7
 800ad40:	f7f5 fc5e 	bl	8000600 <__aeabi_dmul>
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	9d00      	ldr	r5, [sp, #0]
 800ad48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad4a:	ec41 0b19 	vmov	d9, r0, r1
 800ad4e:	4649      	mov	r1, r9
 800ad50:	4640      	mov	r0, r8
 800ad52:	f7f5 ff05 	bl	8000b60 <__aeabi_d2iz>
 800ad56:	4606      	mov	r6, r0
 800ad58:	f7f5 fbe8 	bl	800052c <__aeabi_i2d>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4640      	mov	r0, r8
 800ad62:	4649      	mov	r1, r9
 800ad64:	3630      	adds	r6, #48	; 0x30
 800ad66:	f7f5 fa93 	bl	8000290 <__aeabi_dsub>
 800ad6a:	9b02      	ldr	r3, [sp, #8]
 800ad6c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad70:	4680      	mov	r8, r0
 800ad72:	429d      	cmp	r5, r3
 800ad74:	4689      	mov	r9, r1
 800ad76:	f04f 0200 	mov.w	r2, #0
 800ad7a:	d124      	bne.n	800adc6 <_dtoa_r+0x62e>
 800ad7c:	4b1b      	ldr	r3, [pc, #108]	; (800adec <_dtoa_r+0x654>)
 800ad7e:	ec51 0b19 	vmov	r0, r1, d9
 800ad82:	f7f5 fa87 	bl	8000294 <__adddf3>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	4640      	mov	r0, r8
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	f7f5 fec7 	bl	8000b20 <__aeabi_dcmpgt>
 800ad92:	2800      	cmp	r0, #0
 800ad94:	d173      	bne.n	800ae7e <_dtoa_r+0x6e6>
 800ad96:	2000      	movs	r0, #0
 800ad98:	4914      	ldr	r1, [pc, #80]	; (800adec <_dtoa_r+0x654>)
 800ad9a:	ec53 2b19 	vmov	r2, r3, d9
 800ad9e:	f7f5 fa77 	bl	8000290 <__aeabi_dsub>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4640      	mov	r0, r8
 800ada8:	4649      	mov	r1, r9
 800adaa:	f7f5 fe9b 	bl	8000ae4 <__aeabi_dcmplt>
 800adae:	2800      	cmp	r0, #0
 800adb0:	f43f af2f 	beq.w	800ac12 <_dtoa_r+0x47a>
 800adb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800adb6:	1e6b      	subs	r3, r5, #1
 800adb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800adba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800adbe:	2b30      	cmp	r3, #48	; 0x30
 800adc0:	d0f8      	beq.n	800adb4 <_dtoa_r+0x61c>
 800adc2:	46bb      	mov	fp, r7
 800adc4:	e04a      	b.n	800ae5c <_dtoa_r+0x6c4>
 800adc6:	4b06      	ldr	r3, [pc, #24]	; (800ade0 <_dtoa_r+0x648>)
 800adc8:	f7f5 fc1a 	bl	8000600 <__aeabi_dmul>
 800adcc:	4680      	mov	r8, r0
 800adce:	4689      	mov	r9, r1
 800add0:	e7bd      	b.n	800ad4e <_dtoa_r+0x5b6>
 800add2:	bf00      	nop
 800add4:	0800f3b0 	.word	0x0800f3b0
 800add8:	0800f388 	.word	0x0800f388
 800addc:	3ff00000 	.word	0x3ff00000
 800ade0:	40240000 	.word	0x40240000
 800ade4:	401c0000 	.word	0x401c0000
 800ade8:	40140000 	.word	0x40140000
 800adec:	3fe00000 	.word	0x3fe00000
 800adf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adf4:	9d00      	ldr	r5, [sp, #0]
 800adf6:	4642      	mov	r2, r8
 800adf8:	464b      	mov	r3, r9
 800adfa:	4630      	mov	r0, r6
 800adfc:	4639      	mov	r1, r7
 800adfe:	f7f5 fd29 	bl	8000854 <__aeabi_ddiv>
 800ae02:	f7f5 fead 	bl	8000b60 <__aeabi_d2iz>
 800ae06:	9001      	str	r0, [sp, #4]
 800ae08:	f7f5 fb90 	bl	800052c <__aeabi_i2d>
 800ae0c:	4642      	mov	r2, r8
 800ae0e:	464b      	mov	r3, r9
 800ae10:	f7f5 fbf6 	bl	8000600 <__aeabi_dmul>
 800ae14:	4602      	mov	r2, r0
 800ae16:	460b      	mov	r3, r1
 800ae18:	4630      	mov	r0, r6
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	f7f5 fa38 	bl	8000290 <__aeabi_dsub>
 800ae20:	9e01      	ldr	r6, [sp, #4]
 800ae22:	9f04      	ldr	r7, [sp, #16]
 800ae24:	4602      	mov	r2, r0
 800ae26:	3630      	adds	r6, #48	; 0x30
 800ae28:	460b      	mov	r3, r1
 800ae2a:	f805 6b01 	strb.w	r6, [r5], #1
 800ae2e:	9e00      	ldr	r6, [sp, #0]
 800ae30:	1bae      	subs	r6, r5, r6
 800ae32:	42b7      	cmp	r7, r6
 800ae34:	d134      	bne.n	800aea0 <_dtoa_r+0x708>
 800ae36:	f7f5 fa2d 	bl	8000294 <__adddf3>
 800ae3a:	4642      	mov	r2, r8
 800ae3c:	464b      	mov	r3, r9
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	f7f5 fe6d 	bl	8000b20 <__aeabi_dcmpgt>
 800ae46:	b9c8      	cbnz	r0, 800ae7c <_dtoa_r+0x6e4>
 800ae48:	4642      	mov	r2, r8
 800ae4a:	464b      	mov	r3, r9
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	4639      	mov	r1, r7
 800ae50:	f7f5 fe3e 	bl	8000ad0 <__aeabi_dcmpeq>
 800ae54:	b110      	cbz	r0, 800ae5c <_dtoa_r+0x6c4>
 800ae56:	9b01      	ldr	r3, [sp, #4]
 800ae58:	07db      	lsls	r3, r3, #31
 800ae5a:	d40f      	bmi.n	800ae7c <_dtoa_r+0x6e4>
 800ae5c:	4651      	mov	r1, sl
 800ae5e:	4620      	mov	r0, r4
 800ae60:	f000 fbca 	bl	800b5f8 <_Bfree>
 800ae64:	2300      	movs	r3, #0
 800ae66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae68:	702b      	strb	r3, [r5, #0]
 800ae6a:	f10b 0301 	add.w	r3, fp, #1
 800ae6e:	6013      	str	r3, [r2, #0]
 800ae70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f43f ace2 	beq.w	800a83c <_dtoa_r+0xa4>
 800ae78:	601d      	str	r5, [r3, #0]
 800ae7a:	e4df      	b.n	800a83c <_dtoa_r+0xa4>
 800ae7c:	465f      	mov	r7, fp
 800ae7e:	462b      	mov	r3, r5
 800ae80:	461d      	mov	r5, r3
 800ae82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae86:	2a39      	cmp	r2, #57	; 0x39
 800ae88:	d106      	bne.n	800ae98 <_dtoa_r+0x700>
 800ae8a:	9a00      	ldr	r2, [sp, #0]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d1f7      	bne.n	800ae80 <_dtoa_r+0x6e8>
 800ae90:	2230      	movs	r2, #48	; 0x30
 800ae92:	9900      	ldr	r1, [sp, #0]
 800ae94:	3701      	adds	r7, #1
 800ae96:	700a      	strb	r2, [r1, #0]
 800ae98:	781a      	ldrb	r2, [r3, #0]
 800ae9a:	3201      	adds	r2, #1
 800ae9c:	701a      	strb	r2, [r3, #0]
 800ae9e:	e790      	b.n	800adc2 <_dtoa_r+0x62a>
 800aea0:	2200      	movs	r2, #0
 800aea2:	4ba3      	ldr	r3, [pc, #652]	; (800b130 <_dtoa_r+0x998>)
 800aea4:	f7f5 fbac 	bl	8000600 <__aeabi_dmul>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	4606      	mov	r6, r0
 800aeae:	460f      	mov	r7, r1
 800aeb0:	f7f5 fe0e 	bl	8000ad0 <__aeabi_dcmpeq>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	d09e      	beq.n	800adf6 <_dtoa_r+0x65e>
 800aeb8:	e7d0      	b.n	800ae5c <_dtoa_r+0x6c4>
 800aeba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aebc:	2a00      	cmp	r2, #0
 800aebe:	f000 80ca 	beq.w	800b056 <_dtoa_r+0x8be>
 800aec2:	9a07      	ldr	r2, [sp, #28]
 800aec4:	2a01      	cmp	r2, #1
 800aec6:	f300 80ad 	bgt.w	800b024 <_dtoa_r+0x88c>
 800aeca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aecc:	2a00      	cmp	r2, #0
 800aece:	f000 80a5 	beq.w	800b01c <_dtoa_r+0x884>
 800aed2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aed6:	9e08      	ldr	r6, [sp, #32]
 800aed8:	9d05      	ldr	r5, [sp, #20]
 800aeda:	9a05      	ldr	r2, [sp, #20]
 800aedc:	2101      	movs	r1, #1
 800aede:	4620      	mov	r0, r4
 800aee0:	441a      	add	r2, r3
 800aee2:	9205      	str	r2, [sp, #20]
 800aee4:	9a06      	ldr	r2, [sp, #24]
 800aee6:	441a      	add	r2, r3
 800aee8:	9206      	str	r2, [sp, #24]
 800aeea:	f000 fc87 	bl	800b7fc <__i2b>
 800aeee:	4607      	mov	r7, r0
 800aef0:	b165      	cbz	r5, 800af0c <_dtoa_r+0x774>
 800aef2:	9b06      	ldr	r3, [sp, #24]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd09      	ble.n	800af0c <_dtoa_r+0x774>
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	9a05      	ldr	r2, [sp, #20]
 800aefc:	bfa8      	it	ge
 800aefe:	462b      	movge	r3, r5
 800af00:	1ad2      	subs	r2, r2, r3
 800af02:	1aed      	subs	r5, r5, r3
 800af04:	9205      	str	r2, [sp, #20]
 800af06:	9a06      	ldr	r2, [sp, #24]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	9306      	str	r3, [sp, #24]
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	b1f3      	cbz	r3, 800af4e <_dtoa_r+0x7b6>
 800af10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 80a3 	beq.w	800b05e <_dtoa_r+0x8c6>
 800af18:	2e00      	cmp	r6, #0
 800af1a:	dd10      	ble.n	800af3e <_dtoa_r+0x7a6>
 800af1c:	4639      	mov	r1, r7
 800af1e:	4632      	mov	r2, r6
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fd2b 	bl	800b97c <__pow5mult>
 800af26:	4652      	mov	r2, sl
 800af28:	4601      	mov	r1, r0
 800af2a:	4607      	mov	r7, r0
 800af2c:	4620      	mov	r0, r4
 800af2e:	f000 fc7b 	bl	800b828 <__multiply>
 800af32:	4680      	mov	r8, r0
 800af34:	4651      	mov	r1, sl
 800af36:	4620      	mov	r0, r4
 800af38:	46c2      	mov	sl, r8
 800af3a:	f000 fb5d 	bl	800b5f8 <_Bfree>
 800af3e:	9b08      	ldr	r3, [sp, #32]
 800af40:	1b9a      	subs	r2, r3, r6
 800af42:	d004      	beq.n	800af4e <_dtoa_r+0x7b6>
 800af44:	4651      	mov	r1, sl
 800af46:	4620      	mov	r0, r4
 800af48:	f000 fd18 	bl	800b97c <__pow5mult>
 800af4c:	4682      	mov	sl, r0
 800af4e:	2101      	movs	r1, #1
 800af50:	4620      	mov	r0, r4
 800af52:	f000 fc53 	bl	800b7fc <__i2b>
 800af56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af58:	4606      	mov	r6, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f340 8081 	ble.w	800b062 <_dtoa_r+0x8ca>
 800af60:	461a      	mov	r2, r3
 800af62:	4601      	mov	r1, r0
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fd09 	bl	800b97c <__pow5mult>
 800af6a:	9b07      	ldr	r3, [sp, #28]
 800af6c:	4606      	mov	r6, r0
 800af6e:	2b01      	cmp	r3, #1
 800af70:	dd7a      	ble.n	800b068 <_dtoa_r+0x8d0>
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	6933      	ldr	r3, [r6, #16]
 800af78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af7c:	6918      	ldr	r0, [r3, #16]
 800af7e:	f000 fbef 	bl	800b760 <__hi0bits>
 800af82:	f1c0 0020 	rsb	r0, r0, #32
 800af86:	9b06      	ldr	r3, [sp, #24]
 800af88:	4418      	add	r0, r3
 800af8a:	f010 001f 	ands.w	r0, r0, #31
 800af8e:	f000 8094 	beq.w	800b0ba <_dtoa_r+0x922>
 800af92:	f1c0 0320 	rsb	r3, r0, #32
 800af96:	2b04      	cmp	r3, #4
 800af98:	f340 8085 	ble.w	800b0a6 <_dtoa_r+0x90e>
 800af9c:	f1c0 001c 	rsb	r0, r0, #28
 800afa0:	9b05      	ldr	r3, [sp, #20]
 800afa2:	4403      	add	r3, r0
 800afa4:	4405      	add	r5, r0
 800afa6:	9305      	str	r3, [sp, #20]
 800afa8:	9b06      	ldr	r3, [sp, #24]
 800afaa:	4403      	add	r3, r0
 800afac:	9306      	str	r3, [sp, #24]
 800afae:	9b05      	ldr	r3, [sp, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	dd05      	ble.n	800afc0 <_dtoa_r+0x828>
 800afb4:	4651      	mov	r1, sl
 800afb6:	461a      	mov	r2, r3
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fd39 	bl	800ba30 <__lshift>
 800afbe:	4682      	mov	sl, r0
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dd05      	ble.n	800afd2 <_dtoa_r+0x83a>
 800afc6:	4631      	mov	r1, r6
 800afc8:	461a      	mov	r2, r3
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 fd30 	bl	800ba30 <__lshift>
 800afd0:	4606      	mov	r6, r0
 800afd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d072      	beq.n	800b0be <_dtoa_r+0x926>
 800afd8:	4631      	mov	r1, r6
 800afda:	4650      	mov	r0, sl
 800afdc:	f000 fd94 	bl	800bb08 <__mcmp>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	da6c      	bge.n	800b0be <_dtoa_r+0x926>
 800afe4:	2300      	movs	r3, #0
 800afe6:	4651      	mov	r1, sl
 800afe8:	220a      	movs	r2, #10
 800afea:	4620      	mov	r0, r4
 800afec:	f000 fb26 	bl	800b63c <__multadd>
 800aff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aff2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800aff6:	4682      	mov	sl, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 81af 	beq.w	800b35c <_dtoa_r+0xbc4>
 800affe:	2300      	movs	r3, #0
 800b000:	4639      	mov	r1, r7
 800b002:	220a      	movs	r2, #10
 800b004:	4620      	mov	r0, r4
 800b006:	f000 fb19 	bl	800b63c <__multadd>
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	4607      	mov	r7, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f300 8096 	bgt.w	800b140 <_dtoa_r+0x9a8>
 800b014:	9b07      	ldr	r3, [sp, #28]
 800b016:	2b02      	cmp	r3, #2
 800b018:	dc59      	bgt.n	800b0ce <_dtoa_r+0x936>
 800b01a:	e091      	b.n	800b140 <_dtoa_r+0x9a8>
 800b01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b01e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b022:	e758      	b.n	800aed6 <_dtoa_r+0x73e>
 800b024:	9b04      	ldr	r3, [sp, #16]
 800b026:	1e5e      	subs	r6, r3, #1
 800b028:	9b08      	ldr	r3, [sp, #32]
 800b02a:	42b3      	cmp	r3, r6
 800b02c:	bfb7      	itett	lt
 800b02e:	9b08      	ldrlt	r3, [sp, #32]
 800b030:	1b9e      	subge	r6, r3, r6
 800b032:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b034:	1af3      	sublt	r3, r6, r3
 800b036:	bfbe      	ittt	lt
 800b038:	9608      	strlt	r6, [sp, #32]
 800b03a:	2600      	movlt	r6, #0
 800b03c:	18d2      	addlt	r2, r2, r3
 800b03e:	9b04      	ldr	r3, [sp, #16]
 800b040:	bfb8      	it	lt
 800b042:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b044:	2b00      	cmp	r3, #0
 800b046:	bfb7      	itett	lt
 800b048:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b04c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b050:	1a9d      	sublt	r5, r3, r2
 800b052:	2300      	movlt	r3, #0
 800b054:	e741      	b.n	800aeda <_dtoa_r+0x742>
 800b056:	9e08      	ldr	r6, [sp, #32]
 800b058:	9d05      	ldr	r5, [sp, #20]
 800b05a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b05c:	e748      	b.n	800aef0 <_dtoa_r+0x758>
 800b05e:	9a08      	ldr	r2, [sp, #32]
 800b060:	e770      	b.n	800af44 <_dtoa_r+0x7ac>
 800b062:	9b07      	ldr	r3, [sp, #28]
 800b064:	2b01      	cmp	r3, #1
 800b066:	dc19      	bgt.n	800b09c <_dtoa_r+0x904>
 800b068:	9b02      	ldr	r3, [sp, #8]
 800b06a:	b9bb      	cbnz	r3, 800b09c <_dtoa_r+0x904>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b072:	b99b      	cbnz	r3, 800b09c <_dtoa_r+0x904>
 800b074:	9b03      	ldr	r3, [sp, #12]
 800b076:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b07a:	0d1b      	lsrs	r3, r3, #20
 800b07c:	051b      	lsls	r3, r3, #20
 800b07e:	b183      	cbz	r3, 800b0a2 <_dtoa_r+0x90a>
 800b080:	9b05      	ldr	r3, [sp, #20]
 800b082:	f04f 0801 	mov.w	r8, #1
 800b086:	3301      	adds	r3, #1
 800b088:	9305      	str	r3, [sp, #20]
 800b08a:	9b06      	ldr	r3, [sp, #24]
 800b08c:	3301      	adds	r3, #1
 800b08e:	9306      	str	r3, [sp, #24]
 800b090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b092:	2b00      	cmp	r3, #0
 800b094:	f47f af6f 	bne.w	800af76 <_dtoa_r+0x7de>
 800b098:	2001      	movs	r0, #1
 800b09a:	e774      	b.n	800af86 <_dtoa_r+0x7ee>
 800b09c:	f04f 0800 	mov.w	r8, #0
 800b0a0:	e7f6      	b.n	800b090 <_dtoa_r+0x8f8>
 800b0a2:	4698      	mov	r8, r3
 800b0a4:	e7f4      	b.n	800b090 <_dtoa_r+0x8f8>
 800b0a6:	d082      	beq.n	800afae <_dtoa_r+0x816>
 800b0a8:	331c      	adds	r3, #28
 800b0aa:	9a05      	ldr	r2, [sp, #20]
 800b0ac:	441a      	add	r2, r3
 800b0ae:	441d      	add	r5, r3
 800b0b0:	9205      	str	r2, [sp, #20]
 800b0b2:	9a06      	ldr	r2, [sp, #24]
 800b0b4:	441a      	add	r2, r3
 800b0b6:	9206      	str	r2, [sp, #24]
 800b0b8:	e779      	b.n	800afae <_dtoa_r+0x816>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	e7f4      	b.n	800b0a8 <_dtoa_r+0x910>
 800b0be:	9b04      	ldr	r3, [sp, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	dc37      	bgt.n	800b134 <_dtoa_r+0x99c>
 800b0c4:	9b07      	ldr	r3, [sp, #28]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	dd34      	ble.n	800b134 <_dtoa_r+0x99c>
 800b0ca:	9b04      	ldr	r3, [sp, #16]
 800b0cc:	9301      	str	r3, [sp, #4]
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	b963      	cbnz	r3, 800b0ec <_dtoa_r+0x954>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	2205      	movs	r2, #5
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	f000 fab0 	bl	800b63c <__multadd>
 800b0dc:	4601      	mov	r1, r0
 800b0de:	4606      	mov	r6, r0
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	f000 fd11 	bl	800bb08 <__mcmp>
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	f73f adbb 	bgt.w	800ac62 <_dtoa_r+0x4ca>
 800b0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ee:	9d00      	ldr	r5, [sp, #0]
 800b0f0:	ea6f 0b03 	mvn.w	fp, r3
 800b0f4:	f04f 0800 	mov.w	r8, #0
 800b0f8:	4631      	mov	r1, r6
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 fa7c 	bl	800b5f8 <_Bfree>
 800b100:	2f00      	cmp	r7, #0
 800b102:	f43f aeab 	beq.w	800ae5c <_dtoa_r+0x6c4>
 800b106:	f1b8 0f00 	cmp.w	r8, #0
 800b10a:	d005      	beq.n	800b118 <_dtoa_r+0x980>
 800b10c:	45b8      	cmp	r8, r7
 800b10e:	d003      	beq.n	800b118 <_dtoa_r+0x980>
 800b110:	4641      	mov	r1, r8
 800b112:	4620      	mov	r0, r4
 800b114:	f000 fa70 	bl	800b5f8 <_Bfree>
 800b118:	4639      	mov	r1, r7
 800b11a:	4620      	mov	r0, r4
 800b11c:	f000 fa6c 	bl	800b5f8 <_Bfree>
 800b120:	e69c      	b.n	800ae5c <_dtoa_r+0x6c4>
 800b122:	2600      	movs	r6, #0
 800b124:	4637      	mov	r7, r6
 800b126:	e7e1      	b.n	800b0ec <_dtoa_r+0x954>
 800b128:	46bb      	mov	fp, r7
 800b12a:	4637      	mov	r7, r6
 800b12c:	e599      	b.n	800ac62 <_dtoa_r+0x4ca>
 800b12e:	bf00      	nop
 800b130:	40240000 	.word	0x40240000
 800b134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 80c8 	beq.w	800b2cc <_dtoa_r+0xb34>
 800b13c:	9b04      	ldr	r3, [sp, #16]
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	2d00      	cmp	r5, #0
 800b142:	dd05      	ble.n	800b150 <_dtoa_r+0x9b8>
 800b144:	4639      	mov	r1, r7
 800b146:	462a      	mov	r2, r5
 800b148:	4620      	mov	r0, r4
 800b14a:	f000 fc71 	bl	800ba30 <__lshift>
 800b14e:	4607      	mov	r7, r0
 800b150:	f1b8 0f00 	cmp.w	r8, #0
 800b154:	d05b      	beq.n	800b20e <_dtoa_r+0xa76>
 800b156:	6879      	ldr	r1, [r7, #4]
 800b158:	4620      	mov	r0, r4
 800b15a:	f000 fa0d 	bl	800b578 <_Balloc>
 800b15e:	4605      	mov	r5, r0
 800b160:	b928      	cbnz	r0, 800b16e <_dtoa_r+0x9d6>
 800b162:	4b82      	ldr	r3, [pc, #520]	; (800b36c <_dtoa_r+0xbd4>)
 800b164:	4602      	mov	r2, r0
 800b166:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b16a:	f7ff bb2e 	b.w	800a7ca <_dtoa_r+0x32>
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	f107 010c 	add.w	r1, r7, #12
 800b174:	300c      	adds	r0, #12
 800b176:	3202      	adds	r2, #2
 800b178:	0092      	lsls	r2, r2, #2
 800b17a:	f002 f95b 	bl	800d434 <memcpy>
 800b17e:	2201      	movs	r2, #1
 800b180:	4629      	mov	r1, r5
 800b182:	4620      	mov	r0, r4
 800b184:	f000 fc54 	bl	800ba30 <__lshift>
 800b188:	9b00      	ldr	r3, [sp, #0]
 800b18a:	46b8      	mov	r8, r7
 800b18c:	4607      	mov	r7, r0
 800b18e:	3301      	adds	r3, #1
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b196:	4413      	add	r3, r2
 800b198:	9308      	str	r3, [sp, #32]
 800b19a:	9b02      	ldr	r3, [sp, #8]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	9306      	str	r3, [sp, #24]
 800b1a2:	9b04      	ldr	r3, [sp, #16]
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	3b01      	subs	r3, #1
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	f7ff fa64 	bl	800a678 <quorem>
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	9002      	str	r0, [sp, #8]
 800b1b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b1b8:	4650      	mov	r0, sl
 800b1ba:	f000 fca5 	bl	800bb08 <__mcmp>
 800b1be:	463a      	mov	r2, r7
 800b1c0:	9005      	str	r0, [sp, #20]
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fcbb 	bl	800bb40 <__mdiff>
 800b1ca:	68c2      	ldr	r2, [r0, #12]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	bb02      	cbnz	r2, 800b212 <_dtoa_r+0xa7a>
 800b1d0:	4601      	mov	r1, r0
 800b1d2:	4650      	mov	r0, sl
 800b1d4:	f000 fc98 	bl	800bb08 <__mcmp>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	4629      	mov	r1, r5
 800b1dc:	4620      	mov	r0, r4
 800b1de:	9209      	str	r2, [sp, #36]	; 0x24
 800b1e0:	f000 fa0a 	bl	800b5f8 <_Bfree>
 800b1e4:	9b07      	ldr	r3, [sp, #28]
 800b1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1e8:	9d04      	ldr	r5, [sp, #16]
 800b1ea:	ea43 0102 	orr.w	r1, r3, r2
 800b1ee:	9b06      	ldr	r3, [sp, #24]
 800b1f0:	4319      	orrs	r1, r3
 800b1f2:	d110      	bne.n	800b216 <_dtoa_r+0xa7e>
 800b1f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1f8:	d029      	beq.n	800b24e <_dtoa_r+0xab6>
 800b1fa:	9b05      	ldr	r3, [sp, #20]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd02      	ble.n	800b206 <_dtoa_r+0xa6e>
 800b200:	9b02      	ldr	r3, [sp, #8]
 800b202:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	f883 9000 	strb.w	r9, [r3]
 800b20c:	e774      	b.n	800b0f8 <_dtoa_r+0x960>
 800b20e:	4638      	mov	r0, r7
 800b210:	e7ba      	b.n	800b188 <_dtoa_r+0x9f0>
 800b212:	2201      	movs	r2, #1
 800b214:	e7e1      	b.n	800b1da <_dtoa_r+0xa42>
 800b216:	9b05      	ldr	r3, [sp, #20]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	db04      	blt.n	800b226 <_dtoa_r+0xa8e>
 800b21c:	9907      	ldr	r1, [sp, #28]
 800b21e:	430b      	orrs	r3, r1
 800b220:	9906      	ldr	r1, [sp, #24]
 800b222:	430b      	orrs	r3, r1
 800b224:	d120      	bne.n	800b268 <_dtoa_r+0xad0>
 800b226:	2a00      	cmp	r2, #0
 800b228:	dded      	ble.n	800b206 <_dtoa_r+0xa6e>
 800b22a:	4651      	mov	r1, sl
 800b22c:	2201      	movs	r2, #1
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 fbfe 	bl	800ba30 <__lshift>
 800b234:	4631      	mov	r1, r6
 800b236:	4682      	mov	sl, r0
 800b238:	f000 fc66 	bl	800bb08 <__mcmp>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	dc03      	bgt.n	800b248 <_dtoa_r+0xab0>
 800b240:	d1e1      	bne.n	800b206 <_dtoa_r+0xa6e>
 800b242:	f019 0f01 	tst.w	r9, #1
 800b246:	d0de      	beq.n	800b206 <_dtoa_r+0xa6e>
 800b248:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b24c:	d1d8      	bne.n	800b200 <_dtoa_r+0xa68>
 800b24e:	2339      	movs	r3, #57	; 0x39
 800b250:	9a01      	ldr	r2, [sp, #4]
 800b252:	7013      	strb	r3, [r2, #0]
 800b254:	462b      	mov	r3, r5
 800b256:	461d      	mov	r5, r3
 800b258:	3b01      	subs	r3, #1
 800b25a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b25e:	2a39      	cmp	r2, #57	; 0x39
 800b260:	d06b      	beq.n	800b33a <_dtoa_r+0xba2>
 800b262:	3201      	adds	r2, #1
 800b264:	701a      	strb	r2, [r3, #0]
 800b266:	e747      	b.n	800b0f8 <_dtoa_r+0x960>
 800b268:	2a00      	cmp	r2, #0
 800b26a:	dd07      	ble.n	800b27c <_dtoa_r+0xae4>
 800b26c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b270:	d0ed      	beq.n	800b24e <_dtoa_r+0xab6>
 800b272:	f109 0301 	add.w	r3, r9, #1
 800b276:	9a01      	ldr	r2, [sp, #4]
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	e73d      	b.n	800b0f8 <_dtoa_r+0x960>
 800b27c:	9b04      	ldr	r3, [sp, #16]
 800b27e:	9a08      	ldr	r2, [sp, #32]
 800b280:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b284:	4293      	cmp	r3, r2
 800b286:	d042      	beq.n	800b30e <_dtoa_r+0xb76>
 800b288:	4651      	mov	r1, sl
 800b28a:	2300      	movs	r3, #0
 800b28c:	220a      	movs	r2, #10
 800b28e:	4620      	mov	r0, r4
 800b290:	f000 f9d4 	bl	800b63c <__multadd>
 800b294:	45b8      	cmp	r8, r7
 800b296:	4682      	mov	sl, r0
 800b298:	f04f 0300 	mov.w	r3, #0
 800b29c:	f04f 020a 	mov.w	r2, #10
 800b2a0:	4641      	mov	r1, r8
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	d107      	bne.n	800b2b6 <_dtoa_r+0xb1e>
 800b2a6:	f000 f9c9 	bl	800b63c <__multadd>
 800b2aa:	4680      	mov	r8, r0
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	9b04      	ldr	r3, [sp, #16]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	9304      	str	r3, [sp, #16]
 800b2b4:	e775      	b.n	800b1a2 <_dtoa_r+0xa0a>
 800b2b6:	f000 f9c1 	bl	800b63c <__multadd>
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	4680      	mov	r8, r0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 f9ba 	bl	800b63c <__multadd>
 800b2c8:	4607      	mov	r7, r0
 800b2ca:	e7f0      	b.n	800b2ae <_dtoa_r+0xb16>
 800b2cc:	9b04      	ldr	r3, [sp, #16]
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	9d00      	ldr	r5, [sp, #0]
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f7ff f9cf 	bl	800a678 <quorem>
 800b2da:	9b00      	ldr	r3, [sp, #0]
 800b2dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2e0:	f805 9b01 	strb.w	r9, [r5], #1
 800b2e4:	1aea      	subs	r2, r5, r3
 800b2e6:	9b01      	ldr	r3, [sp, #4]
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	dd07      	ble.n	800b2fc <_dtoa_r+0xb64>
 800b2ec:	4651      	mov	r1, sl
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	220a      	movs	r2, #10
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	f000 f9a2 	bl	800b63c <__multadd>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	e7ea      	b.n	800b2d2 <_dtoa_r+0xb3a>
 800b2fc:	9b01      	ldr	r3, [sp, #4]
 800b2fe:	f04f 0800 	mov.w	r8, #0
 800b302:	2b00      	cmp	r3, #0
 800b304:	bfcc      	ite	gt
 800b306:	461d      	movgt	r5, r3
 800b308:	2501      	movle	r5, #1
 800b30a:	9b00      	ldr	r3, [sp, #0]
 800b30c:	441d      	add	r5, r3
 800b30e:	4651      	mov	r1, sl
 800b310:	2201      	movs	r2, #1
 800b312:	4620      	mov	r0, r4
 800b314:	f000 fb8c 	bl	800ba30 <__lshift>
 800b318:	4631      	mov	r1, r6
 800b31a:	4682      	mov	sl, r0
 800b31c:	f000 fbf4 	bl	800bb08 <__mcmp>
 800b320:	2800      	cmp	r0, #0
 800b322:	dc97      	bgt.n	800b254 <_dtoa_r+0xabc>
 800b324:	d102      	bne.n	800b32c <_dtoa_r+0xb94>
 800b326:	f019 0f01 	tst.w	r9, #1
 800b32a:	d193      	bne.n	800b254 <_dtoa_r+0xabc>
 800b32c:	462b      	mov	r3, r5
 800b32e:	461d      	mov	r5, r3
 800b330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b334:	2a30      	cmp	r2, #48	; 0x30
 800b336:	d0fa      	beq.n	800b32e <_dtoa_r+0xb96>
 800b338:	e6de      	b.n	800b0f8 <_dtoa_r+0x960>
 800b33a:	9a00      	ldr	r2, [sp, #0]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d18a      	bne.n	800b256 <_dtoa_r+0xabe>
 800b340:	f10b 0b01 	add.w	fp, fp, #1
 800b344:	2331      	movs	r3, #49	; 0x31
 800b346:	e797      	b.n	800b278 <_dtoa_r+0xae0>
 800b348:	4b09      	ldr	r3, [pc, #36]	; (800b370 <_dtoa_r+0xbd8>)
 800b34a:	f7ff ba9a 	b.w	800a882 <_dtoa_r+0xea>
 800b34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b350:	2b00      	cmp	r3, #0
 800b352:	f47f aa6e 	bne.w	800a832 <_dtoa_r+0x9a>
 800b356:	4b07      	ldr	r3, [pc, #28]	; (800b374 <_dtoa_r+0xbdc>)
 800b358:	f7ff ba93 	b.w	800a882 <_dtoa_r+0xea>
 800b35c:	9b01      	ldr	r3, [sp, #4]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	dcb6      	bgt.n	800b2d0 <_dtoa_r+0xb38>
 800b362:	9b07      	ldr	r3, [sp, #28]
 800b364:	2b02      	cmp	r3, #2
 800b366:	f73f aeb2 	bgt.w	800b0ce <_dtoa_r+0x936>
 800b36a:	e7b1      	b.n	800b2d0 <_dtoa_r+0xb38>
 800b36c:	0800f31d 	.word	0x0800f31d
 800b370:	0800f278 	.word	0x0800f278
 800b374:	0800f2a1 	.word	0x0800f2a1

0800b378 <_free_r>:
 800b378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b37a:	2900      	cmp	r1, #0
 800b37c:	d043      	beq.n	800b406 <_free_r+0x8e>
 800b37e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b382:	1f0c      	subs	r4, r1, #4
 800b384:	9001      	str	r0, [sp, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	bfb8      	it	lt
 800b38a:	18e4      	addlt	r4, r4, r3
 800b38c:	f000 f8e8 	bl	800b560 <__malloc_lock>
 800b390:	4a1e      	ldr	r2, [pc, #120]	; (800b40c <_free_r+0x94>)
 800b392:	9801      	ldr	r0, [sp, #4]
 800b394:	6813      	ldr	r3, [r2, #0]
 800b396:	b933      	cbnz	r3, 800b3a6 <_free_r+0x2e>
 800b398:	6063      	str	r3, [r4, #4]
 800b39a:	6014      	str	r4, [r2, #0]
 800b39c:	b003      	add	sp, #12
 800b39e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3a2:	f000 b8e3 	b.w	800b56c <__malloc_unlock>
 800b3a6:	42a3      	cmp	r3, r4
 800b3a8:	d908      	bls.n	800b3bc <_free_r+0x44>
 800b3aa:	6825      	ldr	r5, [r4, #0]
 800b3ac:	1961      	adds	r1, r4, r5
 800b3ae:	428b      	cmp	r3, r1
 800b3b0:	bf01      	itttt	eq
 800b3b2:	6819      	ldreq	r1, [r3, #0]
 800b3b4:	685b      	ldreq	r3, [r3, #4]
 800b3b6:	1949      	addeq	r1, r1, r5
 800b3b8:	6021      	streq	r1, [r4, #0]
 800b3ba:	e7ed      	b.n	800b398 <_free_r+0x20>
 800b3bc:	461a      	mov	r2, r3
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	b10b      	cbz	r3, 800b3c6 <_free_r+0x4e>
 800b3c2:	42a3      	cmp	r3, r4
 800b3c4:	d9fa      	bls.n	800b3bc <_free_r+0x44>
 800b3c6:	6811      	ldr	r1, [r2, #0]
 800b3c8:	1855      	adds	r5, r2, r1
 800b3ca:	42a5      	cmp	r5, r4
 800b3cc:	d10b      	bne.n	800b3e6 <_free_r+0x6e>
 800b3ce:	6824      	ldr	r4, [r4, #0]
 800b3d0:	4421      	add	r1, r4
 800b3d2:	1854      	adds	r4, r2, r1
 800b3d4:	6011      	str	r1, [r2, #0]
 800b3d6:	42a3      	cmp	r3, r4
 800b3d8:	d1e0      	bne.n	800b39c <_free_r+0x24>
 800b3da:	681c      	ldr	r4, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	440c      	add	r4, r1
 800b3e0:	6053      	str	r3, [r2, #4]
 800b3e2:	6014      	str	r4, [r2, #0]
 800b3e4:	e7da      	b.n	800b39c <_free_r+0x24>
 800b3e6:	d902      	bls.n	800b3ee <_free_r+0x76>
 800b3e8:	230c      	movs	r3, #12
 800b3ea:	6003      	str	r3, [r0, #0]
 800b3ec:	e7d6      	b.n	800b39c <_free_r+0x24>
 800b3ee:	6825      	ldr	r5, [r4, #0]
 800b3f0:	1961      	adds	r1, r4, r5
 800b3f2:	428b      	cmp	r3, r1
 800b3f4:	bf02      	ittt	eq
 800b3f6:	6819      	ldreq	r1, [r3, #0]
 800b3f8:	685b      	ldreq	r3, [r3, #4]
 800b3fa:	1949      	addeq	r1, r1, r5
 800b3fc:	6063      	str	r3, [r4, #4]
 800b3fe:	bf08      	it	eq
 800b400:	6021      	streq	r1, [r4, #0]
 800b402:	6054      	str	r4, [r2, #4]
 800b404:	e7ca      	b.n	800b39c <_free_r+0x24>
 800b406:	b003      	add	sp, #12
 800b408:	bd30      	pop	{r4, r5, pc}
 800b40a:	bf00      	nop
 800b40c:	20001f20 	.word	0x20001f20

0800b410 <malloc>:
 800b410:	4b02      	ldr	r3, [pc, #8]	; (800b41c <malloc+0xc>)
 800b412:	4601      	mov	r1, r0
 800b414:	6818      	ldr	r0, [r3, #0]
 800b416:	f000 b823 	b.w	800b460 <_malloc_r>
 800b41a:	bf00      	nop
 800b41c:	20000074 	.word	0x20000074

0800b420 <sbrk_aligned>:
 800b420:	b570      	push	{r4, r5, r6, lr}
 800b422:	4e0e      	ldr	r6, [pc, #56]	; (800b45c <sbrk_aligned+0x3c>)
 800b424:	460c      	mov	r4, r1
 800b426:	4605      	mov	r5, r0
 800b428:	6831      	ldr	r1, [r6, #0]
 800b42a:	b911      	cbnz	r1, 800b432 <sbrk_aligned+0x12>
 800b42c:	f001 fff2 	bl	800d414 <_sbrk_r>
 800b430:	6030      	str	r0, [r6, #0]
 800b432:	4621      	mov	r1, r4
 800b434:	4628      	mov	r0, r5
 800b436:	f001 ffed 	bl	800d414 <_sbrk_r>
 800b43a:	1c43      	adds	r3, r0, #1
 800b43c:	d00a      	beq.n	800b454 <sbrk_aligned+0x34>
 800b43e:	1cc4      	adds	r4, r0, #3
 800b440:	f024 0403 	bic.w	r4, r4, #3
 800b444:	42a0      	cmp	r0, r4
 800b446:	d007      	beq.n	800b458 <sbrk_aligned+0x38>
 800b448:	1a21      	subs	r1, r4, r0
 800b44a:	4628      	mov	r0, r5
 800b44c:	f001 ffe2 	bl	800d414 <_sbrk_r>
 800b450:	3001      	adds	r0, #1
 800b452:	d101      	bne.n	800b458 <sbrk_aligned+0x38>
 800b454:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b458:	4620      	mov	r0, r4
 800b45a:	bd70      	pop	{r4, r5, r6, pc}
 800b45c:	20001f24 	.word	0x20001f24

0800b460 <_malloc_r>:
 800b460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b464:	1ccd      	adds	r5, r1, #3
 800b466:	4607      	mov	r7, r0
 800b468:	f025 0503 	bic.w	r5, r5, #3
 800b46c:	3508      	adds	r5, #8
 800b46e:	2d0c      	cmp	r5, #12
 800b470:	bf38      	it	cc
 800b472:	250c      	movcc	r5, #12
 800b474:	2d00      	cmp	r5, #0
 800b476:	db01      	blt.n	800b47c <_malloc_r+0x1c>
 800b478:	42a9      	cmp	r1, r5
 800b47a:	d905      	bls.n	800b488 <_malloc_r+0x28>
 800b47c:	230c      	movs	r3, #12
 800b47e:	2600      	movs	r6, #0
 800b480:	603b      	str	r3, [r7, #0]
 800b482:	4630      	mov	r0, r6
 800b484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b488:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b55c <_malloc_r+0xfc>
 800b48c:	f000 f868 	bl	800b560 <__malloc_lock>
 800b490:	f8d8 3000 	ldr.w	r3, [r8]
 800b494:	461c      	mov	r4, r3
 800b496:	bb5c      	cbnz	r4, 800b4f0 <_malloc_r+0x90>
 800b498:	4629      	mov	r1, r5
 800b49a:	4638      	mov	r0, r7
 800b49c:	f7ff ffc0 	bl	800b420 <sbrk_aligned>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	4604      	mov	r4, r0
 800b4a4:	d155      	bne.n	800b552 <_malloc_r+0xf2>
 800b4a6:	f8d8 4000 	ldr.w	r4, [r8]
 800b4aa:	4626      	mov	r6, r4
 800b4ac:	2e00      	cmp	r6, #0
 800b4ae:	d145      	bne.n	800b53c <_malloc_r+0xdc>
 800b4b0:	2c00      	cmp	r4, #0
 800b4b2:	d048      	beq.n	800b546 <_malloc_r+0xe6>
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	eb04 0903 	add.w	r9, r4, r3
 800b4be:	f001 ffa9 	bl	800d414 <_sbrk_r>
 800b4c2:	4581      	cmp	r9, r0
 800b4c4:	d13f      	bne.n	800b546 <_malloc_r+0xe6>
 800b4c6:	6821      	ldr	r1, [r4, #0]
 800b4c8:	4638      	mov	r0, r7
 800b4ca:	1a6d      	subs	r5, r5, r1
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7ff ffa7 	bl	800b420 <sbrk_aligned>
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	d037      	beq.n	800b546 <_malloc_r+0xe6>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	442b      	add	r3, r5
 800b4da:	6023      	str	r3, [r4, #0]
 800b4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d038      	beq.n	800b556 <_malloc_r+0xf6>
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	42a2      	cmp	r2, r4
 800b4e8:	d12b      	bne.n	800b542 <_malloc_r+0xe2>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	605a      	str	r2, [r3, #4]
 800b4ee:	e00f      	b.n	800b510 <_malloc_r+0xb0>
 800b4f0:	6822      	ldr	r2, [r4, #0]
 800b4f2:	1b52      	subs	r2, r2, r5
 800b4f4:	d41f      	bmi.n	800b536 <_malloc_r+0xd6>
 800b4f6:	2a0b      	cmp	r2, #11
 800b4f8:	d917      	bls.n	800b52a <_malloc_r+0xca>
 800b4fa:	1961      	adds	r1, r4, r5
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	6025      	str	r5, [r4, #0]
 800b500:	bf18      	it	ne
 800b502:	6059      	strne	r1, [r3, #4]
 800b504:	6863      	ldr	r3, [r4, #4]
 800b506:	bf08      	it	eq
 800b508:	f8c8 1000 	streq.w	r1, [r8]
 800b50c:	5162      	str	r2, [r4, r5]
 800b50e:	604b      	str	r3, [r1, #4]
 800b510:	f104 060b 	add.w	r6, r4, #11
 800b514:	4638      	mov	r0, r7
 800b516:	f000 f829 	bl	800b56c <__malloc_unlock>
 800b51a:	1d23      	adds	r3, r4, #4
 800b51c:	f026 0607 	bic.w	r6, r6, #7
 800b520:	1af2      	subs	r2, r6, r3
 800b522:	d0ae      	beq.n	800b482 <_malloc_r+0x22>
 800b524:	1b9b      	subs	r3, r3, r6
 800b526:	50a3      	str	r3, [r4, r2]
 800b528:	e7ab      	b.n	800b482 <_malloc_r+0x22>
 800b52a:	42a3      	cmp	r3, r4
 800b52c:	6862      	ldr	r2, [r4, #4]
 800b52e:	d1dd      	bne.n	800b4ec <_malloc_r+0x8c>
 800b530:	f8c8 2000 	str.w	r2, [r8]
 800b534:	e7ec      	b.n	800b510 <_malloc_r+0xb0>
 800b536:	4623      	mov	r3, r4
 800b538:	6864      	ldr	r4, [r4, #4]
 800b53a:	e7ac      	b.n	800b496 <_malloc_r+0x36>
 800b53c:	4634      	mov	r4, r6
 800b53e:	6876      	ldr	r6, [r6, #4]
 800b540:	e7b4      	b.n	800b4ac <_malloc_r+0x4c>
 800b542:	4613      	mov	r3, r2
 800b544:	e7cc      	b.n	800b4e0 <_malloc_r+0x80>
 800b546:	230c      	movs	r3, #12
 800b548:	4638      	mov	r0, r7
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	f000 f80e 	bl	800b56c <__malloc_unlock>
 800b550:	e797      	b.n	800b482 <_malloc_r+0x22>
 800b552:	6025      	str	r5, [r4, #0]
 800b554:	e7dc      	b.n	800b510 <_malloc_r+0xb0>
 800b556:	605b      	str	r3, [r3, #4]
 800b558:	deff      	udf	#255	; 0xff
 800b55a:	bf00      	nop
 800b55c:	20001f20 	.word	0x20001f20

0800b560 <__malloc_lock>:
 800b560:	4801      	ldr	r0, [pc, #4]	; (800b568 <__malloc_lock+0x8>)
 800b562:	f7ff b872 	b.w	800a64a <__retarget_lock_acquire_recursive>
 800b566:	bf00      	nop
 800b568:	20001f1c 	.word	0x20001f1c

0800b56c <__malloc_unlock>:
 800b56c:	4801      	ldr	r0, [pc, #4]	; (800b574 <__malloc_unlock+0x8>)
 800b56e:	f7ff b86d 	b.w	800a64c <__retarget_lock_release_recursive>
 800b572:	bf00      	nop
 800b574:	20001f1c 	.word	0x20001f1c

0800b578 <_Balloc>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	69c6      	ldr	r6, [r0, #28]
 800b57c:	4604      	mov	r4, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	b976      	cbnz	r6, 800b5a0 <_Balloc+0x28>
 800b582:	2010      	movs	r0, #16
 800b584:	f7ff ff44 	bl	800b410 <malloc>
 800b588:	4602      	mov	r2, r0
 800b58a:	61e0      	str	r0, [r4, #28]
 800b58c:	b920      	cbnz	r0, 800b598 <_Balloc+0x20>
 800b58e:	4b18      	ldr	r3, [pc, #96]	; (800b5f0 <_Balloc+0x78>)
 800b590:	216b      	movs	r1, #107	; 0x6b
 800b592:	4818      	ldr	r0, [pc, #96]	; (800b5f4 <_Balloc+0x7c>)
 800b594:	f001 ff64 	bl	800d460 <__assert_func>
 800b598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b59c:	6006      	str	r6, [r0, #0]
 800b59e:	60c6      	str	r6, [r0, #12]
 800b5a0:	69e6      	ldr	r6, [r4, #28]
 800b5a2:	68f3      	ldr	r3, [r6, #12]
 800b5a4:	b183      	cbz	r3, 800b5c8 <_Balloc+0x50>
 800b5a6:	69e3      	ldr	r3, [r4, #28]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5ae:	b9b8      	cbnz	r0, 800b5e0 <_Balloc+0x68>
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	fa01 f605 	lsl.w	r6, r1, r5
 800b5b8:	1d72      	adds	r2, r6, #5
 800b5ba:	0092      	lsls	r2, r2, #2
 800b5bc:	f001 ff6e 	bl	800d49c <_calloc_r>
 800b5c0:	b160      	cbz	r0, 800b5dc <_Balloc+0x64>
 800b5c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5c6:	e00e      	b.n	800b5e6 <_Balloc+0x6e>
 800b5c8:	2221      	movs	r2, #33	; 0x21
 800b5ca:	2104      	movs	r1, #4
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f001 ff65 	bl	800d49c <_calloc_r>
 800b5d2:	69e3      	ldr	r3, [r4, #28]
 800b5d4:	60f0      	str	r0, [r6, #12]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d1e4      	bne.n	800b5a6 <_Balloc+0x2e>
 800b5dc:	2000      	movs	r0, #0
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	6802      	ldr	r2, [r0, #0]
 800b5e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5ec:	e7f7      	b.n	800b5de <_Balloc+0x66>
 800b5ee:	bf00      	nop
 800b5f0:	0800f2ae 	.word	0x0800f2ae
 800b5f4:	0800f32e 	.word	0x0800f32e

0800b5f8 <_Bfree>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	69c6      	ldr	r6, [r0, #28]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	b976      	cbnz	r6, 800b620 <_Bfree+0x28>
 800b602:	2010      	movs	r0, #16
 800b604:	f7ff ff04 	bl	800b410 <malloc>
 800b608:	4602      	mov	r2, r0
 800b60a:	61e8      	str	r0, [r5, #28]
 800b60c:	b920      	cbnz	r0, 800b618 <_Bfree+0x20>
 800b60e:	4b09      	ldr	r3, [pc, #36]	; (800b634 <_Bfree+0x3c>)
 800b610:	218f      	movs	r1, #143	; 0x8f
 800b612:	4809      	ldr	r0, [pc, #36]	; (800b638 <_Bfree+0x40>)
 800b614:	f001 ff24 	bl	800d460 <__assert_func>
 800b618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b61c:	6006      	str	r6, [r0, #0]
 800b61e:	60c6      	str	r6, [r0, #12]
 800b620:	b13c      	cbz	r4, 800b632 <_Bfree+0x3a>
 800b622:	69eb      	ldr	r3, [r5, #28]
 800b624:	6862      	ldr	r2, [r4, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b62c:	6021      	str	r1, [r4, #0]
 800b62e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	0800f2ae 	.word	0x0800f2ae
 800b638:	0800f32e 	.word	0x0800f32e

0800b63c <__multadd>:
 800b63c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b640:	f101 0c14 	add.w	ip, r1, #20
 800b644:	4607      	mov	r7, r0
 800b646:	460c      	mov	r4, r1
 800b648:	461e      	mov	r6, r3
 800b64a:	690d      	ldr	r5, [r1, #16]
 800b64c:	2000      	movs	r0, #0
 800b64e:	f8dc 3000 	ldr.w	r3, [ip]
 800b652:	3001      	adds	r0, #1
 800b654:	b299      	uxth	r1, r3
 800b656:	4285      	cmp	r5, r0
 800b658:	fb02 6101 	mla	r1, r2, r1, r6
 800b65c:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b660:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b664:	b289      	uxth	r1, r1
 800b666:	fb02 3306 	mla	r3, r2, r6, r3
 800b66a:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b66e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b672:	f84c 1b04 	str.w	r1, [ip], #4
 800b676:	dcea      	bgt.n	800b64e <__multadd+0x12>
 800b678:	b30e      	cbz	r6, 800b6be <__multadd+0x82>
 800b67a:	68a3      	ldr	r3, [r4, #8]
 800b67c:	42ab      	cmp	r3, r5
 800b67e:	dc19      	bgt.n	800b6b4 <__multadd+0x78>
 800b680:	6861      	ldr	r1, [r4, #4]
 800b682:	4638      	mov	r0, r7
 800b684:	3101      	adds	r1, #1
 800b686:	f7ff ff77 	bl	800b578 <_Balloc>
 800b68a:	4680      	mov	r8, r0
 800b68c:	b928      	cbnz	r0, 800b69a <__multadd+0x5e>
 800b68e:	4602      	mov	r2, r0
 800b690:	4b0c      	ldr	r3, [pc, #48]	; (800b6c4 <__multadd+0x88>)
 800b692:	21ba      	movs	r1, #186	; 0xba
 800b694:	480c      	ldr	r0, [pc, #48]	; (800b6c8 <__multadd+0x8c>)
 800b696:	f001 fee3 	bl	800d460 <__assert_func>
 800b69a:	6922      	ldr	r2, [r4, #16]
 800b69c:	f104 010c 	add.w	r1, r4, #12
 800b6a0:	300c      	adds	r0, #12
 800b6a2:	3202      	adds	r2, #2
 800b6a4:	0092      	lsls	r2, r2, #2
 800b6a6:	f001 fec5 	bl	800d434 <memcpy>
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	4644      	mov	r4, r8
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7ff ffa2 	bl	800b5f8 <_Bfree>
 800b6b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b6b8:	3501      	adds	r5, #1
 800b6ba:	615e      	str	r6, [r3, #20]
 800b6bc:	6125      	str	r5, [r4, #16]
 800b6be:	4620      	mov	r0, r4
 800b6c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6c4:	0800f31d 	.word	0x0800f31d
 800b6c8:	0800f32e 	.word	0x0800f32e

0800b6cc <__s2b>:
 800b6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6d0:	4615      	mov	r5, r2
 800b6d2:	461f      	mov	r7, r3
 800b6d4:	2209      	movs	r2, #9
 800b6d6:	3308      	adds	r3, #8
 800b6d8:	460c      	mov	r4, r1
 800b6da:	4606      	mov	r6, r0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	fb93 f3f2 	sdiv	r3, r3, r2
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	db09      	blt.n	800b6fc <__s2b+0x30>
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	f7ff ff45 	bl	800b578 <_Balloc>
 800b6ee:	b940      	cbnz	r0, 800b702 <__s2b+0x36>
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	4b19      	ldr	r3, [pc, #100]	; (800b758 <__s2b+0x8c>)
 800b6f4:	21d3      	movs	r1, #211	; 0xd3
 800b6f6:	4819      	ldr	r0, [pc, #100]	; (800b75c <__s2b+0x90>)
 800b6f8:	f001 feb2 	bl	800d460 <__assert_func>
 800b6fc:	0052      	lsls	r2, r2, #1
 800b6fe:	3101      	adds	r1, #1
 800b700:	e7f0      	b.n	800b6e4 <__s2b+0x18>
 800b702:	9b08      	ldr	r3, [sp, #32]
 800b704:	2d09      	cmp	r5, #9
 800b706:	6143      	str	r3, [r0, #20]
 800b708:	f04f 0301 	mov.w	r3, #1
 800b70c:	6103      	str	r3, [r0, #16]
 800b70e:	dd16      	ble.n	800b73e <__s2b+0x72>
 800b710:	f104 0909 	add.w	r9, r4, #9
 800b714:	442c      	add	r4, r5
 800b716:	46c8      	mov	r8, r9
 800b718:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b71c:	4601      	mov	r1, r0
 800b71e:	220a      	movs	r2, #10
 800b720:	4630      	mov	r0, r6
 800b722:	3b30      	subs	r3, #48	; 0x30
 800b724:	f7ff ff8a 	bl	800b63c <__multadd>
 800b728:	45a0      	cmp	r8, r4
 800b72a:	d1f5      	bne.n	800b718 <__s2b+0x4c>
 800b72c:	f1a5 0408 	sub.w	r4, r5, #8
 800b730:	444c      	add	r4, r9
 800b732:	1b2d      	subs	r5, r5, r4
 800b734:	1963      	adds	r3, r4, r5
 800b736:	42bb      	cmp	r3, r7
 800b738:	db04      	blt.n	800b744 <__s2b+0x78>
 800b73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b73e:	340a      	adds	r4, #10
 800b740:	2509      	movs	r5, #9
 800b742:	e7f6      	b.n	800b732 <__s2b+0x66>
 800b744:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b748:	4601      	mov	r1, r0
 800b74a:	220a      	movs	r2, #10
 800b74c:	4630      	mov	r0, r6
 800b74e:	3b30      	subs	r3, #48	; 0x30
 800b750:	f7ff ff74 	bl	800b63c <__multadd>
 800b754:	e7ee      	b.n	800b734 <__s2b+0x68>
 800b756:	bf00      	nop
 800b758:	0800f31d 	.word	0x0800f31d
 800b75c:	0800f32e 	.word	0x0800f32e

0800b760 <__hi0bits>:
 800b760:	0c03      	lsrs	r3, r0, #16
 800b762:	041b      	lsls	r3, r3, #16
 800b764:	b9d3      	cbnz	r3, 800b79c <__hi0bits+0x3c>
 800b766:	0400      	lsls	r0, r0, #16
 800b768:	2310      	movs	r3, #16
 800b76a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b76e:	bf04      	itt	eq
 800b770:	0200      	lsleq	r0, r0, #8
 800b772:	3308      	addeq	r3, #8
 800b774:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b778:	bf04      	itt	eq
 800b77a:	0100      	lsleq	r0, r0, #4
 800b77c:	3304      	addeq	r3, #4
 800b77e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b782:	bf04      	itt	eq
 800b784:	0080      	lsleq	r0, r0, #2
 800b786:	3302      	addeq	r3, #2
 800b788:	2800      	cmp	r0, #0
 800b78a:	db05      	blt.n	800b798 <__hi0bits+0x38>
 800b78c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b790:	f103 0301 	add.w	r3, r3, #1
 800b794:	bf08      	it	eq
 800b796:	2320      	moveq	r3, #32
 800b798:	4618      	mov	r0, r3
 800b79a:	4770      	bx	lr
 800b79c:	2300      	movs	r3, #0
 800b79e:	e7e4      	b.n	800b76a <__hi0bits+0xa>

0800b7a0 <__lo0bits>:
 800b7a0:	6803      	ldr	r3, [r0, #0]
 800b7a2:	f013 0207 	ands.w	r2, r3, #7
 800b7a6:	d00c      	beq.n	800b7c2 <__lo0bits+0x22>
 800b7a8:	07d9      	lsls	r1, r3, #31
 800b7aa:	d422      	bmi.n	800b7f2 <__lo0bits+0x52>
 800b7ac:	079a      	lsls	r2, r3, #30
 800b7ae:	bf47      	ittee	mi
 800b7b0:	085b      	lsrmi	r3, r3, #1
 800b7b2:	2201      	movmi	r2, #1
 800b7b4:	089b      	lsrpl	r3, r3, #2
 800b7b6:	2202      	movpl	r2, #2
 800b7b8:	bf4c      	ite	mi
 800b7ba:	6003      	strmi	r3, [r0, #0]
 800b7bc:	6003      	strpl	r3, [r0, #0]
 800b7be:	4610      	mov	r0, r2
 800b7c0:	4770      	bx	lr
 800b7c2:	b299      	uxth	r1, r3
 800b7c4:	b909      	cbnz	r1, 800b7ca <__lo0bits+0x2a>
 800b7c6:	0c1b      	lsrs	r3, r3, #16
 800b7c8:	2210      	movs	r2, #16
 800b7ca:	b2d9      	uxtb	r1, r3
 800b7cc:	b909      	cbnz	r1, 800b7d2 <__lo0bits+0x32>
 800b7ce:	3208      	adds	r2, #8
 800b7d0:	0a1b      	lsrs	r3, r3, #8
 800b7d2:	0719      	lsls	r1, r3, #28
 800b7d4:	bf04      	itt	eq
 800b7d6:	091b      	lsreq	r3, r3, #4
 800b7d8:	3204      	addeq	r2, #4
 800b7da:	0799      	lsls	r1, r3, #30
 800b7dc:	bf04      	itt	eq
 800b7de:	089b      	lsreq	r3, r3, #2
 800b7e0:	3202      	addeq	r2, #2
 800b7e2:	07d9      	lsls	r1, r3, #31
 800b7e4:	d403      	bmi.n	800b7ee <__lo0bits+0x4e>
 800b7e6:	085b      	lsrs	r3, r3, #1
 800b7e8:	f102 0201 	add.w	r2, r2, #1
 800b7ec:	d003      	beq.n	800b7f6 <__lo0bits+0x56>
 800b7ee:	6003      	str	r3, [r0, #0]
 800b7f0:	e7e5      	b.n	800b7be <__lo0bits+0x1e>
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	e7e3      	b.n	800b7be <__lo0bits+0x1e>
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	e7e1      	b.n	800b7be <__lo0bits+0x1e>
	...

0800b7fc <__i2b>:
 800b7fc:	b510      	push	{r4, lr}
 800b7fe:	460c      	mov	r4, r1
 800b800:	2101      	movs	r1, #1
 800b802:	f7ff feb9 	bl	800b578 <_Balloc>
 800b806:	4602      	mov	r2, r0
 800b808:	b928      	cbnz	r0, 800b816 <__i2b+0x1a>
 800b80a:	4b05      	ldr	r3, [pc, #20]	; (800b820 <__i2b+0x24>)
 800b80c:	f240 1145 	movw	r1, #325	; 0x145
 800b810:	4804      	ldr	r0, [pc, #16]	; (800b824 <__i2b+0x28>)
 800b812:	f001 fe25 	bl	800d460 <__assert_func>
 800b816:	2301      	movs	r3, #1
 800b818:	6144      	str	r4, [r0, #20]
 800b81a:	6103      	str	r3, [r0, #16]
 800b81c:	bd10      	pop	{r4, pc}
 800b81e:	bf00      	nop
 800b820:	0800f31d 	.word	0x0800f31d
 800b824:	0800f32e 	.word	0x0800f32e

0800b828 <__multiply>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	4691      	mov	r9, r2
 800b82e:	690a      	ldr	r2, [r1, #16]
 800b830:	460c      	mov	r4, r1
 800b832:	b085      	sub	sp, #20
 800b834:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b838:	429a      	cmp	r2, r3
 800b83a:	bfbe      	ittt	lt
 800b83c:	460b      	movlt	r3, r1
 800b83e:	464c      	movlt	r4, r9
 800b840:	4699      	movlt	r9, r3
 800b842:	6927      	ldr	r7, [r4, #16]
 800b844:	68a3      	ldr	r3, [r4, #8]
 800b846:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b84a:	6861      	ldr	r1, [r4, #4]
 800b84c:	eb07 060a 	add.w	r6, r7, sl
 800b850:	42b3      	cmp	r3, r6
 800b852:	bfb8      	it	lt
 800b854:	3101      	addlt	r1, #1
 800b856:	f7ff fe8f 	bl	800b578 <_Balloc>
 800b85a:	b930      	cbnz	r0, 800b86a <__multiply+0x42>
 800b85c:	4602      	mov	r2, r0
 800b85e:	4b45      	ldr	r3, [pc, #276]	; (800b974 <__multiply+0x14c>)
 800b860:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b864:	4844      	ldr	r0, [pc, #272]	; (800b978 <__multiply+0x150>)
 800b866:	f001 fdfb 	bl	800d460 <__assert_func>
 800b86a:	f100 0514 	add.w	r5, r0, #20
 800b86e:	2200      	movs	r2, #0
 800b870:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b874:	462b      	mov	r3, r5
 800b876:	4543      	cmp	r3, r8
 800b878:	d321      	bcc.n	800b8be <__multiply+0x96>
 800b87a:	f104 0314 	add.w	r3, r4, #20
 800b87e:	f104 0115 	add.w	r1, r4, #21
 800b882:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b886:	f109 0314 	add.w	r3, r9, #20
 800b88a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b88e:	9202      	str	r2, [sp, #8]
 800b890:	1b3a      	subs	r2, r7, r4
 800b892:	3a15      	subs	r2, #21
 800b894:	f022 0203 	bic.w	r2, r2, #3
 800b898:	3204      	adds	r2, #4
 800b89a:	428f      	cmp	r7, r1
 800b89c:	bf38      	it	cc
 800b89e:	2204      	movcc	r2, #4
 800b8a0:	9201      	str	r2, [sp, #4]
 800b8a2:	9a02      	ldr	r2, [sp, #8]
 800b8a4:	9303      	str	r3, [sp, #12]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d80c      	bhi.n	800b8c4 <__multiply+0x9c>
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	dd03      	ble.n	800b8b6 <__multiply+0x8e>
 800b8ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d05b      	beq.n	800b96e <__multiply+0x146>
 800b8b6:	6106      	str	r6, [r0, #16]
 800b8b8:	b005      	add	sp, #20
 800b8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8be:	f843 2b04 	str.w	r2, [r3], #4
 800b8c2:	e7d8      	b.n	800b876 <__multiply+0x4e>
 800b8c4:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8c8:	f1ba 0f00 	cmp.w	sl, #0
 800b8cc:	d024      	beq.n	800b918 <__multiply+0xf0>
 800b8ce:	f104 0e14 	add.w	lr, r4, #20
 800b8d2:	46a9      	mov	r9, r5
 800b8d4:	f04f 0c00 	mov.w	ip, #0
 800b8d8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b8dc:	f8d9 1000 	ldr.w	r1, [r9]
 800b8e0:	fa1f fb82 	uxth.w	fp, r2
 800b8e4:	4577      	cmp	r7, lr
 800b8e6:	b289      	uxth	r1, r1
 800b8e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b8ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b8f0:	f8d9 2000 	ldr.w	r2, [r9]
 800b8f4:	4461      	add	r1, ip
 800b8f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b8fa:	fb0a c20b 	mla	r2, sl, fp, ip
 800b8fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b902:	b289      	uxth	r1, r1
 800b904:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b908:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b90c:	f849 1b04 	str.w	r1, [r9], #4
 800b910:	d8e2      	bhi.n	800b8d8 <__multiply+0xb0>
 800b912:	9a01      	ldr	r2, [sp, #4]
 800b914:	f845 c002 	str.w	ip, [r5, r2]
 800b918:	9a03      	ldr	r2, [sp, #12]
 800b91a:	3304      	adds	r3, #4
 800b91c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b920:	f1b9 0f00 	cmp.w	r9, #0
 800b924:	d021      	beq.n	800b96a <__multiply+0x142>
 800b926:	6829      	ldr	r1, [r5, #0]
 800b928:	f104 0c14 	add.w	ip, r4, #20
 800b92c:	46ae      	mov	lr, r5
 800b92e:	f04f 0a00 	mov.w	sl, #0
 800b932:	f8bc b000 	ldrh.w	fp, [ip]
 800b936:	b289      	uxth	r1, r1
 800b938:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b93c:	fb09 220b 	mla	r2, r9, fp, r2
 800b940:	4452      	add	r2, sl
 800b942:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b946:	f84e 1b04 	str.w	r1, [lr], #4
 800b94a:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b94e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b952:	f8be 1000 	ldrh.w	r1, [lr]
 800b956:	4567      	cmp	r7, ip
 800b958:	fb09 110a 	mla	r1, r9, sl, r1
 800b95c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b960:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b964:	d8e5      	bhi.n	800b932 <__multiply+0x10a>
 800b966:	9a01      	ldr	r2, [sp, #4]
 800b968:	50a9      	str	r1, [r5, r2]
 800b96a:	3504      	adds	r5, #4
 800b96c:	e799      	b.n	800b8a2 <__multiply+0x7a>
 800b96e:	3e01      	subs	r6, #1
 800b970:	e79b      	b.n	800b8aa <__multiply+0x82>
 800b972:	bf00      	nop
 800b974:	0800f31d 	.word	0x0800f31d
 800b978:	0800f32e 	.word	0x0800f32e

0800b97c <__pow5mult>:
 800b97c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b980:	4615      	mov	r5, r2
 800b982:	f012 0203 	ands.w	r2, r2, #3
 800b986:	4606      	mov	r6, r0
 800b988:	460f      	mov	r7, r1
 800b98a:	d007      	beq.n	800b99c <__pow5mult+0x20>
 800b98c:	3a01      	subs	r2, #1
 800b98e:	4c25      	ldr	r4, [pc, #148]	; (800ba24 <__pow5mult+0xa8>)
 800b990:	2300      	movs	r3, #0
 800b992:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b996:	f7ff fe51 	bl	800b63c <__multadd>
 800b99a:	4607      	mov	r7, r0
 800b99c:	10ad      	asrs	r5, r5, #2
 800b99e:	d03d      	beq.n	800ba1c <__pow5mult+0xa0>
 800b9a0:	69f4      	ldr	r4, [r6, #28]
 800b9a2:	b97c      	cbnz	r4, 800b9c4 <__pow5mult+0x48>
 800b9a4:	2010      	movs	r0, #16
 800b9a6:	f7ff fd33 	bl	800b410 <malloc>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	61f0      	str	r0, [r6, #28]
 800b9ae:	b928      	cbnz	r0, 800b9bc <__pow5mult+0x40>
 800b9b0:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <__pow5mult+0xac>)
 800b9b2:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b9b6:	481d      	ldr	r0, [pc, #116]	; (800ba2c <__pow5mult+0xb0>)
 800b9b8:	f001 fd52 	bl	800d460 <__assert_func>
 800b9bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9c0:	6004      	str	r4, [r0, #0]
 800b9c2:	60c4      	str	r4, [r0, #12]
 800b9c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b9c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b9cc:	b94c      	cbnz	r4, 800b9e2 <__pow5mult+0x66>
 800b9ce:	f240 2171 	movw	r1, #625	; 0x271
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	f7ff ff12 	bl	800b7fc <__i2b>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	f8c8 0008 	str.w	r0, [r8, #8]
 800b9e0:	6003      	str	r3, [r0, #0]
 800b9e2:	f04f 0900 	mov.w	r9, #0
 800b9e6:	07eb      	lsls	r3, r5, #31
 800b9e8:	d50a      	bpl.n	800ba00 <__pow5mult+0x84>
 800b9ea:	4639      	mov	r1, r7
 800b9ec:	4622      	mov	r2, r4
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	f7ff ff1a 	bl	800b828 <__multiply>
 800b9f4:	4680      	mov	r8, r0
 800b9f6:	4639      	mov	r1, r7
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	4647      	mov	r7, r8
 800b9fc:	f7ff fdfc 	bl	800b5f8 <_Bfree>
 800ba00:	106d      	asrs	r5, r5, #1
 800ba02:	d00b      	beq.n	800ba1c <__pow5mult+0xa0>
 800ba04:	6820      	ldr	r0, [r4, #0]
 800ba06:	b938      	cbnz	r0, 800ba18 <__pow5mult+0x9c>
 800ba08:	4622      	mov	r2, r4
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff ff0b 	bl	800b828 <__multiply>
 800ba12:	6020      	str	r0, [r4, #0]
 800ba14:	f8c0 9000 	str.w	r9, [r0]
 800ba18:	4604      	mov	r4, r0
 800ba1a:	e7e4      	b.n	800b9e6 <__pow5mult+0x6a>
 800ba1c:	4638      	mov	r0, r7
 800ba1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba22:	bf00      	nop
 800ba24:	0800f478 	.word	0x0800f478
 800ba28:	0800f2ae 	.word	0x0800f2ae
 800ba2c:	0800f32e 	.word	0x0800f32e

0800ba30 <__lshift>:
 800ba30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba34:	460c      	mov	r4, r1
 800ba36:	4607      	mov	r7, r0
 800ba38:	4691      	mov	r9, r2
 800ba3a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	6849      	ldr	r1, [r1, #4]
 800ba42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba46:	68a3      	ldr	r3, [r4, #8]
 800ba48:	f108 0601 	add.w	r6, r8, #1
 800ba4c:	42b3      	cmp	r3, r6
 800ba4e:	db0b      	blt.n	800ba68 <__lshift+0x38>
 800ba50:	4638      	mov	r0, r7
 800ba52:	f7ff fd91 	bl	800b578 <_Balloc>
 800ba56:	4605      	mov	r5, r0
 800ba58:	b948      	cbnz	r0, 800ba6e <__lshift+0x3e>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4b28      	ldr	r3, [pc, #160]	; (800bb00 <__lshift+0xd0>)
 800ba5e:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ba62:	4828      	ldr	r0, [pc, #160]	; (800bb04 <__lshift+0xd4>)
 800ba64:	f001 fcfc 	bl	800d460 <__assert_func>
 800ba68:	3101      	adds	r1, #1
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	e7ee      	b.n	800ba4c <__lshift+0x1c>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f100 0114 	add.w	r1, r0, #20
 800ba74:	f100 0210 	add.w	r2, r0, #16
 800ba78:	4618      	mov	r0, r3
 800ba7a:	4553      	cmp	r3, sl
 800ba7c:	db33      	blt.n	800bae6 <__lshift+0xb6>
 800ba7e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba82:	f104 0314 	add.w	r3, r4, #20
 800ba86:	6920      	ldr	r0, [r4, #16]
 800ba88:	f019 091f 	ands.w	r9, r9, #31
 800ba8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba94:	d02b      	beq.n	800baee <__lshift+0xbe>
 800ba96:	f1c9 0e20 	rsb	lr, r9, #32
 800ba9a:	468a      	mov	sl, r1
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	6818      	ldr	r0, [r3, #0]
 800baa0:	fa00 f009 	lsl.w	r0, r0, r9
 800baa4:	4310      	orrs	r0, r2
 800baa6:	f84a 0b04 	str.w	r0, [sl], #4
 800baaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800baae:	459c      	cmp	ip, r3
 800bab0:	fa22 f20e 	lsr.w	r2, r2, lr
 800bab4:	d8f3      	bhi.n	800ba9e <__lshift+0x6e>
 800bab6:	ebac 0304 	sub.w	r3, ip, r4
 800baba:	f104 0015 	add.w	r0, r4, #21
 800babe:	3b15      	subs	r3, #21
 800bac0:	f023 0303 	bic.w	r3, r3, #3
 800bac4:	3304      	adds	r3, #4
 800bac6:	4584      	cmp	ip, r0
 800bac8:	bf38      	it	cc
 800baca:	2304      	movcc	r3, #4
 800bacc:	50ca      	str	r2, [r1, r3]
 800bace:	b10a      	cbz	r2, 800bad4 <__lshift+0xa4>
 800bad0:	f108 0602 	add.w	r6, r8, #2
 800bad4:	3e01      	subs	r6, #1
 800bad6:	4638      	mov	r0, r7
 800bad8:	4621      	mov	r1, r4
 800bada:	612e      	str	r6, [r5, #16]
 800badc:	f7ff fd8c 	bl	800b5f8 <_Bfree>
 800bae0:	4628      	mov	r0, r5
 800bae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bae6:	3301      	adds	r3, #1
 800bae8:	f842 0f04 	str.w	r0, [r2, #4]!
 800baec:	e7c5      	b.n	800ba7a <__lshift+0x4a>
 800baee:	3904      	subs	r1, #4
 800baf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf4:	459c      	cmp	ip, r3
 800baf6:	f841 2f04 	str.w	r2, [r1, #4]!
 800bafa:	d8f9      	bhi.n	800baf0 <__lshift+0xc0>
 800bafc:	e7ea      	b.n	800bad4 <__lshift+0xa4>
 800bafe:	bf00      	nop
 800bb00:	0800f31d 	.word	0x0800f31d
 800bb04:	0800f32e 	.word	0x0800f32e

0800bb08 <__mcmp>:
 800bb08:	6902      	ldr	r2, [r0, #16]
 800bb0a:	b530      	push	{r4, r5, lr}
 800bb0c:	690c      	ldr	r4, [r1, #16]
 800bb0e:	1b12      	subs	r2, r2, r4
 800bb10:	d10e      	bne.n	800bb30 <__mcmp+0x28>
 800bb12:	f100 0314 	add.w	r3, r0, #20
 800bb16:	3114      	adds	r1, #20
 800bb18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb28:	42a5      	cmp	r5, r4
 800bb2a:	d003      	beq.n	800bb34 <__mcmp+0x2c>
 800bb2c:	d305      	bcc.n	800bb3a <__mcmp+0x32>
 800bb2e:	2201      	movs	r2, #1
 800bb30:	4610      	mov	r0, r2
 800bb32:	bd30      	pop	{r4, r5, pc}
 800bb34:	4283      	cmp	r3, r0
 800bb36:	d3f3      	bcc.n	800bb20 <__mcmp+0x18>
 800bb38:	e7fa      	b.n	800bb30 <__mcmp+0x28>
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb3e:	e7f7      	b.n	800bb30 <__mcmp+0x28>

0800bb40 <__mdiff>:
 800bb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb44:	460c      	mov	r4, r1
 800bb46:	4606      	mov	r6, r0
 800bb48:	4611      	mov	r1, r2
 800bb4a:	4692      	mov	sl, r2
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f7ff ffdb 	bl	800bb08 <__mcmp>
 800bb52:	1e05      	subs	r5, r0, #0
 800bb54:	d110      	bne.n	800bb78 <__mdiff+0x38>
 800bb56:	4629      	mov	r1, r5
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7ff fd0d 	bl	800b578 <_Balloc>
 800bb5e:	b930      	cbnz	r0, 800bb6e <__mdiff+0x2e>
 800bb60:	4b3d      	ldr	r3, [pc, #244]	; (800bc58 <__mdiff+0x118>)
 800bb62:	4602      	mov	r2, r0
 800bb64:	f240 2137 	movw	r1, #567	; 0x237
 800bb68:	483c      	ldr	r0, [pc, #240]	; (800bc5c <__mdiff+0x11c>)
 800bb6a:	f001 fc79 	bl	800d460 <__assert_func>
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb78:	bfa4      	itt	ge
 800bb7a:	4653      	movge	r3, sl
 800bb7c:	46a2      	movge	sl, r4
 800bb7e:	4630      	mov	r0, r6
 800bb80:	bfa8      	it	ge
 800bb82:	2500      	movge	r5, #0
 800bb84:	f8da 1004 	ldr.w	r1, [sl, #4]
 800bb88:	bfac      	ite	ge
 800bb8a:	461c      	movge	r4, r3
 800bb8c:	2501      	movlt	r5, #1
 800bb8e:	f7ff fcf3 	bl	800b578 <_Balloc>
 800bb92:	b920      	cbnz	r0, 800bb9e <__mdiff+0x5e>
 800bb94:	4b30      	ldr	r3, [pc, #192]	; (800bc58 <__mdiff+0x118>)
 800bb96:	4602      	mov	r2, r0
 800bb98:	f240 2145 	movw	r1, #581	; 0x245
 800bb9c:	e7e4      	b.n	800bb68 <__mdiff+0x28>
 800bb9e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800bba2:	f104 0914 	add.w	r9, r4, #20
 800bba6:	6926      	ldr	r6, [r4, #16]
 800bba8:	f100 0814 	add.w	r8, r0, #20
 800bbac:	60c5      	str	r5, [r0, #12]
 800bbae:	f10a 0514 	add.w	r5, sl, #20
 800bbb2:	f10a 0210 	add.w	r2, sl, #16
 800bbb6:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbba:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800bbbe:	46c2      	mov	sl, r8
 800bbc0:	f04f 0c00 	mov.w	ip, #0
 800bbc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bbc8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbcc:	fa1f f18b 	uxth.w	r1, fp
 800bbd0:	454e      	cmp	r6, r9
 800bbd2:	4461      	add	r1, ip
 800bbd4:	fa1f fc83 	uxth.w	ip, r3
 800bbd8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bbdc:	eba1 010c 	sub.w	r1, r1, ip
 800bbe0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bbe4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800bbe8:	b289      	uxth	r1, r1
 800bbea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800bbee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800bbf2:	f84a 1b04 	str.w	r1, [sl], #4
 800bbf6:	d8e5      	bhi.n	800bbc4 <__mdiff+0x84>
 800bbf8:	1b33      	subs	r3, r6, r4
 800bbfa:	3415      	adds	r4, #21
 800bbfc:	3b15      	subs	r3, #21
 800bbfe:	f023 0303 	bic.w	r3, r3, #3
 800bc02:	3304      	adds	r3, #4
 800bc04:	42a6      	cmp	r6, r4
 800bc06:	bf38      	it	cc
 800bc08:	2304      	movcc	r3, #4
 800bc0a:	441d      	add	r5, r3
 800bc0c:	4443      	add	r3, r8
 800bc0e:	462c      	mov	r4, r5
 800bc10:	461e      	mov	r6, r3
 800bc12:	4574      	cmp	r4, lr
 800bc14:	d30e      	bcc.n	800bc34 <__mdiff+0xf4>
 800bc16:	f10e 0203 	add.w	r2, lr, #3
 800bc1a:	1b52      	subs	r2, r2, r5
 800bc1c:	3d03      	subs	r5, #3
 800bc1e:	f022 0203 	bic.w	r2, r2, #3
 800bc22:	45ae      	cmp	lr, r5
 800bc24:	bf38      	it	cc
 800bc26:	2200      	movcc	r2, #0
 800bc28:	4413      	add	r3, r2
 800bc2a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc2e:	b18a      	cbz	r2, 800bc54 <__mdiff+0x114>
 800bc30:	6107      	str	r7, [r0, #16]
 800bc32:	e79f      	b.n	800bb74 <__mdiff+0x34>
 800bc34:	f854 8b04 	ldr.w	r8, [r4], #4
 800bc38:	fa1f f288 	uxth.w	r2, r8
 800bc3c:	4462      	add	r2, ip
 800bc3e:	1411      	asrs	r1, r2, #16
 800bc40:	b292      	uxth	r2, r2
 800bc42:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 800bc46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800bc4a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 800bc4e:	f846 2b04 	str.w	r2, [r6], #4
 800bc52:	e7de      	b.n	800bc12 <__mdiff+0xd2>
 800bc54:	3f01      	subs	r7, #1
 800bc56:	e7e8      	b.n	800bc2a <__mdiff+0xea>
 800bc58:	0800f31d 	.word	0x0800f31d
 800bc5c:	0800f32e 	.word	0x0800f32e

0800bc60 <__ulp>:
 800bc60:	b082      	sub	sp, #8
 800bc62:	4b11      	ldr	r3, [pc, #68]	; (800bca8 <__ulp+0x48>)
 800bc64:	ed8d 0b00 	vstr	d0, [sp]
 800bc68:	9a01      	ldr	r2, [sp, #4]
 800bc6a:	4013      	ands	r3, r2
 800bc6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	dc08      	bgt.n	800bc86 <__ulp+0x26>
 800bc74:	425b      	negs	r3, r3
 800bc76:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800bc7a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bc7e:	da04      	bge.n	800bc8a <__ulp+0x2a>
 800bc80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc84:	4113      	asrs	r3, r2
 800bc86:	2200      	movs	r2, #0
 800bc88:	e008      	b.n	800bc9c <__ulp+0x3c>
 800bc8a:	f1a2 0314 	sub.w	r3, r2, #20
 800bc8e:	2b1e      	cmp	r3, #30
 800bc90:	bfd6      	itet	le
 800bc92:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bc96:	2201      	movgt	r2, #1
 800bc98:	40da      	lsrle	r2, r3
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	4610      	mov	r0, r2
 800bca0:	ec41 0b10 	vmov	d0, r0, r1
 800bca4:	b002      	add	sp, #8
 800bca6:	4770      	bx	lr
 800bca8:	7ff00000 	.word	0x7ff00000

0800bcac <__b2d>:
 800bcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb0:	6906      	ldr	r6, [r0, #16]
 800bcb2:	f100 0814 	add.w	r8, r0, #20
 800bcb6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bcba:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bcbe:	1f37      	subs	r7, r6, #4
 800bcc0:	4610      	mov	r0, r2
 800bcc2:	f7ff fd4d 	bl	800b760 <__hi0bits>
 800bcc6:	f1c0 0320 	rsb	r3, r0, #32
 800bcca:	280a      	cmp	r0, #10
 800bccc:	600b      	str	r3, [r1, #0]
 800bcce:	491d      	ldr	r1, [pc, #116]	; (800bd44 <__b2d+0x98>)
 800bcd0:	dc16      	bgt.n	800bd00 <__b2d+0x54>
 800bcd2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bcd6:	45b8      	cmp	r8, r7
 800bcd8:	f100 0015 	add.w	r0, r0, #21
 800bcdc:	fa22 f30c 	lsr.w	r3, r2, ip
 800bce0:	fa02 f000 	lsl.w	r0, r2, r0
 800bce4:	ea43 0501 	orr.w	r5, r3, r1
 800bce8:	bf34      	ite	cc
 800bcea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bcee:	2300      	movcs	r3, #0
 800bcf0:	fa23 f30c 	lsr.w	r3, r3, ip
 800bcf4:	4303      	orrs	r3, r0
 800bcf6:	461c      	mov	r4, r3
 800bcf8:	ec45 4b10 	vmov	d0, r4, r5
 800bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd00:	45b8      	cmp	r8, r7
 800bd02:	bf3a      	itte	cc
 800bd04:	f1a6 0708 	subcc.w	r7, r6, #8
 800bd08:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd0c:	2300      	movcs	r3, #0
 800bd0e:	380b      	subs	r0, #11
 800bd10:	d014      	beq.n	800bd3c <__b2d+0x90>
 800bd12:	f1c0 0120 	rsb	r1, r0, #32
 800bd16:	4082      	lsls	r2, r0
 800bd18:	4547      	cmp	r7, r8
 800bd1a:	fa23 f401 	lsr.w	r4, r3, r1
 800bd1e:	fa03 f300 	lsl.w	r3, r3, r0
 800bd22:	ea42 0204 	orr.w	r2, r2, r4
 800bd26:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bd2a:	bf8c      	ite	hi
 800bd2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bd30:	2200      	movls	r2, #0
 800bd32:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd36:	40ca      	lsrs	r2, r1
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	e7dc      	b.n	800bcf6 <__b2d+0x4a>
 800bd3c:	ea42 0501 	orr.w	r5, r2, r1
 800bd40:	e7d9      	b.n	800bcf6 <__b2d+0x4a>
 800bd42:	bf00      	nop
 800bd44:	3ff00000 	.word	0x3ff00000

0800bd48 <__d2b>:
 800bd48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd4c:	460f      	mov	r7, r1
 800bd4e:	2101      	movs	r1, #1
 800bd50:	4616      	mov	r6, r2
 800bd52:	ec59 8b10 	vmov	r8, r9, d0
 800bd56:	f7ff fc0f 	bl	800b578 <_Balloc>
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	b930      	cbnz	r0, 800bd6c <__d2b+0x24>
 800bd5e:	4602      	mov	r2, r0
 800bd60:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <__d2b+0xac>)
 800bd62:	f240 310f 	movw	r1, #783	; 0x30f
 800bd66:	4824      	ldr	r0, [pc, #144]	; (800bdf8 <__d2b+0xb0>)
 800bd68:	f001 fb7a 	bl	800d460 <__assert_func>
 800bd6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bd70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bd74:	bb2d      	cbnz	r5, 800bdc2 <__d2b+0x7a>
 800bd76:	9301      	str	r3, [sp, #4]
 800bd78:	f1b8 0300 	subs.w	r3, r8, #0
 800bd7c:	d026      	beq.n	800bdcc <__d2b+0x84>
 800bd7e:	4668      	mov	r0, sp
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	f7ff fd0d 	bl	800b7a0 <__lo0bits>
 800bd86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bd8a:	b1e8      	cbz	r0, 800bdc8 <__d2b+0x80>
 800bd8c:	f1c0 0320 	rsb	r3, r0, #32
 800bd90:	fa02 f303 	lsl.w	r3, r2, r3
 800bd94:	40c2      	lsrs	r2, r0
 800bd96:	430b      	orrs	r3, r1
 800bd98:	9201      	str	r2, [sp, #4]
 800bd9a:	6163      	str	r3, [r4, #20]
 800bd9c:	9b01      	ldr	r3, [sp, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	61a3      	str	r3, [r4, #24]
 800bda2:	bf14      	ite	ne
 800bda4:	2202      	movne	r2, #2
 800bda6:	2201      	moveq	r2, #1
 800bda8:	6122      	str	r2, [r4, #16]
 800bdaa:	b1bd      	cbz	r5, 800bddc <__d2b+0x94>
 800bdac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdb0:	4405      	add	r5, r0
 800bdb2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bdb6:	603d      	str	r5, [r7, #0]
 800bdb8:	6030      	str	r0, [r6, #0]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	b003      	add	sp, #12
 800bdbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bdc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdc6:	e7d6      	b.n	800bd76 <__d2b+0x2e>
 800bdc8:	6161      	str	r1, [r4, #20]
 800bdca:	e7e7      	b.n	800bd9c <__d2b+0x54>
 800bdcc:	a801      	add	r0, sp, #4
 800bdce:	f7ff fce7 	bl	800b7a0 <__lo0bits>
 800bdd2:	9b01      	ldr	r3, [sp, #4]
 800bdd4:	3020      	adds	r0, #32
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	6163      	str	r3, [r4, #20]
 800bdda:	e7e5      	b.n	800bda8 <__d2b+0x60>
 800bddc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bde0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bde4:	6038      	str	r0, [r7, #0]
 800bde6:	6918      	ldr	r0, [r3, #16]
 800bde8:	f7ff fcba 	bl	800b760 <__hi0bits>
 800bdec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bdf0:	e7e2      	b.n	800bdb8 <__d2b+0x70>
 800bdf2:	bf00      	nop
 800bdf4:	0800f31d 	.word	0x0800f31d
 800bdf8:	0800f32e 	.word	0x0800f32e

0800bdfc <__ratio>:
 800bdfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	4688      	mov	r8, r1
 800be02:	4681      	mov	r9, r0
 800be04:	4669      	mov	r1, sp
 800be06:	f7ff ff51 	bl	800bcac <__b2d>
 800be0a:	a901      	add	r1, sp, #4
 800be0c:	4640      	mov	r0, r8
 800be0e:	ec55 4b10 	vmov	r4, r5, d0
 800be12:	f7ff ff4b 	bl	800bcac <__b2d>
 800be16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800be1e:	462f      	mov	r7, r5
 800be20:	eba3 0c02 	sub.w	ip, r3, r2
 800be24:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be28:	ec51 0b10 	vmov	r0, r1, d0
 800be2c:	1a9b      	subs	r3, r3, r2
 800be2e:	468b      	mov	fp, r1
 800be30:	4620      	mov	r0, r4
 800be32:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800be36:	2b00      	cmp	r3, #0
 800be38:	bfd5      	itete	le
 800be3a:	460a      	movle	r2, r1
 800be3c:	462a      	movgt	r2, r5
 800be3e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800be42:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800be46:	bfd8      	it	le
 800be48:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800be4c:	ee10 2a10 	vmov	r2, s0
 800be50:	4639      	mov	r1, r7
 800be52:	465b      	mov	r3, fp
 800be54:	f7f4 fcfe 	bl	8000854 <__aeabi_ddiv>
 800be58:	ec41 0b10 	vmov	d0, r0, r1
 800be5c:	b003      	add	sp, #12
 800be5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800be62 <__copybits>:
 800be62:	3901      	subs	r1, #1
 800be64:	f102 0314 	add.w	r3, r2, #20
 800be68:	1149      	asrs	r1, r1, #5
 800be6a:	b570      	push	{r4, r5, r6, lr}
 800be6c:	3101      	adds	r1, #1
 800be6e:	6914      	ldr	r4, [r2, #16]
 800be70:	1f05      	subs	r5, r0, #4
 800be72:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800be76:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	d30c      	bcc.n	800be98 <__copybits+0x36>
 800be7e:	1aa3      	subs	r3, r4, r2
 800be80:	3211      	adds	r2, #17
 800be82:	3b11      	subs	r3, #17
 800be84:	f023 0303 	bic.w	r3, r3, #3
 800be88:	42a2      	cmp	r2, r4
 800be8a:	bf88      	it	hi
 800be8c:	2300      	movhi	r3, #0
 800be8e:	4418      	add	r0, r3
 800be90:	2300      	movs	r3, #0
 800be92:	4288      	cmp	r0, r1
 800be94:	d305      	bcc.n	800bea2 <__copybits+0x40>
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	f853 6b04 	ldr.w	r6, [r3], #4
 800be9c:	f845 6f04 	str.w	r6, [r5, #4]!
 800bea0:	e7eb      	b.n	800be7a <__copybits+0x18>
 800bea2:	f840 3b04 	str.w	r3, [r0], #4
 800bea6:	e7f4      	b.n	800be92 <__copybits+0x30>

0800bea8 <__any_on>:
 800bea8:	f100 0214 	add.w	r2, r0, #20
 800beac:	114b      	asrs	r3, r1, #5
 800beae:	6900      	ldr	r0, [r0, #16]
 800beb0:	4298      	cmp	r0, r3
 800beb2:	b510      	push	{r4, lr}
 800beb4:	db11      	blt.n	800beda <__any_on+0x32>
 800beb6:	dd0a      	ble.n	800bece <__any_on+0x26>
 800beb8:	f011 011f 	ands.w	r1, r1, #31
 800bebc:	d007      	beq.n	800bece <__any_on+0x26>
 800bebe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bec2:	fa24 f001 	lsr.w	r0, r4, r1
 800bec6:	fa00 f101 	lsl.w	r1, r0, r1
 800beca:	428c      	cmp	r4, r1
 800becc:	d10b      	bne.n	800bee6 <__any_on+0x3e>
 800bece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d803      	bhi.n	800bede <__any_on+0x36>
 800bed6:	2000      	movs	r0, #0
 800bed8:	bd10      	pop	{r4, pc}
 800beda:	4603      	mov	r3, r0
 800bedc:	e7f7      	b.n	800bece <__any_on+0x26>
 800bede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bee2:	2900      	cmp	r1, #0
 800bee4:	d0f5      	beq.n	800bed2 <__any_on+0x2a>
 800bee6:	2001      	movs	r0, #1
 800bee8:	e7f6      	b.n	800bed8 <__any_on+0x30>

0800beea <sulp>:
 800beea:	b570      	push	{r4, r5, r6, lr}
 800beec:	4604      	mov	r4, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	4616      	mov	r6, r2
 800bef2:	ec45 4b10 	vmov	d0, r4, r5
 800bef6:	f7ff feb3 	bl	800bc60 <__ulp>
 800befa:	ec51 0b10 	vmov	r0, r1, d0
 800befe:	b17e      	cbz	r6, 800bf20 <sulp+0x36>
 800bf00:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bf04:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dd09      	ble.n	800bf20 <sulp+0x36>
 800bf0c:	051b      	lsls	r3, r3, #20
 800bf0e:	2400      	movs	r4, #0
 800bf10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bf14:	4622      	mov	r2, r4
 800bf16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bf1a:	462b      	mov	r3, r5
 800bf1c:	f7f4 fb70 	bl	8000600 <__aeabi_dmul>
 800bf20:	bd70      	pop	{r4, r5, r6, pc}
 800bf22:	0000      	movs	r0, r0
 800bf24:	0000      	movs	r0, r0
	...

0800bf28 <_strtod_l>:
 800bf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2c:	ed2d 8b02 	vpush	{d8}
 800bf30:	b09b      	sub	sp, #108	; 0x6c
 800bf32:	4604      	mov	r4, r0
 800bf34:	460d      	mov	r5, r1
 800bf36:	f04f 0800 	mov.w	r8, #0
 800bf3a:	9213      	str	r2, [sp, #76]	; 0x4c
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	f04f 0900 	mov.w	r9, #0
 800bf42:	9216      	str	r2, [sp, #88]	; 0x58
 800bf44:	460a      	mov	r2, r1
 800bf46:	9215      	str	r2, [sp, #84]	; 0x54
 800bf48:	7811      	ldrb	r1, [r2, #0]
 800bf4a:	292b      	cmp	r1, #43	; 0x2b
 800bf4c:	d04c      	beq.n	800bfe8 <_strtod_l+0xc0>
 800bf4e:	d83a      	bhi.n	800bfc6 <_strtod_l+0x9e>
 800bf50:	290d      	cmp	r1, #13
 800bf52:	d834      	bhi.n	800bfbe <_strtod_l+0x96>
 800bf54:	2908      	cmp	r1, #8
 800bf56:	d834      	bhi.n	800bfc2 <_strtod_l+0x9a>
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	d03d      	beq.n	800bfd8 <_strtod_l+0xb0>
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	920a      	str	r2, [sp, #40]	; 0x28
 800bf60:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800bf62:	7832      	ldrb	r2, [r6, #0]
 800bf64:	2a30      	cmp	r2, #48	; 0x30
 800bf66:	f040 80b4 	bne.w	800c0d2 <_strtod_l+0x1aa>
 800bf6a:	7872      	ldrb	r2, [r6, #1]
 800bf6c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bf70:	2a58      	cmp	r2, #88	; 0x58
 800bf72:	d170      	bne.n	800c056 <_strtod_l+0x12e>
 800bf74:	9302      	str	r3, [sp, #8]
 800bf76:	a915      	add	r1, sp, #84	; 0x54
 800bf78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf7a:	4620      	mov	r0, r4
 800bf7c:	4a8e      	ldr	r2, [pc, #568]	; (800c1b8 <_strtod_l+0x290>)
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	ab16      	add	r3, sp, #88	; 0x58
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	ab17      	add	r3, sp, #92	; 0x5c
 800bf86:	f001 fb05 	bl	800d594 <__gethex>
 800bf8a:	f010 070f 	ands.w	r7, r0, #15
 800bf8e:	4605      	mov	r5, r0
 800bf90:	d005      	beq.n	800bf9e <_strtod_l+0x76>
 800bf92:	2f06      	cmp	r7, #6
 800bf94:	d12a      	bne.n	800bfec <_strtod_l+0xc4>
 800bf96:	3601      	adds	r6, #1
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9615      	str	r6, [sp, #84]	; 0x54
 800bf9c:	930a      	str	r3, [sp, #40]	; 0x28
 800bf9e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f040 8581 	bne.w	800caa8 <_strtod_l+0xb80>
 800bfa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa8:	b1db      	cbz	r3, 800bfe2 <_strtod_l+0xba>
 800bfaa:	4642      	mov	r2, r8
 800bfac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bfb0:	ec43 2b10 	vmov	d0, r2, r3
 800bfb4:	b01b      	add	sp, #108	; 0x6c
 800bfb6:	ecbd 8b02 	vpop	{d8}
 800bfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfbe:	2920      	cmp	r1, #32
 800bfc0:	d1cc      	bne.n	800bf5c <_strtod_l+0x34>
 800bfc2:	3201      	adds	r2, #1
 800bfc4:	e7bf      	b.n	800bf46 <_strtod_l+0x1e>
 800bfc6:	292d      	cmp	r1, #45	; 0x2d
 800bfc8:	d1c8      	bne.n	800bf5c <_strtod_l+0x34>
 800bfca:	2101      	movs	r1, #1
 800bfcc:	910a      	str	r1, [sp, #40]	; 0x28
 800bfce:	1c51      	adds	r1, r2, #1
 800bfd0:	9115      	str	r1, [sp, #84]	; 0x54
 800bfd2:	7852      	ldrb	r2, [r2, #1]
 800bfd4:	2a00      	cmp	r2, #0
 800bfd6:	d1c3      	bne.n	800bf60 <_strtod_l+0x38>
 800bfd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bfda:	9515      	str	r5, [sp, #84]	; 0x54
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f040 8561 	bne.w	800caa4 <_strtod_l+0xb7c>
 800bfe2:	4642      	mov	r2, r8
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	e7e3      	b.n	800bfb0 <_strtod_l+0x88>
 800bfe8:	2100      	movs	r1, #0
 800bfea:	e7ef      	b.n	800bfcc <_strtod_l+0xa4>
 800bfec:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bfee:	b13a      	cbz	r2, 800c000 <_strtod_l+0xd8>
 800bff0:	2135      	movs	r1, #53	; 0x35
 800bff2:	a818      	add	r0, sp, #96	; 0x60
 800bff4:	f7ff ff35 	bl	800be62 <__copybits>
 800bff8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7ff fafc 	bl	800b5f8 <_Bfree>
 800c000:	3f01      	subs	r7, #1
 800c002:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c004:	2f04      	cmp	r7, #4
 800c006:	d806      	bhi.n	800c016 <_strtod_l+0xee>
 800c008:	e8df f007 	tbb	[pc, r7]
 800c00c:	201d0314 	.word	0x201d0314
 800c010:	14          	.byte	0x14
 800c011:	00          	.byte	0x00
 800c012:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800c016:	05e9      	lsls	r1, r5, #23
 800c018:	bf48      	it	mi
 800c01a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c01e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c022:	0d1b      	lsrs	r3, r3, #20
 800c024:	051b      	lsls	r3, r3, #20
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1b9      	bne.n	800bf9e <_strtod_l+0x76>
 800c02a:	f7fe fae3 	bl	800a5f4 <__errno>
 800c02e:	2322      	movs	r3, #34	; 0x22
 800c030:	6003      	str	r3, [r0, #0]
 800c032:	e7b4      	b.n	800bf9e <_strtod_l+0x76>
 800c034:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800c038:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c03c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c040:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c044:	e7e7      	b.n	800c016 <_strtod_l+0xee>
 800c046:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800c1c0 <_strtod_l+0x298>
 800c04a:	e7e4      	b.n	800c016 <_strtod_l+0xee>
 800c04c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c050:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c054:	e7df      	b.n	800c016 <_strtod_l+0xee>
 800c056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c058:	1c5a      	adds	r2, r3, #1
 800c05a:	9215      	str	r2, [sp, #84]	; 0x54
 800c05c:	785b      	ldrb	r3, [r3, #1]
 800c05e:	2b30      	cmp	r3, #48	; 0x30
 800c060:	d0f9      	beq.n	800c056 <_strtod_l+0x12e>
 800c062:	2b00      	cmp	r3, #0
 800c064:	d09b      	beq.n	800bf9e <_strtod_l+0x76>
 800c066:	2301      	movs	r3, #1
 800c068:	f04f 0a00 	mov.w	sl, #0
 800c06c:	9304      	str	r3, [sp, #16]
 800c06e:	220a      	movs	r2, #10
 800c070:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c072:	46d3      	mov	fp, sl
 800c074:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800c078:	930b      	str	r3, [sp, #44]	; 0x2c
 800c07a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800c07c:	7806      	ldrb	r6, [r0, #0]
 800c07e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c082:	b2d9      	uxtb	r1, r3
 800c084:	2909      	cmp	r1, #9
 800c086:	d926      	bls.n	800c0d6 <_strtod_l+0x1ae>
 800c088:	2201      	movs	r2, #1
 800c08a:	494c      	ldr	r1, [pc, #304]	; (800c1bc <_strtod_l+0x294>)
 800c08c:	f001 f98d 	bl	800d3aa <strncmp>
 800c090:	2800      	cmp	r0, #0
 800c092:	d030      	beq.n	800c0f6 <_strtod_l+0x1ce>
 800c094:	2000      	movs	r0, #0
 800c096:	4632      	mov	r2, r6
 800c098:	465e      	mov	r6, fp
 800c09a:	4603      	mov	r3, r0
 800c09c:	9005      	str	r0, [sp, #20]
 800c09e:	2a65      	cmp	r2, #101	; 0x65
 800c0a0:	d001      	beq.n	800c0a6 <_strtod_l+0x17e>
 800c0a2:	2a45      	cmp	r2, #69	; 0x45
 800c0a4:	d113      	bne.n	800c0ce <_strtod_l+0x1a6>
 800c0a6:	b91e      	cbnz	r6, 800c0b0 <_strtod_l+0x188>
 800c0a8:	9a04      	ldr	r2, [sp, #16]
 800c0aa:	4302      	orrs	r2, r0
 800c0ac:	d094      	beq.n	800bfd8 <_strtod_l+0xb0>
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800c0b2:	1c6a      	adds	r2, r5, #1
 800c0b4:	9215      	str	r2, [sp, #84]	; 0x54
 800c0b6:	786a      	ldrb	r2, [r5, #1]
 800c0b8:	2a2b      	cmp	r2, #43	; 0x2b
 800c0ba:	d073      	beq.n	800c1a4 <_strtod_l+0x27c>
 800c0bc:	2a2d      	cmp	r2, #45	; 0x2d
 800c0be:	d077      	beq.n	800c1b0 <_strtod_l+0x288>
 800c0c0:	f04f 0c00 	mov.w	ip, #0
 800c0c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c0c8:	2909      	cmp	r1, #9
 800c0ca:	d97f      	bls.n	800c1cc <_strtod_l+0x2a4>
 800c0cc:	9515      	str	r5, [sp, #84]	; 0x54
 800c0ce:	2700      	movs	r7, #0
 800c0d0:	e09e      	b.n	800c210 <_strtod_l+0x2e8>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e7c8      	b.n	800c068 <_strtod_l+0x140>
 800c0d6:	f1bb 0f08 	cmp.w	fp, #8
 800c0da:	f100 0001 	add.w	r0, r0, #1
 800c0de:	f10b 0b01 	add.w	fp, fp, #1
 800c0e2:	bfd4      	ite	le
 800c0e4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c0e6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800c0ea:	9015      	str	r0, [sp, #84]	; 0x54
 800c0ec:	bfdc      	itt	le
 800c0ee:	fb02 3301 	mlale	r3, r2, r1, r3
 800c0f2:	9309      	strle	r3, [sp, #36]	; 0x24
 800c0f4:	e7c1      	b.n	800c07a <_strtod_l+0x152>
 800c0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c0f8:	1c5a      	adds	r2, r3, #1
 800c0fa:	9215      	str	r2, [sp, #84]	; 0x54
 800c0fc:	785a      	ldrb	r2, [r3, #1]
 800c0fe:	f1bb 0f00 	cmp.w	fp, #0
 800c102:	d036      	beq.n	800c172 <_strtod_l+0x24a>
 800c104:	465e      	mov	r6, fp
 800c106:	9005      	str	r0, [sp, #20]
 800c108:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c10c:	2b09      	cmp	r3, #9
 800c10e:	d912      	bls.n	800c136 <_strtod_l+0x20e>
 800c110:	2301      	movs	r3, #1
 800c112:	e7c4      	b.n	800c09e <_strtod_l+0x176>
 800c114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c116:	3001      	adds	r0, #1
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	9215      	str	r2, [sp, #84]	; 0x54
 800c11c:	785a      	ldrb	r2, [r3, #1]
 800c11e:	2a30      	cmp	r2, #48	; 0x30
 800c120:	d0f8      	beq.n	800c114 <_strtod_l+0x1ec>
 800c122:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c126:	2b08      	cmp	r3, #8
 800c128:	f200 84c3 	bhi.w	800cab2 <_strtod_l+0xb8a>
 800c12c:	9005      	str	r0, [sp, #20]
 800c12e:	2000      	movs	r0, #0
 800c130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c132:	4606      	mov	r6, r0
 800c134:	930b      	str	r3, [sp, #44]	; 0x2c
 800c136:	3a30      	subs	r2, #48	; 0x30
 800c138:	f100 0301 	add.w	r3, r0, #1
 800c13c:	d013      	beq.n	800c166 <_strtod_l+0x23e>
 800c13e:	9905      	ldr	r1, [sp, #20]
 800c140:	eb00 0c06 	add.w	ip, r0, r6
 800c144:	4419      	add	r1, r3
 800c146:	4633      	mov	r3, r6
 800c148:	9105      	str	r1, [sp, #20]
 800c14a:	210a      	movs	r1, #10
 800c14c:	4563      	cmp	r3, ip
 800c14e:	d112      	bne.n	800c176 <_strtod_l+0x24e>
 800c150:	1833      	adds	r3, r6, r0
 800c152:	3601      	adds	r6, #1
 800c154:	2b08      	cmp	r3, #8
 800c156:	4406      	add	r6, r0
 800c158:	dc1a      	bgt.n	800c190 <_strtod_l+0x268>
 800c15a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c15c:	230a      	movs	r3, #10
 800c15e:	fb03 2301 	mla	r3, r3, r1, r2
 800c162:	9309      	str	r3, [sp, #36]	; 0x24
 800c164:	2300      	movs	r3, #0
 800c166:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c168:	4618      	mov	r0, r3
 800c16a:	1c51      	adds	r1, r2, #1
 800c16c:	9115      	str	r1, [sp, #84]	; 0x54
 800c16e:	7852      	ldrb	r2, [r2, #1]
 800c170:	e7ca      	b.n	800c108 <_strtod_l+0x1e0>
 800c172:	4658      	mov	r0, fp
 800c174:	e7d3      	b.n	800c11e <_strtod_l+0x1f6>
 800c176:	2b08      	cmp	r3, #8
 800c178:	f103 0301 	add.w	r3, r3, #1
 800c17c:	dc03      	bgt.n	800c186 <_strtod_l+0x25e>
 800c17e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c180:	434f      	muls	r7, r1
 800c182:	9709      	str	r7, [sp, #36]	; 0x24
 800c184:	e7e2      	b.n	800c14c <_strtod_l+0x224>
 800c186:	2b10      	cmp	r3, #16
 800c188:	bfd8      	it	le
 800c18a:	fb01 fa0a 	mulle.w	sl, r1, sl
 800c18e:	e7dd      	b.n	800c14c <_strtod_l+0x224>
 800c190:	2e10      	cmp	r6, #16
 800c192:	bfdc      	itt	le
 800c194:	230a      	movle	r3, #10
 800c196:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800c19a:	e7e3      	b.n	800c164 <_strtod_l+0x23c>
 800c19c:	2300      	movs	r3, #0
 800c19e:	9305      	str	r3, [sp, #20]
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e781      	b.n	800c0a8 <_strtod_l+0x180>
 800c1a4:	f04f 0c00 	mov.w	ip, #0
 800c1a8:	1caa      	adds	r2, r5, #2
 800c1aa:	9215      	str	r2, [sp, #84]	; 0x54
 800c1ac:	78aa      	ldrb	r2, [r5, #2]
 800c1ae:	e789      	b.n	800c0c4 <_strtod_l+0x19c>
 800c1b0:	f04f 0c01 	mov.w	ip, #1
 800c1b4:	e7f8      	b.n	800c1a8 <_strtod_l+0x280>
 800c1b6:	bf00      	nop
 800c1b8:	0800f488 	.word	0x0800f488
 800c1bc:	0800f484 	.word	0x0800f484
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1c6:	1c51      	adds	r1, r2, #1
 800c1c8:	9115      	str	r1, [sp, #84]	; 0x54
 800c1ca:	7852      	ldrb	r2, [r2, #1]
 800c1cc:	2a30      	cmp	r2, #48	; 0x30
 800c1ce:	d0f9      	beq.n	800c1c4 <_strtod_l+0x29c>
 800c1d0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c1d4:	2908      	cmp	r1, #8
 800c1d6:	f63f af7a 	bhi.w	800c0ce <_strtod_l+0x1a6>
 800c1da:	3a30      	subs	r2, #48	; 0x30
 800c1dc:	9208      	str	r2, [sp, #32]
 800c1de:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1e0:	920c      	str	r2, [sp, #48]	; 0x30
 800c1e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c1e4:	1c57      	adds	r7, r2, #1
 800c1e6:	9715      	str	r7, [sp, #84]	; 0x54
 800c1e8:	7852      	ldrb	r2, [r2, #1]
 800c1ea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c1ee:	f1be 0f09 	cmp.w	lr, #9
 800c1f2:	d938      	bls.n	800c266 <_strtod_l+0x33e>
 800c1f4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c1f6:	1a7f      	subs	r7, r7, r1
 800c1f8:	2f08      	cmp	r7, #8
 800c1fa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c1fe:	dc03      	bgt.n	800c208 <_strtod_l+0x2e0>
 800c200:	9908      	ldr	r1, [sp, #32]
 800c202:	428f      	cmp	r7, r1
 800c204:	bfa8      	it	ge
 800c206:	460f      	movge	r7, r1
 800c208:	f1bc 0f00 	cmp.w	ip, #0
 800c20c:	d000      	beq.n	800c210 <_strtod_l+0x2e8>
 800c20e:	427f      	negs	r7, r7
 800c210:	2e00      	cmp	r6, #0
 800c212:	d14f      	bne.n	800c2b4 <_strtod_l+0x38c>
 800c214:	9904      	ldr	r1, [sp, #16]
 800c216:	4301      	orrs	r1, r0
 800c218:	f47f aec1 	bne.w	800bf9e <_strtod_l+0x76>
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f47f aedb 	bne.w	800bfd8 <_strtod_l+0xb0>
 800c222:	2a69      	cmp	r2, #105	; 0x69
 800c224:	d029      	beq.n	800c27a <_strtod_l+0x352>
 800c226:	dc26      	bgt.n	800c276 <_strtod_l+0x34e>
 800c228:	2a49      	cmp	r2, #73	; 0x49
 800c22a:	d026      	beq.n	800c27a <_strtod_l+0x352>
 800c22c:	2a4e      	cmp	r2, #78	; 0x4e
 800c22e:	f47f aed3 	bne.w	800bfd8 <_strtod_l+0xb0>
 800c232:	499c      	ldr	r1, [pc, #624]	; (800c4a4 <_strtod_l+0x57c>)
 800c234:	a815      	add	r0, sp, #84	; 0x54
 800c236:	f001 fbed 	bl	800da14 <__match>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	f43f aecc 	beq.w	800bfd8 <_strtod_l+0xb0>
 800c240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b28      	cmp	r3, #40	; 0x28
 800c246:	d12f      	bne.n	800c2a8 <_strtod_l+0x380>
 800c248:	aa18      	add	r2, sp, #96	; 0x60
 800c24a:	4997      	ldr	r1, [pc, #604]	; (800c4a8 <_strtod_l+0x580>)
 800c24c:	a815      	add	r0, sp, #84	; 0x54
 800c24e:	f001 fbf5 	bl	800da3c <__hexnan>
 800c252:	2805      	cmp	r0, #5
 800c254:	d128      	bne.n	800c2a8 <_strtod_l+0x380>
 800c256:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c258:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c25c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c260:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c264:	e69b      	b.n	800bf9e <_strtod_l+0x76>
 800c266:	9f08      	ldr	r7, [sp, #32]
 800c268:	210a      	movs	r1, #10
 800c26a:	fb01 2107 	mla	r1, r1, r7, r2
 800c26e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800c272:	9208      	str	r2, [sp, #32]
 800c274:	e7b5      	b.n	800c1e2 <_strtod_l+0x2ba>
 800c276:	2a6e      	cmp	r2, #110	; 0x6e
 800c278:	e7d9      	b.n	800c22e <_strtod_l+0x306>
 800c27a:	498c      	ldr	r1, [pc, #560]	; (800c4ac <_strtod_l+0x584>)
 800c27c:	a815      	add	r0, sp, #84	; 0x54
 800c27e:	f001 fbc9 	bl	800da14 <__match>
 800c282:	2800      	cmp	r0, #0
 800c284:	f43f aea8 	beq.w	800bfd8 <_strtod_l+0xb0>
 800c288:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c28a:	a815      	add	r0, sp, #84	; 0x54
 800c28c:	4988      	ldr	r1, [pc, #544]	; (800c4b0 <_strtod_l+0x588>)
 800c28e:	3b01      	subs	r3, #1
 800c290:	9315      	str	r3, [sp, #84]	; 0x54
 800c292:	f001 fbbf 	bl	800da14 <__match>
 800c296:	b910      	cbnz	r0, 800c29e <_strtod_l+0x376>
 800c298:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c29a:	3301      	adds	r3, #1
 800c29c:	9315      	str	r3, [sp, #84]	; 0x54
 800c29e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800c4c0 <_strtod_l+0x598>
 800c2a2:	f04f 0800 	mov.w	r8, #0
 800c2a6:	e67a      	b.n	800bf9e <_strtod_l+0x76>
 800c2a8:	4882      	ldr	r0, [pc, #520]	; (800c4b4 <_strtod_l+0x58c>)
 800c2aa:	f001 f8d1 	bl	800d450 <nan>
 800c2ae:	ec59 8b10 	vmov	r8, r9, d0
 800c2b2:	e674      	b.n	800bf9e <_strtod_l+0x76>
 800c2b4:	9b05      	ldr	r3, [sp, #20]
 800c2b6:	f1bb 0f00 	cmp.w	fp, #0
 800c2ba:	bf08      	it	eq
 800c2bc:	46b3      	moveq	fp, r6
 800c2be:	2e10      	cmp	r6, #16
 800c2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2c2:	eba7 0303 	sub.w	r3, r7, r3
 800c2c6:	4635      	mov	r5, r6
 800c2c8:	bfa8      	it	ge
 800c2ca:	2510      	movge	r5, #16
 800c2cc:	9308      	str	r3, [sp, #32]
 800c2ce:	f7f4 f91d 	bl	800050c <__aeabi_ui2d>
 800c2d2:	2e09      	cmp	r6, #9
 800c2d4:	4680      	mov	r8, r0
 800c2d6:	4689      	mov	r9, r1
 800c2d8:	dd13      	ble.n	800c302 <_strtod_l+0x3da>
 800c2da:	4b77      	ldr	r3, [pc, #476]	; (800c4b8 <_strtod_l+0x590>)
 800c2dc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c2e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c2e4:	f7f4 f98c 	bl	8000600 <__aeabi_dmul>
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	4689      	mov	r9, r1
 800c2ec:	4650      	mov	r0, sl
 800c2ee:	f7f4 f90d 	bl	800050c <__aeabi_ui2d>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	f7f3 ffcb 	bl	8000294 <__adddf3>
 800c2fe:	4680      	mov	r8, r0
 800c300:	4689      	mov	r9, r1
 800c302:	2e0f      	cmp	r6, #15
 800c304:	dc38      	bgt.n	800c378 <_strtod_l+0x450>
 800c306:	9b08      	ldr	r3, [sp, #32]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	f43f ae48 	beq.w	800bf9e <_strtod_l+0x76>
 800c30e:	dd24      	ble.n	800c35a <_strtod_l+0x432>
 800c310:	2b16      	cmp	r3, #22
 800c312:	dc0b      	bgt.n	800c32c <_strtod_l+0x404>
 800c314:	4968      	ldr	r1, [pc, #416]	; (800c4b8 <_strtod_l+0x590>)
 800c316:	4642      	mov	r2, r8
 800c318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c31c:	464b      	mov	r3, r9
 800c31e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c322:	f7f4 f96d 	bl	8000600 <__aeabi_dmul>
 800c326:	4680      	mov	r8, r0
 800c328:	4689      	mov	r9, r1
 800c32a:	e638      	b.n	800bf9e <_strtod_l+0x76>
 800c32c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800c330:	9a08      	ldr	r2, [sp, #32]
 800c332:	4293      	cmp	r3, r2
 800c334:	db20      	blt.n	800c378 <_strtod_l+0x450>
 800c336:	f1c6 060f 	rsb	r6, r6, #15
 800c33a:	4c5f      	ldr	r4, [pc, #380]	; (800c4b8 <_strtod_l+0x590>)
 800c33c:	4642      	mov	r2, r8
 800c33e:	464b      	mov	r3, r9
 800c340:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800c344:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c348:	f7f4 f95a 	bl	8000600 <__aeabi_dmul>
 800c34c:	9b08      	ldr	r3, [sp, #32]
 800c34e:	1b9e      	subs	r6, r3, r6
 800c350:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800c354:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c358:	e7e3      	b.n	800c322 <_strtod_l+0x3fa>
 800c35a:	9b08      	ldr	r3, [sp, #32]
 800c35c:	3316      	adds	r3, #22
 800c35e:	db0b      	blt.n	800c378 <_strtod_l+0x450>
 800c360:	9b05      	ldr	r3, [sp, #20]
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	1bdf      	subs	r7, r3, r7
 800c368:	4b53      	ldr	r3, [pc, #332]	; (800c4b8 <_strtod_l+0x590>)
 800c36a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c36e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c372:	f7f4 fa6f 	bl	8000854 <__aeabi_ddiv>
 800c376:	e7d6      	b.n	800c326 <_strtod_l+0x3fe>
 800c378:	1b75      	subs	r5, r6, r5
 800c37a:	9b08      	ldr	r3, [sp, #32]
 800c37c:	441d      	add	r5, r3
 800c37e:	2d00      	cmp	r5, #0
 800c380:	dd70      	ble.n	800c464 <_strtod_l+0x53c>
 800c382:	f015 030f 	ands.w	r3, r5, #15
 800c386:	d00a      	beq.n	800c39e <_strtod_l+0x476>
 800c388:	494b      	ldr	r1, [pc, #300]	; (800c4b8 <_strtod_l+0x590>)
 800c38a:	4642      	mov	r2, r8
 800c38c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c390:	464b      	mov	r3, r9
 800c392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c396:	f7f4 f933 	bl	8000600 <__aeabi_dmul>
 800c39a:	4680      	mov	r8, r0
 800c39c:	4689      	mov	r9, r1
 800c39e:	f035 050f 	bics.w	r5, r5, #15
 800c3a2:	d04d      	beq.n	800c440 <_strtod_l+0x518>
 800c3a4:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800c3a8:	dd22      	ble.n	800c3f0 <_strtod_l+0x4c8>
 800c3aa:	2500      	movs	r5, #0
 800c3ac:	46ab      	mov	fp, r5
 800c3ae:	9509      	str	r5, [sp, #36]	; 0x24
 800c3b0:	9505      	str	r5, [sp, #20]
 800c3b2:	2322      	movs	r3, #34	; 0x22
 800c3b4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c4c0 <_strtod_l+0x598>
 800c3b8:	f04f 0800 	mov.w	r8, #0
 800c3bc:	6023      	str	r3, [r4, #0]
 800c3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f43f adec 	beq.w	800bf9e <_strtod_l+0x76>
 800c3c6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f7ff f915 	bl	800b5f8 <_Bfree>
 800c3ce:	9905      	ldr	r1, [sp, #20]
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f7ff f911 	bl	800b5f8 <_Bfree>
 800c3d6:	4659      	mov	r1, fp
 800c3d8:	4620      	mov	r0, r4
 800c3da:	f7ff f90d 	bl	800b5f8 <_Bfree>
 800c3de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f7ff f909 	bl	800b5f8 <_Bfree>
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	f7ff f905 	bl	800b5f8 <_Bfree>
 800c3ee:	e5d6      	b.n	800bf9e <_strtod_l+0x76>
 800c3f0:	4b32      	ldr	r3, [pc, #200]	; (800c4bc <_strtod_l+0x594>)
 800c3f2:	112d      	asrs	r5, r5, #4
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	4649      	mov	r1, r9
 800c3f8:	9304      	str	r3, [sp, #16]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	469a      	mov	sl, r3
 800c3fe:	2d01      	cmp	r5, #1
 800c400:	dc21      	bgt.n	800c446 <_strtod_l+0x51e>
 800c402:	b10b      	cbz	r3, 800c408 <_strtod_l+0x4e0>
 800c404:	4680      	mov	r8, r0
 800c406:	4689      	mov	r9, r1
 800c408:	492c      	ldr	r1, [pc, #176]	; (800c4bc <_strtod_l+0x594>)
 800c40a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c40e:	4642      	mov	r2, r8
 800c410:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c414:	464b      	mov	r3, r9
 800c416:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c41a:	f7f4 f8f1 	bl	8000600 <__aeabi_dmul>
 800c41e:	4b28      	ldr	r3, [pc, #160]	; (800c4c0 <_strtod_l+0x598>)
 800c420:	460a      	mov	r2, r1
 800c422:	4680      	mov	r8, r0
 800c424:	400b      	ands	r3, r1
 800c426:	4927      	ldr	r1, [pc, #156]	; (800c4c4 <_strtod_l+0x59c>)
 800c428:	428b      	cmp	r3, r1
 800c42a:	d8be      	bhi.n	800c3aa <_strtod_l+0x482>
 800c42c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c430:	428b      	cmp	r3, r1
 800c432:	bf86      	itte	hi
 800c434:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800c4c8 <_strtod_l+0x5a0>
 800c438:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 800c43c:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800c440:	2300      	movs	r3, #0
 800c442:	9304      	str	r3, [sp, #16]
 800c444:	e07c      	b.n	800c540 <_strtod_l+0x618>
 800c446:	07ea      	lsls	r2, r5, #31
 800c448:	d505      	bpl.n	800c456 <_strtod_l+0x52e>
 800c44a:	9b04      	ldr	r3, [sp, #16]
 800c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c450:	f7f4 f8d6 	bl	8000600 <__aeabi_dmul>
 800c454:	2301      	movs	r3, #1
 800c456:	9a04      	ldr	r2, [sp, #16]
 800c458:	f10a 0a01 	add.w	sl, sl, #1
 800c45c:	106d      	asrs	r5, r5, #1
 800c45e:	3208      	adds	r2, #8
 800c460:	9204      	str	r2, [sp, #16]
 800c462:	e7cc      	b.n	800c3fe <_strtod_l+0x4d6>
 800c464:	d0ec      	beq.n	800c440 <_strtod_l+0x518>
 800c466:	426d      	negs	r5, r5
 800c468:	f015 020f 	ands.w	r2, r5, #15
 800c46c:	d00a      	beq.n	800c484 <_strtod_l+0x55c>
 800c46e:	4b12      	ldr	r3, [pc, #72]	; (800c4b8 <_strtod_l+0x590>)
 800c470:	4640      	mov	r0, r8
 800c472:	4649      	mov	r1, r9
 800c474:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47c:	f7f4 f9ea 	bl	8000854 <__aeabi_ddiv>
 800c480:	4680      	mov	r8, r0
 800c482:	4689      	mov	r9, r1
 800c484:	112d      	asrs	r5, r5, #4
 800c486:	d0db      	beq.n	800c440 <_strtod_l+0x518>
 800c488:	2d1f      	cmp	r5, #31
 800c48a:	dd1f      	ble.n	800c4cc <_strtod_l+0x5a4>
 800c48c:	2500      	movs	r5, #0
 800c48e:	46ab      	mov	fp, r5
 800c490:	9509      	str	r5, [sp, #36]	; 0x24
 800c492:	9505      	str	r5, [sp, #20]
 800c494:	2322      	movs	r3, #34	; 0x22
 800c496:	f04f 0800 	mov.w	r8, #0
 800c49a:	f04f 0900 	mov.w	r9, #0
 800c49e:	6023      	str	r3, [r4, #0]
 800c4a0:	e78d      	b.n	800c3be <_strtod_l+0x496>
 800c4a2:	bf00      	nop
 800c4a4:	0800f275 	.word	0x0800f275
 800c4a8:	0800f49c 	.word	0x0800f49c
 800c4ac:	0800f26d 	.word	0x0800f26d
 800c4b0:	0800f2a4 	.word	0x0800f2a4
 800c4b4:	0800f62d 	.word	0x0800f62d
 800c4b8:	0800f3b0 	.word	0x0800f3b0
 800c4bc:	0800f388 	.word	0x0800f388
 800c4c0:	7ff00000 	.word	0x7ff00000
 800c4c4:	7ca00000 	.word	0x7ca00000
 800c4c8:	7fefffff 	.word	0x7fefffff
 800c4cc:	f015 0310 	ands.w	r3, r5, #16
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	4649      	mov	r1, r9
 800c4d4:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c878 <_strtod_l+0x950>
 800c4d8:	bf18      	it	ne
 800c4da:	236a      	movne	r3, #106	; 0x6a
 800c4dc:	9304      	str	r3, [sp, #16]
 800c4de:	2300      	movs	r3, #0
 800c4e0:	07ea      	lsls	r2, r5, #31
 800c4e2:	d504      	bpl.n	800c4ee <_strtod_l+0x5c6>
 800c4e4:	e9da 2300 	ldrd	r2, r3, [sl]
 800c4e8:	f7f4 f88a 	bl	8000600 <__aeabi_dmul>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	106d      	asrs	r5, r5, #1
 800c4f0:	f10a 0a08 	add.w	sl, sl, #8
 800c4f4:	d1f4      	bne.n	800c4e0 <_strtod_l+0x5b8>
 800c4f6:	b10b      	cbz	r3, 800c4fc <_strtod_l+0x5d4>
 800c4f8:	4680      	mov	r8, r0
 800c4fa:	4689      	mov	r9, r1
 800c4fc:	9b04      	ldr	r3, [sp, #16]
 800c4fe:	b1bb      	cbz	r3, 800c530 <_strtod_l+0x608>
 800c500:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800c504:	4649      	mov	r1, r9
 800c506:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	dd10      	ble.n	800c530 <_strtod_l+0x608>
 800c50e:	2b1f      	cmp	r3, #31
 800c510:	f340 811e 	ble.w	800c750 <_strtod_l+0x828>
 800c514:	2b34      	cmp	r3, #52	; 0x34
 800c516:	f04f 0800 	mov.w	r8, #0
 800c51a:	bfdb      	ittet	le
 800c51c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800c520:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c524:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c528:	4093      	lslle	r3, r2
 800c52a:	bfd8      	it	le
 800c52c:	ea03 0901 	andle.w	r9, r3, r1
 800c530:	2200      	movs	r2, #0
 800c532:	2300      	movs	r3, #0
 800c534:	4640      	mov	r0, r8
 800c536:	4649      	mov	r1, r9
 800c538:	f7f4 faca 	bl	8000ad0 <__aeabi_dcmpeq>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d1a5      	bne.n	800c48c <_strtod_l+0x564>
 800c540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c542:	465a      	mov	r2, fp
 800c544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c546:	4620      	mov	r0, r4
 800c548:	9300      	str	r3, [sp, #0]
 800c54a:	4633      	mov	r3, r6
 800c54c:	f7ff f8be 	bl	800b6cc <__s2b>
 800c550:	9009      	str	r0, [sp, #36]	; 0x24
 800c552:	2800      	cmp	r0, #0
 800c554:	f43f af29 	beq.w	800c3aa <_strtod_l+0x482>
 800c558:	9a08      	ldr	r2, [sp, #32]
 800c55a:	2500      	movs	r5, #0
 800c55c:	9b05      	ldr	r3, [sp, #20]
 800c55e:	2a00      	cmp	r2, #0
 800c560:	46ab      	mov	fp, r5
 800c562:	eba3 0307 	sub.w	r3, r3, r7
 800c566:	bfa8      	it	ge
 800c568:	2300      	movge	r3, #0
 800c56a:	930c      	str	r3, [sp, #48]	; 0x30
 800c56c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c570:	9312      	str	r3, [sp, #72]	; 0x48
 800c572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c574:	4620      	mov	r0, r4
 800c576:	6859      	ldr	r1, [r3, #4]
 800c578:	f7fe fffe 	bl	800b578 <_Balloc>
 800c57c:	9005      	str	r0, [sp, #20]
 800c57e:	2800      	cmp	r0, #0
 800c580:	f43f af17 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c584:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c586:	300c      	adds	r0, #12
 800c588:	691a      	ldr	r2, [r3, #16]
 800c58a:	f103 010c 	add.w	r1, r3, #12
 800c58e:	3202      	adds	r2, #2
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	f000 ff4f 	bl	800d434 <memcpy>
 800c596:	aa18      	add	r2, sp, #96	; 0x60
 800c598:	a917      	add	r1, sp, #92	; 0x5c
 800c59a:	4620      	mov	r0, r4
 800c59c:	ec49 8b10 	vmov	d0, r8, r9
 800c5a0:	f7ff fbd2 	bl	800bd48 <__d2b>
 800c5a4:	9016      	str	r0, [sp, #88]	; 0x58
 800c5a6:	ec49 8b18 	vmov	d8, r8, r9
 800c5aa:	2800      	cmp	r0, #0
 800c5ac:	f43f af01 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f7ff f922 	bl	800b7fc <__i2b>
 800c5b8:	4683      	mov	fp, r0
 800c5ba:	2800      	cmp	r0, #0
 800c5bc:	f43f aef9 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c5c0:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c5c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c5c4:	2e00      	cmp	r6, #0
 800c5c6:	bfa9      	itett	ge
 800c5c8:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800c5ca:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800c5cc:	eb06 0a03 	addge.w	sl, r6, r3
 800c5d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c5d2:	bfb8      	it	lt
 800c5d4:	1b9f      	sublt	r7, r3, r6
 800c5d6:	9b04      	ldr	r3, [sp, #16]
 800c5d8:	bfb8      	it	lt
 800c5da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800c5de:	1af6      	subs	r6, r6, r3
 800c5e0:	4ba0      	ldr	r3, [pc, #640]	; (800c864 <_strtod_l+0x93c>)
 800c5e2:	4416      	add	r6, r2
 800c5e4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c5e8:	3e01      	subs	r6, #1
 800c5ea:	429e      	cmp	r6, r3
 800c5ec:	f280 80c3 	bge.w	800c776 <_strtod_l+0x84e>
 800c5f0:	1b9b      	subs	r3, r3, r6
 800c5f2:	2101      	movs	r1, #1
 800c5f4:	2b1f      	cmp	r3, #31
 800c5f6:	eba2 0203 	sub.w	r2, r2, r3
 800c5fa:	f300 80b0 	bgt.w	800c75e <_strtod_l+0x836>
 800c5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c602:	930e      	str	r3, [sp, #56]	; 0x38
 800c604:	2300      	movs	r3, #0
 800c606:	930d      	str	r3, [sp, #52]	; 0x34
 800c608:	eb0a 0602 	add.w	r6, sl, r2
 800c60c:	9b04      	ldr	r3, [sp, #16]
 800c60e:	4417      	add	r7, r2
 800c610:	45b2      	cmp	sl, r6
 800c612:	441f      	add	r7, r3
 800c614:	4653      	mov	r3, sl
 800c616:	bfa8      	it	ge
 800c618:	4633      	movge	r3, r6
 800c61a:	42bb      	cmp	r3, r7
 800c61c:	bfa8      	it	ge
 800c61e:	463b      	movge	r3, r7
 800c620:	2b00      	cmp	r3, #0
 800c622:	bfc2      	ittt	gt
 800c624:	1af6      	subgt	r6, r6, r3
 800c626:	1aff      	subgt	r7, r7, r3
 800c628:	ebaa 0a03 	subgt.w	sl, sl, r3
 800c62c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c62e:	2b00      	cmp	r3, #0
 800c630:	dd17      	ble.n	800c662 <_strtod_l+0x73a>
 800c632:	4659      	mov	r1, fp
 800c634:	461a      	mov	r2, r3
 800c636:	4620      	mov	r0, r4
 800c638:	f7ff f9a0 	bl	800b97c <__pow5mult>
 800c63c:	4683      	mov	fp, r0
 800c63e:	2800      	cmp	r0, #0
 800c640:	f43f aeb7 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c644:	4601      	mov	r1, r0
 800c646:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c648:	4620      	mov	r0, r4
 800c64a:	f7ff f8ed 	bl	800b828 <__multiply>
 800c64e:	900b      	str	r0, [sp, #44]	; 0x2c
 800c650:	2800      	cmp	r0, #0
 800c652:	f43f aeae 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c656:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c658:	4620      	mov	r0, r4
 800c65a:	f7fe ffcd 	bl	800b5f8 <_Bfree>
 800c65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c660:	9316      	str	r3, [sp, #88]	; 0x58
 800c662:	2e00      	cmp	r6, #0
 800c664:	f300 808c 	bgt.w	800c780 <_strtod_l+0x858>
 800c668:	9b08      	ldr	r3, [sp, #32]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dd08      	ble.n	800c680 <_strtod_l+0x758>
 800c66e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c670:	4620      	mov	r0, r4
 800c672:	9905      	ldr	r1, [sp, #20]
 800c674:	f7ff f982 	bl	800b97c <__pow5mult>
 800c678:	9005      	str	r0, [sp, #20]
 800c67a:	2800      	cmp	r0, #0
 800c67c:	f43f ae99 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c680:	2f00      	cmp	r7, #0
 800c682:	dd08      	ble.n	800c696 <_strtod_l+0x76e>
 800c684:	463a      	mov	r2, r7
 800c686:	9905      	ldr	r1, [sp, #20]
 800c688:	4620      	mov	r0, r4
 800c68a:	f7ff f9d1 	bl	800ba30 <__lshift>
 800c68e:	9005      	str	r0, [sp, #20]
 800c690:	2800      	cmp	r0, #0
 800c692:	f43f ae8e 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c696:	f1ba 0f00 	cmp.w	sl, #0
 800c69a:	dd08      	ble.n	800c6ae <_strtod_l+0x786>
 800c69c:	4659      	mov	r1, fp
 800c69e:	4652      	mov	r2, sl
 800c6a0:	4620      	mov	r0, r4
 800c6a2:	f7ff f9c5 	bl	800ba30 <__lshift>
 800c6a6:	4683      	mov	fp, r0
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	f43f ae82 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c6ae:	9a05      	ldr	r2, [sp, #20]
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c6b4:	f7ff fa44 	bl	800bb40 <__mdiff>
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	f43f ae79 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c6c0:	68c3      	ldr	r3, [r0, #12]
 800c6c2:	4659      	mov	r1, fp
 800c6c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60c3      	str	r3, [r0, #12]
 800c6ca:	f7ff fa1d 	bl	800bb08 <__mcmp>
 800c6ce:	2800      	cmp	r0, #0
 800c6d0:	da60      	bge.n	800c794 <_strtod_l+0x86c>
 800c6d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6d4:	ea53 0308 	orrs.w	r3, r3, r8
 800c6d8:	f040 8084 	bne.w	800c7e4 <_strtod_l+0x8bc>
 800c6dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d17f      	bne.n	800c7e4 <_strtod_l+0x8bc>
 800c6e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6e8:	0d1b      	lsrs	r3, r3, #20
 800c6ea:	051b      	lsls	r3, r3, #20
 800c6ec:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c6f0:	d978      	bls.n	800c7e4 <_strtod_l+0x8bc>
 800c6f2:	696b      	ldr	r3, [r5, #20]
 800c6f4:	b913      	cbnz	r3, 800c6fc <_strtod_l+0x7d4>
 800c6f6:	692b      	ldr	r3, [r5, #16]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	dd73      	ble.n	800c7e4 <_strtod_l+0x8bc>
 800c6fc:	4629      	mov	r1, r5
 800c6fe:	2201      	movs	r2, #1
 800c700:	4620      	mov	r0, r4
 800c702:	f7ff f995 	bl	800ba30 <__lshift>
 800c706:	4659      	mov	r1, fp
 800c708:	4605      	mov	r5, r0
 800c70a:	f7ff f9fd 	bl	800bb08 <__mcmp>
 800c70e:	2800      	cmp	r0, #0
 800c710:	dd68      	ble.n	800c7e4 <_strtod_l+0x8bc>
 800c712:	9904      	ldr	r1, [sp, #16]
 800c714:	464b      	mov	r3, r9
 800c716:	4a54      	ldr	r2, [pc, #336]	; (800c868 <_strtod_l+0x940>)
 800c718:	2900      	cmp	r1, #0
 800c71a:	f000 8084 	beq.w	800c826 <_strtod_l+0x8fe>
 800c71e:	ea02 0109 	and.w	r1, r2, r9
 800c722:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c726:	dc7e      	bgt.n	800c826 <_strtod_l+0x8fe>
 800c728:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c72c:	f77f aeb2 	ble.w	800c494 <_strtod_l+0x56c>
 800c730:	4b4e      	ldr	r3, [pc, #312]	; (800c86c <_strtod_l+0x944>)
 800c732:	4640      	mov	r0, r8
 800c734:	4649      	mov	r1, r9
 800c736:	2200      	movs	r2, #0
 800c738:	f7f3 ff62 	bl	8000600 <__aeabi_dmul>
 800c73c:	4b4a      	ldr	r3, [pc, #296]	; (800c868 <_strtod_l+0x940>)
 800c73e:	4680      	mov	r8, r0
 800c740:	4689      	mov	r9, r1
 800c742:	400b      	ands	r3, r1
 800c744:	2b00      	cmp	r3, #0
 800c746:	f47f ae3e 	bne.w	800c3c6 <_strtod_l+0x49e>
 800c74a:	2322      	movs	r3, #34	; 0x22
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	e63a      	b.n	800c3c6 <_strtod_l+0x49e>
 800c750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c754:	fa02 f303 	lsl.w	r3, r2, r3
 800c758:	ea03 0808 	and.w	r8, r3, r8
 800c75c:	e6e8      	b.n	800c530 <_strtod_l+0x608>
 800c75e:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c762:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c766:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c76a:	36e2      	adds	r6, #226	; 0xe2
 800c76c:	fa01 f306 	lsl.w	r3, r1, r6
 800c770:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c774:	e748      	b.n	800c608 <_strtod_l+0x6e0>
 800c776:	2100      	movs	r1, #0
 800c778:	2301      	movs	r3, #1
 800c77a:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c77e:	e743      	b.n	800c608 <_strtod_l+0x6e0>
 800c780:	4632      	mov	r2, r6
 800c782:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c784:	4620      	mov	r0, r4
 800c786:	f7ff f953 	bl	800ba30 <__lshift>
 800c78a:	9016      	str	r0, [sp, #88]	; 0x58
 800c78c:	2800      	cmp	r0, #0
 800c78e:	f47f af6b 	bne.w	800c668 <_strtod_l+0x740>
 800c792:	e60e      	b.n	800c3b2 <_strtod_l+0x48a>
 800c794:	46ca      	mov	sl, r9
 800c796:	d171      	bne.n	800c87c <_strtod_l+0x954>
 800c798:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c79a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c79e:	b352      	cbz	r2, 800c7f6 <_strtod_l+0x8ce>
 800c7a0:	4a33      	ldr	r2, [pc, #204]	; (800c870 <_strtod_l+0x948>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d12a      	bne.n	800c7fc <_strtod_l+0x8d4>
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	4641      	mov	r1, r8
 800c7aa:	b1fb      	cbz	r3, 800c7ec <_strtod_l+0x8c4>
 800c7ac:	4b2e      	ldr	r3, [pc, #184]	; (800c868 <_strtod_l+0x940>)
 800c7ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7b2:	ea09 0303 	and.w	r3, r9, r3
 800c7b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c7ba:	d81a      	bhi.n	800c7f2 <_strtod_l+0x8ca>
 800c7bc:	0d1b      	lsrs	r3, r3, #20
 800c7be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7c6:	4299      	cmp	r1, r3
 800c7c8:	d118      	bne.n	800c7fc <_strtod_l+0x8d4>
 800c7ca:	4b2a      	ldr	r3, [pc, #168]	; (800c874 <_strtod_l+0x94c>)
 800c7cc:	459a      	cmp	sl, r3
 800c7ce:	d102      	bne.n	800c7d6 <_strtod_l+0x8ae>
 800c7d0:	3101      	adds	r1, #1
 800c7d2:	f43f adee 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c7d6:	4b24      	ldr	r3, [pc, #144]	; (800c868 <_strtod_l+0x940>)
 800c7d8:	f04f 0800 	mov.w	r8, #0
 800c7dc:	ea0a 0303 	and.w	r3, sl, r3
 800c7e0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c7e4:	9b04      	ldr	r3, [sp, #16]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1a2      	bne.n	800c730 <_strtod_l+0x808>
 800c7ea:	e5ec      	b.n	800c3c6 <_strtod_l+0x49e>
 800c7ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7f0:	e7e9      	b.n	800c7c6 <_strtod_l+0x89e>
 800c7f2:	4613      	mov	r3, r2
 800c7f4:	e7e7      	b.n	800c7c6 <_strtod_l+0x89e>
 800c7f6:	ea53 0308 	orrs.w	r3, r3, r8
 800c7fa:	d08a      	beq.n	800c712 <_strtod_l+0x7ea>
 800c7fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c7fe:	b1e3      	cbz	r3, 800c83a <_strtod_l+0x912>
 800c800:	ea13 0f0a 	tst.w	r3, sl
 800c804:	d0ee      	beq.n	800c7e4 <_strtod_l+0x8bc>
 800c806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c808:	4640      	mov	r0, r8
 800c80a:	9a04      	ldr	r2, [sp, #16]
 800c80c:	4649      	mov	r1, r9
 800c80e:	b1c3      	cbz	r3, 800c842 <_strtod_l+0x91a>
 800c810:	f7ff fb6b 	bl	800beea <sulp>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	ec51 0b18 	vmov	r0, r1, d8
 800c81c:	f7f3 fd3a 	bl	8000294 <__adddf3>
 800c820:	4680      	mov	r8, r0
 800c822:	4689      	mov	r9, r1
 800c824:	e7de      	b.n	800c7e4 <_strtod_l+0x8bc>
 800c826:	4013      	ands	r3, r2
 800c828:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c82c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c830:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c834:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c838:	e7d4      	b.n	800c7e4 <_strtod_l+0x8bc>
 800c83a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c83c:	ea13 0f08 	tst.w	r3, r8
 800c840:	e7e0      	b.n	800c804 <_strtod_l+0x8dc>
 800c842:	f7ff fb52 	bl	800beea <sulp>
 800c846:	4602      	mov	r2, r0
 800c848:	460b      	mov	r3, r1
 800c84a:	ec51 0b18 	vmov	r0, r1, d8
 800c84e:	f7f3 fd1f 	bl	8000290 <__aeabi_dsub>
 800c852:	2200      	movs	r2, #0
 800c854:	2300      	movs	r3, #0
 800c856:	4680      	mov	r8, r0
 800c858:	4689      	mov	r9, r1
 800c85a:	f7f4 f939 	bl	8000ad0 <__aeabi_dcmpeq>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d0c0      	beq.n	800c7e4 <_strtod_l+0x8bc>
 800c862:	e617      	b.n	800c494 <_strtod_l+0x56c>
 800c864:	fffffc02 	.word	0xfffffc02
 800c868:	7ff00000 	.word	0x7ff00000
 800c86c:	39500000 	.word	0x39500000
 800c870:	000fffff 	.word	0x000fffff
 800c874:	7fefffff 	.word	0x7fefffff
 800c878:	0800f4b0 	.word	0x0800f4b0
 800c87c:	4659      	mov	r1, fp
 800c87e:	4628      	mov	r0, r5
 800c880:	f7ff fabc 	bl	800bdfc <__ratio>
 800c884:	2200      	movs	r2, #0
 800c886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c88a:	ee10 0a10 	vmov	r0, s0
 800c88e:	ec57 6b10 	vmov	r6, r7, d0
 800c892:	4639      	mov	r1, r7
 800c894:	f7f4 f930 	bl	8000af8 <__aeabi_dcmple>
 800c898:	2800      	cmp	r0, #0
 800c89a:	d071      	beq.n	800c980 <_strtod_l+0xa58>
 800c89c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d17c      	bne.n	800c99c <_strtod_l+0xa74>
 800c8a2:	f1b8 0f00 	cmp.w	r8, #0
 800c8a6:	d15a      	bne.n	800c95e <_strtod_l+0xa36>
 800c8a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d15d      	bne.n	800c96c <_strtod_l+0xa44>
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	4b91      	ldr	r3, [pc, #580]	; (800caf8 <_strtod_l+0xbd0>)
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	4639      	mov	r1, r7
 800c8b8:	f7f4 f914 	bl	8000ae4 <__aeabi_dcmplt>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	d15c      	bne.n	800c97a <_strtod_l+0xa52>
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	4b8d      	ldr	r3, [pc, #564]	; (800cafc <_strtod_l+0xbd4>)
 800c8c8:	f7f3 fe9a 	bl	8000600 <__aeabi_dmul>
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c8d4:	9606      	str	r6, [sp, #24]
 800c8d6:	9307      	str	r3, [sp, #28]
 800c8d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c8e0:	4b87      	ldr	r3, [pc, #540]	; (800cb00 <_strtod_l+0xbd8>)
 800c8e2:	ea0a 0303 	and.w	r3, sl, r3
 800c8e6:	930d      	str	r3, [sp, #52]	; 0x34
 800c8e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8ea:	4b86      	ldr	r3, [pc, #536]	; (800cb04 <_strtod_l+0xbdc>)
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	f040 8090 	bne.w	800ca12 <_strtod_l+0xaea>
 800c8f2:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c8f6:	ec49 8b10 	vmov	d0, r8, r9
 800c8fa:	f7ff f9b1 	bl	800bc60 <__ulp>
 800c8fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c902:	ec51 0b10 	vmov	r0, r1, d0
 800c906:	f7f3 fe7b 	bl	8000600 <__aeabi_dmul>
 800c90a:	4642      	mov	r2, r8
 800c90c:	464b      	mov	r3, r9
 800c90e:	f7f3 fcc1 	bl	8000294 <__adddf3>
 800c912:	460b      	mov	r3, r1
 800c914:	497a      	ldr	r1, [pc, #488]	; (800cb00 <_strtod_l+0xbd8>)
 800c916:	4680      	mov	r8, r0
 800c918:	4a7b      	ldr	r2, [pc, #492]	; (800cb08 <_strtod_l+0xbe0>)
 800c91a:	4019      	ands	r1, r3
 800c91c:	4291      	cmp	r1, r2
 800c91e:	d944      	bls.n	800c9aa <_strtod_l+0xa82>
 800c920:	ee18 2a90 	vmov	r2, s17
 800c924:	4b79      	ldr	r3, [pc, #484]	; (800cb0c <_strtod_l+0xbe4>)
 800c926:	429a      	cmp	r2, r3
 800c928:	d104      	bne.n	800c934 <_strtod_l+0xa0c>
 800c92a:	ee18 3a10 	vmov	r3, s16
 800c92e:	3301      	adds	r3, #1
 800c930:	f43f ad3f 	beq.w	800c3b2 <_strtod_l+0x48a>
 800c934:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 800cb0c <_strtod_l+0xbe4>
 800c938:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c93c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c93e:	4620      	mov	r0, r4
 800c940:	f7fe fe5a 	bl	800b5f8 <_Bfree>
 800c944:	9905      	ldr	r1, [sp, #20]
 800c946:	4620      	mov	r0, r4
 800c948:	f7fe fe56 	bl	800b5f8 <_Bfree>
 800c94c:	4659      	mov	r1, fp
 800c94e:	4620      	mov	r0, r4
 800c950:	f7fe fe52 	bl	800b5f8 <_Bfree>
 800c954:	4629      	mov	r1, r5
 800c956:	4620      	mov	r0, r4
 800c958:	f7fe fe4e 	bl	800b5f8 <_Bfree>
 800c95c:	e609      	b.n	800c572 <_strtod_l+0x64a>
 800c95e:	f1b8 0f01 	cmp.w	r8, #1
 800c962:	d103      	bne.n	800c96c <_strtod_l+0xa44>
 800c964:	f1b9 0f00 	cmp.w	r9, #0
 800c968:	f43f ad94 	beq.w	800c494 <_strtod_l+0x56c>
 800c96c:	2600      	movs	r6, #0
 800c96e:	4f62      	ldr	r7, [pc, #392]	; (800caf8 <_strtod_l+0xbd0>)
 800c970:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800cac8 <_strtod_l+0xba0>
 800c974:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c978:	e7ae      	b.n	800c8d8 <_strtod_l+0x9b0>
 800c97a:	2600      	movs	r6, #0
 800c97c:	4f5f      	ldr	r7, [pc, #380]	; (800cafc <_strtod_l+0xbd4>)
 800c97e:	e7a7      	b.n	800c8d0 <_strtod_l+0x9a8>
 800c980:	4b5e      	ldr	r3, [pc, #376]	; (800cafc <_strtod_l+0xbd4>)
 800c982:	4630      	mov	r0, r6
 800c984:	4639      	mov	r1, r7
 800c986:	2200      	movs	r2, #0
 800c988:	f7f3 fe3a 	bl	8000600 <__aeabi_dmul>
 800c98c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c98e:	4606      	mov	r6, r0
 800c990:	460f      	mov	r7, r1
 800c992:	2b00      	cmp	r3, #0
 800c994:	d09c      	beq.n	800c8d0 <_strtod_l+0x9a8>
 800c996:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c99a:	e79d      	b.n	800c8d8 <_strtod_l+0x9b0>
 800c99c:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800cad0 <_strtod_l+0xba8>
 800c9a0:	ec57 6b17 	vmov	r6, r7, d7
 800c9a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c9a8:	e796      	b.n	800c8d8 <_strtod_l+0x9b0>
 800c9aa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c9ae:	9b04      	ldr	r3, [sp, #16]
 800c9b0:	46ca      	mov	sl, r9
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1c2      	bne.n	800c93c <_strtod_l+0xa14>
 800c9b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9bc:	0d1b      	lsrs	r3, r3, #20
 800c9be:	051b      	lsls	r3, r3, #20
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d1bb      	bne.n	800c93c <_strtod_l+0xa14>
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f7f4 f97a 	bl	8000cc0 <__aeabi_d2lz>
 800c9cc:	f7f3 fdea 	bl	80005a4 <__aeabi_l2d>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	4630      	mov	r0, r6
 800c9d6:	4639      	mov	r1, r7
 800c9d8:	f7f3 fc5a 	bl	8000290 <__aeabi_dsub>
 800c9dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	ea43 0308 	orr.w	r3, r3, r8
 800c9e8:	460f      	mov	r7, r1
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	d054      	beq.n	800ca98 <_strtod_l+0xb70>
 800c9ee:	a33a      	add	r3, pc, #232	; (adr r3, 800cad8 <_strtod_l+0xbb0>)
 800c9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9f4:	f7f4 f876 	bl	8000ae4 <__aeabi_dcmplt>
 800c9f8:	2800      	cmp	r0, #0
 800c9fa:	f47f ace4 	bne.w	800c3c6 <_strtod_l+0x49e>
 800c9fe:	4630      	mov	r0, r6
 800ca00:	4639      	mov	r1, r7
 800ca02:	a337      	add	r3, pc, #220	; (adr r3, 800cae0 <_strtod_l+0xbb8>)
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f7f4 f88a 	bl	8000b20 <__aeabi_dcmpgt>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d095      	beq.n	800c93c <_strtod_l+0xa14>
 800ca10:	e4d9      	b.n	800c3c6 <_strtod_l+0x49e>
 800ca12:	9b04      	ldr	r3, [sp, #16]
 800ca14:	b333      	cbz	r3, 800ca64 <_strtod_l+0xb3c>
 800ca16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ca1c:	d822      	bhi.n	800ca64 <_strtod_l+0xb3c>
 800ca1e:	4630      	mov	r0, r6
 800ca20:	4639      	mov	r1, r7
 800ca22:	a331      	add	r3, pc, #196	; (adr r3, 800cae8 <_strtod_l+0xbc0>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	f7f4 f866 	bl	8000af8 <__aeabi_dcmple>
 800ca2c:	b1a0      	cbz	r0, 800ca58 <_strtod_l+0xb30>
 800ca2e:	4639      	mov	r1, r7
 800ca30:	4630      	mov	r0, r6
 800ca32:	f7f4 f8bd 	bl	8000bb0 <__aeabi_d2uiz>
 800ca36:	2801      	cmp	r0, #1
 800ca38:	bf38      	it	cc
 800ca3a:	2001      	movcc	r0, #1
 800ca3c:	f7f3 fd66 	bl	800050c <__aeabi_ui2d>
 800ca40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca42:	4606      	mov	r6, r0
 800ca44:	460f      	mov	r7, r1
 800ca46:	bb23      	cbnz	r3, 800ca92 <_strtod_l+0xb6a>
 800ca48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca4c:	9010      	str	r0, [sp, #64]	; 0x40
 800ca4e:	9311      	str	r3, [sp, #68]	; 0x44
 800ca50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ca54:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800ca58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ca5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ca5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ca60:	1a9b      	subs	r3, r3, r2
 800ca62:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca64:	eeb0 0a48 	vmov.f32	s0, s16
 800ca68:	eef0 0a68 	vmov.f32	s1, s17
 800ca6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ca70:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800ca74:	f7ff f8f4 	bl	800bc60 <__ulp>
 800ca78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ca7c:	ec53 2b10 	vmov	r2, r3, d0
 800ca80:	f7f3 fdbe 	bl	8000600 <__aeabi_dmul>
 800ca84:	ec53 2b18 	vmov	r2, r3, d8
 800ca88:	f7f3 fc04 	bl	8000294 <__adddf3>
 800ca8c:	4680      	mov	r8, r0
 800ca8e:	4689      	mov	r9, r1
 800ca90:	e78d      	b.n	800c9ae <_strtod_l+0xa86>
 800ca92:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ca96:	e7db      	b.n	800ca50 <_strtod_l+0xb28>
 800ca98:	a315      	add	r3, pc, #84	; (adr r3, 800caf0 <_strtod_l+0xbc8>)
 800ca9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca9e:	f7f4 f821 	bl	8000ae4 <__aeabi_dcmplt>
 800caa2:	e7b3      	b.n	800ca0c <_strtod_l+0xae4>
 800caa4:	2300      	movs	r3, #0
 800caa6:	930a      	str	r3, [sp, #40]	; 0x28
 800caa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800caaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800caac:	6013      	str	r3, [r2, #0]
 800caae:	f7ff ba7a 	b.w	800bfa6 <_strtod_l+0x7e>
 800cab2:	2a65      	cmp	r2, #101	; 0x65
 800cab4:	f43f ab72 	beq.w	800c19c <_strtod_l+0x274>
 800cab8:	2a45      	cmp	r2, #69	; 0x45
 800caba:	f43f ab6f 	beq.w	800c19c <_strtod_l+0x274>
 800cabe:	2301      	movs	r3, #1
 800cac0:	f7ff bba8 	b.w	800c214 <_strtod_l+0x2ec>
 800cac4:	f3af 8000 	nop.w
 800cac8:	00000000 	.word	0x00000000
 800cacc:	bff00000 	.word	0xbff00000
 800cad0:	00000000 	.word	0x00000000
 800cad4:	3ff00000 	.word	0x3ff00000
 800cad8:	94a03595 	.word	0x94a03595
 800cadc:	3fdfffff 	.word	0x3fdfffff
 800cae0:	35afe535 	.word	0x35afe535
 800cae4:	3fe00000 	.word	0x3fe00000
 800cae8:	ffc00000 	.word	0xffc00000
 800caec:	41dfffff 	.word	0x41dfffff
 800caf0:	94a03595 	.word	0x94a03595
 800caf4:	3fcfffff 	.word	0x3fcfffff
 800caf8:	3ff00000 	.word	0x3ff00000
 800cafc:	3fe00000 	.word	0x3fe00000
 800cb00:	7ff00000 	.word	0x7ff00000
 800cb04:	7fe00000 	.word	0x7fe00000
 800cb08:	7c9fffff 	.word	0x7c9fffff
 800cb0c:	7fefffff 	.word	0x7fefffff

0800cb10 <_strtod_r>:
 800cb10:	4b01      	ldr	r3, [pc, #4]	; (800cb18 <_strtod_r+0x8>)
 800cb12:	f7ff ba09 	b.w	800bf28 <_strtod_l>
 800cb16:	bf00      	nop
 800cb18:	20000078 	.word	0x20000078

0800cb1c <_strtol_l.constprop.0>:
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb22:	d001      	beq.n	800cb28 <_strtol_l.constprop.0+0xc>
 800cb24:	2b24      	cmp	r3, #36	; 0x24
 800cb26:	d906      	bls.n	800cb36 <_strtol_l.constprop.0+0x1a>
 800cb28:	f7fd fd64 	bl	800a5f4 <__errno>
 800cb2c:	2316      	movs	r3, #22
 800cb2e:	6003      	str	r3, [r0, #0]
 800cb30:	2000      	movs	r0, #0
 800cb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb36:	460d      	mov	r5, r1
 800cb38:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800cc1c <_strtol_l.constprop.0+0x100>
 800cb3c:	462e      	mov	r6, r5
 800cb3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb42:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cb46:	f017 0708 	ands.w	r7, r7, #8
 800cb4a:	d1f7      	bne.n	800cb3c <_strtol_l.constprop.0+0x20>
 800cb4c:	2c2d      	cmp	r4, #45	; 0x2d
 800cb4e:	d132      	bne.n	800cbb6 <_strtol_l.constprop.0+0x9a>
 800cb50:	782c      	ldrb	r4, [r5, #0]
 800cb52:	2701      	movs	r7, #1
 800cb54:	1cb5      	adds	r5, r6, #2
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d05b      	beq.n	800cc12 <_strtol_l.constprop.0+0xf6>
 800cb5a:	2b10      	cmp	r3, #16
 800cb5c:	d109      	bne.n	800cb72 <_strtol_l.constprop.0+0x56>
 800cb5e:	2c30      	cmp	r4, #48	; 0x30
 800cb60:	d107      	bne.n	800cb72 <_strtol_l.constprop.0+0x56>
 800cb62:	782c      	ldrb	r4, [r5, #0]
 800cb64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cb68:	2c58      	cmp	r4, #88	; 0x58
 800cb6a:	d14d      	bne.n	800cc08 <_strtol_l.constprop.0+0xec>
 800cb6c:	786c      	ldrb	r4, [r5, #1]
 800cb6e:	2310      	movs	r3, #16
 800cb70:	3502      	adds	r5, #2
 800cb72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cb76:	f04f 0e00 	mov.w	lr, #0
 800cb7a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cb7e:	4676      	mov	r6, lr
 800cb80:	fbb8 f9f3 	udiv	r9, r8, r3
 800cb84:	fb03 8a19 	mls	sl, r3, r9, r8
 800cb88:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cb8c:	f1bc 0f09 	cmp.w	ip, #9
 800cb90:	d816      	bhi.n	800cbc0 <_strtol_l.constprop.0+0xa4>
 800cb92:	4664      	mov	r4, ip
 800cb94:	42a3      	cmp	r3, r4
 800cb96:	dd24      	ble.n	800cbe2 <_strtol_l.constprop.0+0xc6>
 800cb98:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800cb9c:	d008      	beq.n	800cbb0 <_strtol_l.constprop.0+0x94>
 800cb9e:	45b1      	cmp	r9, r6
 800cba0:	d31c      	bcc.n	800cbdc <_strtol_l.constprop.0+0xc0>
 800cba2:	d101      	bne.n	800cba8 <_strtol_l.constprop.0+0x8c>
 800cba4:	45a2      	cmp	sl, r4
 800cba6:	db19      	blt.n	800cbdc <_strtol_l.constprop.0+0xc0>
 800cba8:	fb06 4603 	mla	r6, r6, r3, r4
 800cbac:	f04f 0e01 	mov.w	lr, #1
 800cbb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbb4:	e7e8      	b.n	800cb88 <_strtol_l.constprop.0+0x6c>
 800cbb6:	2c2b      	cmp	r4, #43	; 0x2b
 800cbb8:	bf04      	itt	eq
 800cbba:	782c      	ldrbeq	r4, [r5, #0]
 800cbbc:	1cb5      	addeq	r5, r6, #2
 800cbbe:	e7ca      	b.n	800cb56 <_strtol_l.constprop.0+0x3a>
 800cbc0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cbc4:	f1bc 0f19 	cmp.w	ip, #25
 800cbc8:	d801      	bhi.n	800cbce <_strtol_l.constprop.0+0xb2>
 800cbca:	3c37      	subs	r4, #55	; 0x37
 800cbcc:	e7e2      	b.n	800cb94 <_strtol_l.constprop.0+0x78>
 800cbce:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cbd2:	f1bc 0f19 	cmp.w	ip, #25
 800cbd6:	d804      	bhi.n	800cbe2 <_strtol_l.constprop.0+0xc6>
 800cbd8:	3c57      	subs	r4, #87	; 0x57
 800cbda:	e7db      	b.n	800cb94 <_strtol_l.constprop.0+0x78>
 800cbdc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800cbe0:	e7e6      	b.n	800cbb0 <_strtol_l.constprop.0+0x94>
 800cbe2:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800cbe6:	d105      	bne.n	800cbf4 <_strtol_l.constprop.0+0xd8>
 800cbe8:	2322      	movs	r3, #34	; 0x22
 800cbea:	4646      	mov	r6, r8
 800cbec:	6003      	str	r3, [r0, #0]
 800cbee:	b942      	cbnz	r2, 800cc02 <_strtol_l.constprop.0+0xe6>
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	e79e      	b.n	800cb32 <_strtol_l.constprop.0+0x16>
 800cbf4:	b107      	cbz	r7, 800cbf8 <_strtol_l.constprop.0+0xdc>
 800cbf6:	4276      	negs	r6, r6
 800cbf8:	2a00      	cmp	r2, #0
 800cbfa:	d0f9      	beq.n	800cbf0 <_strtol_l.constprop.0+0xd4>
 800cbfc:	f1be 0f00 	cmp.w	lr, #0
 800cc00:	d000      	beq.n	800cc04 <_strtol_l.constprop.0+0xe8>
 800cc02:	1e69      	subs	r1, r5, #1
 800cc04:	6011      	str	r1, [r2, #0]
 800cc06:	e7f3      	b.n	800cbf0 <_strtol_l.constprop.0+0xd4>
 800cc08:	2430      	movs	r4, #48	; 0x30
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1b1      	bne.n	800cb72 <_strtol_l.constprop.0+0x56>
 800cc0e:	2308      	movs	r3, #8
 800cc10:	e7af      	b.n	800cb72 <_strtol_l.constprop.0+0x56>
 800cc12:	2c30      	cmp	r4, #48	; 0x30
 800cc14:	d0a5      	beq.n	800cb62 <_strtol_l.constprop.0+0x46>
 800cc16:	230a      	movs	r3, #10
 800cc18:	e7ab      	b.n	800cb72 <_strtol_l.constprop.0+0x56>
 800cc1a:	bf00      	nop
 800cc1c:	0800f4d9 	.word	0x0800f4d9

0800cc20 <_strtol_r>:
 800cc20:	f7ff bf7c 	b.w	800cb1c <_strtol_l.constprop.0>

0800cc24 <__ssputs_r>:
 800cc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc28:	461f      	mov	r7, r3
 800cc2a:	688e      	ldr	r6, [r1, #8]
 800cc2c:	4682      	mov	sl, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	42be      	cmp	r6, r7
 800cc32:	4690      	mov	r8, r2
 800cc34:	680b      	ldr	r3, [r1, #0]
 800cc36:	d82c      	bhi.n	800cc92 <__ssputs_r+0x6e>
 800cc38:	898a      	ldrh	r2, [r1, #12]
 800cc3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc3e:	d026      	beq.n	800cc8e <__ssputs_r+0x6a>
 800cc40:	6965      	ldr	r5, [r4, #20]
 800cc42:	6909      	ldr	r1, [r1, #16]
 800cc44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc48:	eba3 0901 	sub.w	r9, r3, r1
 800cc4c:	1c7b      	adds	r3, r7, #1
 800cc4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc52:	444b      	add	r3, r9
 800cc54:	106d      	asrs	r5, r5, #1
 800cc56:	429d      	cmp	r5, r3
 800cc58:	bf38      	it	cc
 800cc5a:	461d      	movcc	r5, r3
 800cc5c:	0553      	lsls	r3, r2, #21
 800cc5e:	d527      	bpl.n	800ccb0 <__ssputs_r+0x8c>
 800cc60:	4629      	mov	r1, r5
 800cc62:	f7fe fbfd 	bl	800b460 <_malloc_r>
 800cc66:	4606      	mov	r6, r0
 800cc68:	b360      	cbz	r0, 800ccc4 <__ssputs_r+0xa0>
 800cc6a:	464a      	mov	r2, r9
 800cc6c:	6921      	ldr	r1, [r4, #16]
 800cc6e:	f000 fbe1 	bl	800d434 <memcpy>
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc7c:	81a3      	strh	r3, [r4, #12]
 800cc7e:	6126      	str	r6, [r4, #16]
 800cc80:	444e      	add	r6, r9
 800cc82:	6165      	str	r5, [r4, #20]
 800cc84:	eba5 0509 	sub.w	r5, r5, r9
 800cc88:	6026      	str	r6, [r4, #0]
 800cc8a:	463e      	mov	r6, r7
 800cc8c:	60a5      	str	r5, [r4, #8]
 800cc8e:	42be      	cmp	r6, r7
 800cc90:	d900      	bls.n	800cc94 <__ssputs_r+0x70>
 800cc92:	463e      	mov	r6, r7
 800cc94:	4632      	mov	r2, r6
 800cc96:	4641      	mov	r1, r8
 800cc98:	6820      	ldr	r0, [r4, #0]
 800cc9a:	f000 fb6c 	bl	800d376 <memmove>
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	2000      	movs	r0, #0
 800cca2:	1b9b      	subs	r3, r3, r6
 800cca4:	60a3      	str	r3, [r4, #8]
 800cca6:	6823      	ldr	r3, [r4, #0]
 800cca8:	4433      	add	r3, r6
 800ccaa:	6023      	str	r3, [r4, #0]
 800ccac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb0:	462a      	mov	r2, r5
 800ccb2:	f000 ff70 	bl	800db96 <_realloc_r>
 800ccb6:	4606      	mov	r6, r0
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d1e0      	bne.n	800cc7e <__ssputs_r+0x5a>
 800ccbc:	6921      	ldr	r1, [r4, #16]
 800ccbe:	4650      	mov	r0, sl
 800ccc0:	f7fe fb5a 	bl	800b378 <_free_r>
 800ccc4:	230c      	movs	r3, #12
 800ccc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ccca:	f8ca 3000 	str.w	r3, [sl]
 800ccce:	89a3      	ldrh	r3, [r4, #12]
 800ccd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd4:	81a3      	strh	r3, [r4, #12]
 800ccd6:	e7e9      	b.n	800ccac <__ssputs_r+0x88>

0800ccd8 <_svfiprintf_r>:
 800ccd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccdc:	4698      	mov	r8, r3
 800ccde:	898b      	ldrh	r3, [r1, #12]
 800cce0:	b09d      	sub	sp, #116	; 0x74
 800cce2:	4607      	mov	r7, r0
 800cce4:	061b      	lsls	r3, r3, #24
 800cce6:	460d      	mov	r5, r1
 800cce8:	4614      	mov	r4, r2
 800ccea:	d50e      	bpl.n	800cd0a <_svfiprintf_r+0x32>
 800ccec:	690b      	ldr	r3, [r1, #16]
 800ccee:	b963      	cbnz	r3, 800cd0a <_svfiprintf_r+0x32>
 800ccf0:	2140      	movs	r1, #64	; 0x40
 800ccf2:	f7fe fbb5 	bl	800b460 <_malloc_r>
 800ccf6:	6028      	str	r0, [r5, #0]
 800ccf8:	6128      	str	r0, [r5, #16]
 800ccfa:	b920      	cbnz	r0, 800cd06 <_svfiprintf_r+0x2e>
 800ccfc:	230c      	movs	r3, #12
 800ccfe:	603b      	str	r3, [r7, #0]
 800cd00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd04:	e0d0      	b.n	800cea8 <_svfiprintf_r+0x1d0>
 800cd06:	2340      	movs	r3, #64	; 0x40
 800cd08:	616b      	str	r3, [r5, #20]
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd10:	f04f 0901 	mov.w	r9, #1
 800cd14:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cec0 <_svfiprintf_r+0x1e8>
 800cd18:	9309      	str	r3, [sp, #36]	; 0x24
 800cd1a:	2320      	movs	r3, #32
 800cd1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd20:	2330      	movs	r3, #48	; 0x30
 800cd22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd26:	4623      	mov	r3, r4
 800cd28:	469a      	mov	sl, r3
 800cd2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd2e:	b10a      	cbz	r2, 800cd34 <_svfiprintf_r+0x5c>
 800cd30:	2a25      	cmp	r2, #37	; 0x25
 800cd32:	d1f9      	bne.n	800cd28 <_svfiprintf_r+0x50>
 800cd34:	ebba 0b04 	subs.w	fp, sl, r4
 800cd38:	d00b      	beq.n	800cd52 <_svfiprintf_r+0x7a>
 800cd3a:	465b      	mov	r3, fp
 800cd3c:	4622      	mov	r2, r4
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4638      	mov	r0, r7
 800cd42:	f7ff ff6f 	bl	800cc24 <__ssputs_r>
 800cd46:	3001      	adds	r0, #1
 800cd48:	f000 80a9 	beq.w	800ce9e <_svfiprintf_r+0x1c6>
 800cd4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd4e:	445a      	add	r2, fp
 800cd50:	9209      	str	r2, [sp, #36]	; 0x24
 800cd52:	f89a 3000 	ldrb.w	r3, [sl]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f000 80a1 	beq.w	800ce9e <_svfiprintf_r+0x1c6>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd62:	f10a 0a01 	add.w	sl, sl, #1
 800cd66:	9304      	str	r3, [sp, #16]
 800cd68:	9307      	str	r3, [sp, #28]
 800cd6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd6e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd74:	4654      	mov	r4, sl
 800cd76:	2205      	movs	r2, #5
 800cd78:	4851      	ldr	r0, [pc, #324]	; (800cec0 <_svfiprintf_r+0x1e8>)
 800cd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd7e:	f7fd fc66 	bl	800a64e <memchr>
 800cd82:	9a04      	ldr	r2, [sp, #16]
 800cd84:	b9d8      	cbnz	r0, 800cdbe <_svfiprintf_r+0xe6>
 800cd86:	06d0      	lsls	r0, r2, #27
 800cd88:	bf44      	itt	mi
 800cd8a:	2320      	movmi	r3, #32
 800cd8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd90:	0711      	lsls	r1, r2, #28
 800cd92:	bf44      	itt	mi
 800cd94:	232b      	movmi	r3, #43	; 0x2b
 800cd96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd9a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd9e:	2b2a      	cmp	r3, #42	; 0x2a
 800cda0:	d015      	beq.n	800cdce <_svfiprintf_r+0xf6>
 800cda2:	9a07      	ldr	r2, [sp, #28]
 800cda4:	4654      	mov	r4, sl
 800cda6:	2000      	movs	r0, #0
 800cda8:	f04f 0c0a 	mov.w	ip, #10
 800cdac:	4621      	mov	r1, r4
 800cdae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdb2:	3b30      	subs	r3, #48	; 0x30
 800cdb4:	2b09      	cmp	r3, #9
 800cdb6:	d94d      	bls.n	800ce54 <_svfiprintf_r+0x17c>
 800cdb8:	b1b0      	cbz	r0, 800cde8 <_svfiprintf_r+0x110>
 800cdba:	9207      	str	r2, [sp, #28]
 800cdbc:	e014      	b.n	800cde8 <_svfiprintf_r+0x110>
 800cdbe:	eba0 0308 	sub.w	r3, r0, r8
 800cdc2:	46a2      	mov	sl, r4
 800cdc4:	fa09 f303 	lsl.w	r3, r9, r3
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	9304      	str	r3, [sp, #16]
 800cdcc:	e7d2      	b.n	800cd74 <_svfiprintf_r+0x9c>
 800cdce:	9b03      	ldr	r3, [sp, #12]
 800cdd0:	1d19      	adds	r1, r3, #4
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	9103      	str	r1, [sp, #12]
 800cdd8:	bfbb      	ittet	lt
 800cdda:	425b      	neglt	r3, r3
 800cddc:	f042 0202 	orrlt.w	r2, r2, #2
 800cde0:	9307      	strge	r3, [sp, #28]
 800cde2:	9307      	strlt	r3, [sp, #28]
 800cde4:	bfb8      	it	lt
 800cde6:	9204      	strlt	r2, [sp, #16]
 800cde8:	7823      	ldrb	r3, [r4, #0]
 800cdea:	2b2e      	cmp	r3, #46	; 0x2e
 800cdec:	d10c      	bne.n	800ce08 <_svfiprintf_r+0x130>
 800cdee:	7863      	ldrb	r3, [r4, #1]
 800cdf0:	2b2a      	cmp	r3, #42	; 0x2a
 800cdf2:	d134      	bne.n	800ce5e <_svfiprintf_r+0x186>
 800cdf4:	9b03      	ldr	r3, [sp, #12]
 800cdf6:	3402      	adds	r4, #2
 800cdf8:	1d1a      	adds	r2, r3, #4
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	9203      	str	r2, [sp, #12]
 800ce00:	bfb8      	it	lt
 800ce02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce06:	9305      	str	r3, [sp, #20]
 800ce08:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ced0 <_svfiprintf_r+0x1f8>
 800ce0c:	2203      	movs	r2, #3
 800ce0e:	7821      	ldrb	r1, [r4, #0]
 800ce10:	4650      	mov	r0, sl
 800ce12:	f7fd fc1c 	bl	800a64e <memchr>
 800ce16:	b138      	cbz	r0, 800ce28 <_svfiprintf_r+0x150>
 800ce18:	eba0 000a 	sub.w	r0, r0, sl
 800ce1c:	2240      	movs	r2, #64	; 0x40
 800ce1e:	9b04      	ldr	r3, [sp, #16]
 800ce20:	3401      	adds	r4, #1
 800ce22:	4082      	lsls	r2, r0
 800ce24:	4313      	orrs	r3, r2
 800ce26:	9304      	str	r3, [sp, #16]
 800ce28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce2c:	2206      	movs	r2, #6
 800ce2e:	4825      	ldr	r0, [pc, #148]	; (800cec4 <_svfiprintf_r+0x1ec>)
 800ce30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce34:	f7fd fc0b 	bl	800a64e <memchr>
 800ce38:	2800      	cmp	r0, #0
 800ce3a:	d038      	beq.n	800ceae <_svfiprintf_r+0x1d6>
 800ce3c:	4b22      	ldr	r3, [pc, #136]	; (800cec8 <_svfiprintf_r+0x1f0>)
 800ce3e:	bb1b      	cbnz	r3, 800ce88 <_svfiprintf_r+0x1b0>
 800ce40:	9b03      	ldr	r3, [sp, #12]
 800ce42:	3307      	adds	r3, #7
 800ce44:	f023 0307 	bic.w	r3, r3, #7
 800ce48:	3308      	adds	r3, #8
 800ce4a:	9303      	str	r3, [sp, #12]
 800ce4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce4e:	4433      	add	r3, r6
 800ce50:	9309      	str	r3, [sp, #36]	; 0x24
 800ce52:	e768      	b.n	800cd26 <_svfiprintf_r+0x4e>
 800ce54:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce58:	460c      	mov	r4, r1
 800ce5a:	2001      	movs	r0, #1
 800ce5c:	e7a6      	b.n	800cdac <_svfiprintf_r+0xd4>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	3401      	adds	r4, #1
 800ce62:	f04f 0c0a 	mov.w	ip, #10
 800ce66:	4619      	mov	r1, r3
 800ce68:	9305      	str	r3, [sp, #20]
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce70:	3a30      	subs	r2, #48	; 0x30
 800ce72:	2a09      	cmp	r2, #9
 800ce74:	d903      	bls.n	800ce7e <_svfiprintf_r+0x1a6>
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d0c6      	beq.n	800ce08 <_svfiprintf_r+0x130>
 800ce7a:	9105      	str	r1, [sp, #20]
 800ce7c:	e7c4      	b.n	800ce08 <_svfiprintf_r+0x130>
 800ce7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce82:	4604      	mov	r4, r0
 800ce84:	2301      	movs	r3, #1
 800ce86:	e7f0      	b.n	800ce6a <_svfiprintf_r+0x192>
 800ce88:	ab03      	add	r3, sp, #12
 800ce8a:	462a      	mov	r2, r5
 800ce8c:	a904      	add	r1, sp, #16
 800ce8e:	4638      	mov	r0, r7
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	4b0e      	ldr	r3, [pc, #56]	; (800cecc <_svfiprintf_r+0x1f4>)
 800ce94:	f7fc fb5c 	bl	8009550 <_printf_float>
 800ce98:	1c42      	adds	r2, r0, #1
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	d1d6      	bne.n	800ce4c <_svfiprintf_r+0x174>
 800ce9e:	89ab      	ldrh	r3, [r5, #12]
 800cea0:	065b      	lsls	r3, r3, #25
 800cea2:	f53f af2d 	bmi.w	800cd00 <_svfiprintf_r+0x28>
 800cea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cea8:	b01d      	add	sp, #116	; 0x74
 800ceaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceae:	ab03      	add	r3, sp, #12
 800ceb0:	462a      	mov	r2, r5
 800ceb2:	a904      	add	r1, sp, #16
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	4b04      	ldr	r3, [pc, #16]	; (800cecc <_svfiprintf_r+0x1f4>)
 800ceba:	f7fc fdf1 	bl	8009aa0 <_printf_i>
 800cebe:	e7eb      	b.n	800ce98 <_svfiprintf_r+0x1c0>
 800cec0:	0800f5d9 	.word	0x0800f5d9
 800cec4:	0800f5e3 	.word	0x0800f5e3
 800cec8:	08009551 	.word	0x08009551
 800cecc:	0800cc25 	.word	0x0800cc25
 800ced0:	0800f5df 	.word	0x0800f5df

0800ced4 <__sfputc_r>:
 800ced4:	6893      	ldr	r3, [r2, #8]
 800ced6:	3b01      	subs	r3, #1
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	6093      	str	r3, [r2, #8]
 800cedc:	b410      	push	{r4}
 800cede:	da08      	bge.n	800cef2 <__sfputc_r+0x1e>
 800cee0:	6994      	ldr	r4, [r2, #24]
 800cee2:	42a3      	cmp	r3, r4
 800cee4:	db01      	blt.n	800ceea <__sfputc_r+0x16>
 800cee6:	290a      	cmp	r1, #10
 800cee8:	d103      	bne.n	800cef2 <__sfputc_r+0x1e>
 800ceea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceee:	f7fd ba9a 	b.w	800a426 <__swbuf_r>
 800cef2:	6813      	ldr	r3, [r2, #0]
 800cef4:	1c58      	adds	r0, r3, #1
 800cef6:	6010      	str	r0, [r2, #0]
 800cef8:	4608      	mov	r0, r1
 800cefa:	7019      	strb	r1, [r3, #0]
 800cefc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <__sfputs_r>:
 800cf02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf04:	4606      	mov	r6, r0
 800cf06:	460f      	mov	r7, r1
 800cf08:	4614      	mov	r4, r2
 800cf0a:	18d5      	adds	r5, r2, r3
 800cf0c:	42ac      	cmp	r4, r5
 800cf0e:	d101      	bne.n	800cf14 <__sfputs_r+0x12>
 800cf10:	2000      	movs	r0, #0
 800cf12:	e007      	b.n	800cf24 <__sfputs_r+0x22>
 800cf14:	463a      	mov	r2, r7
 800cf16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7ff ffda 	bl	800ced4 <__sfputc_r>
 800cf20:	1c43      	adds	r3, r0, #1
 800cf22:	d1f3      	bne.n	800cf0c <__sfputs_r+0xa>
 800cf24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cf28 <_vfiprintf_r>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	460d      	mov	r5, r1
 800cf2e:	b09d      	sub	sp, #116	; 0x74
 800cf30:	4614      	mov	r4, r2
 800cf32:	4698      	mov	r8, r3
 800cf34:	4606      	mov	r6, r0
 800cf36:	b118      	cbz	r0, 800cf40 <_vfiprintf_r+0x18>
 800cf38:	6a03      	ldr	r3, [r0, #32]
 800cf3a:	b90b      	cbnz	r3, 800cf40 <_vfiprintf_r+0x18>
 800cf3c:	f7fd f96c 	bl	800a218 <__sinit>
 800cf40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf42:	07d9      	lsls	r1, r3, #31
 800cf44:	d405      	bmi.n	800cf52 <_vfiprintf_r+0x2a>
 800cf46:	89ab      	ldrh	r3, [r5, #12]
 800cf48:	059a      	lsls	r2, r3, #22
 800cf4a:	d402      	bmi.n	800cf52 <_vfiprintf_r+0x2a>
 800cf4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf4e:	f7fd fb7c 	bl	800a64a <__retarget_lock_acquire_recursive>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	071b      	lsls	r3, r3, #28
 800cf56:	d501      	bpl.n	800cf5c <_vfiprintf_r+0x34>
 800cf58:	692b      	ldr	r3, [r5, #16]
 800cf5a:	b99b      	cbnz	r3, 800cf84 <_vfiprintf_r+0x5c>
 800cf5c:	4629      	mov	r1, r5
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7fd fa9e 	bl	800a4a0 <__swsetup_r>
 800cf64:	b170      	cbz	r0, 800cf84 <_vfiprintf_r+0x5c>
 800cf66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf68:	07dc      	lsls	r4, r3, #31
 800cf6a:	d504      	bpl.n	800cf76 <_vfiprintf_r+0x4e>
 800cf6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf70:	b01d      	add	sp, #116	; 0x74
 800cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf76:	89ab      	ldrh	r3, [r5, #12]
 800cf78:	0598      	lsls	r0, r3, #22
 800cf7a:	d4f7      	bmi.n	800cf6c <_vfiprintf_r+0x44>
 800cf7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf7e:	f7fd fb65 	bl	800a64c <__retarget_lock_release_recursive>
 800cf82:	e7f3      	b.n	800cf6c <_vfiprintf_r+0x44>
 800cf84:	2300      	movs	r3, #0
 800cf86:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf8a:	f04f 0901 	mov.w	r9, #1
 800cf8e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800d148 <_vfiprintf_r+0x220>
 800cf92:	9309      	str	r3, [sp, #36]	; 0x24
 800cf94:	2320      	movs	r3, #32
 800cf96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf9a:	2330      	movs	r3, #48	; 0x30
 800cf9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cfa0:	4623      	mov	r3, r4
 800cfa2:	469a      	mov	sl, r3
 800cfa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfa8:	b10a      	cbz	r2, 800cfae <_vfiprintf_r+0x86>
 800cfaa:	2a25      	cmp	r2, #37	; 0x25
 800cfac:	d1f9      	bne.n	800cfa2 <_vfiprintf_r+0x7a>
 800cfae:	ebba 0b04 	subs.w	fp, sl, r4
 800cfb2:	d00b      	beq.n	800cfcc <_vfiprintf_r+0xa4>
 800cfb4:	465b      	mov	r3, fp
 800cfb6:	4622      	mov	r2, r4
 800cfb8:	4629      	mov	r1, r5
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff ffa1 	bl	800cf02 <__sfputs_r>
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f000 80a9 	beq.w	800d118 <_vfiprintf_r+0x1f0>
 800cfc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfc8:	445a      	add	r2, fp
 800cfca:	9209      	str	r2, [sp, #36]	; 0x24
 800cfcc:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	f000 80a1 	beq.w	800d118 <_vfiprintf_r+0x1f0>
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cfdc:	f10a 0a01 	add.w	sl, sl, #1
 800cfe0:	9304      	str	r3, [sp, #16]
 800cfe2:	9307      	str	r3, [sp, #28]
 800cfe4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfe8:	931a      	str	r3, [sp, #104]	; 0x68
 800cfea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfee:	4654      	mov	r4, sl
 800cff0:	2205      	movs	r2, #5
 800cff2:	4855      	ldr	r0, [pc, #340]	; (800d148 <_vfiprintf_r+0x220>)
 800cff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cff8:	f7fd fb29 	bl	800a64e <memchr>
 800cffc:	9a04      	ldr	r2, [sp, #16]
 800cffe:	b9d8      	cbnz	r0, 800d038 <_vfiprintf_r+0x110>
 800d000:	06d1      	lsls	r1, r2, #27
 800d002:	bf44      	itt	mi
 800d004:	2320      	movmi	r3, #32
 800d006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d00a:	0713      	lsls	r3, r2, #28
 800d00c:	bf44      	itt	mi
 800d00e:	232b      	movmi	r3, #43	; 0x2b
 800d010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d014:	f89a 3000 	ldrb.w	r3, [sl]
 800d018:	2b2a      	cmp	r3, #42	; 0x2a
 800d01a:	d015      	beq.n	800d048 <_vfiprintf_r+0x120>
 800d01c:	9a07      	ldr	r2, [sp, #28]
 800d01e:	4654      	mov	r4, sl
 800d020:	2000      	movs	r0, #0
 800d022:	f04f 0c0a 	mov.w	ip, #10
 800d026:	4621      	mov	r1, r4
 800d028:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d02c:	3b30      	subs	r3, #48	; 0x30
 800d02e:	2b09      	cmp	r3, #9
 800d030:	d94d      	bls.n	800d0ce <_vfiprintf_r+0x1a6>
 800d032:	b1b0      	cbz	r0, 800d062 <_vfiprintf_r+0x13a>
 800d034:	9207      	str	r2, [sp, #28]
 800d036:	e014      	b.n	800d062 <_vfiprintf_r+0x13a>
 800d038:	eba0 0308 	sub.w	r3, r0, r8
 800d03c:	46a2      	mov	sl, r4
 800d03e:	fa09 f303 	lsl.w	r3, r9, r3
 800d042:	4313      	orrs	r3, r2
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	e7d2      	b.n	800cfee <_vfiprintf_r+0xc6>
 800d048:	9b03      	ldr	r3, [sp, #12]
 800d04a:	1d19      	adds	r1, r3, #4
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	9103      	str	r1, [sp, #12]
 800d052:	bfbb      	ittet	lt
 800d054:	425b      	neglt	r3, r3
 800d056:	f042 0202 	orrlt.w	r2, r2, #2
 800d05a:	9307      	strge	r3, [sp, #28]
 800d05c:	9307      	strlt	r3, [sp, #28]
 800d05e:	bfb8      	it	lt
 800d060:	9204      	strlt	r2, [sp, #16]
 800d062:	7823      	ldrb	r3, [r4, #0]
 800d064:	2b2e      	cmp	r3, #46	; 0x2e
 800d066:	d10c      	bne.n	800d082 <_vfiprintf_r+0x15a>
 800d068:	7863      	ldrb	r3, [r4, #1]
 800d06a:	2b2a      	cmp	r3, #42	; 0x2a
 800d06c:	d134      	bne.n	800d0d8 <_vfiprintf_r+0x1b0>
 800d06e:	9b03      	ldr	r3, [sp, #12]
 800d070:	3402      	adds	r4, #2
 800d072:	1d1a      	adds	r2, r3, #4
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	9203      	str	r2, [sp, #12]
 800d07a:	bfb8      	it	lt
 800d07c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d080:	9305      	str	r3, [sp, #20]
 800d082:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d158 <_vfiprintf_r+0x230>
 800d086:	2203      	movs	r2, #3
 800d088:	7821      	ldrb	r1, [r4, #0]
 800d08a:	4650      	mov	r0, sl
 800d08c:	f7fd fadf 	bl	800a64e <memchr>
 800d090:	b138      	cbz	r0, 800d0a2 <_vfiprintf_r+0x17a>
 800d092:	eba0 000a 	sub.w	r0, r0, sl
 800d096:	2240      	movs	r2, #64	; 0x40
 800d098:	9b04      	ldr	r3, [sp, #16]
 800d09a:	3401      	adds	r4, #1
 800d09c:	4082      	lsls	r2, r0
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	9304      	str	r3, [sp, #16]
 800d0a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0a6:	2206      	movs	r2, #6
 800d0a8:	4828      	ldr	r0, [pc, #160]	; (800d14c <_vfiprintf_r+0x224>)
 800d0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d0ae:	f7fd face 	bl	800a64e <memchr>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	d03f      	beq.n	800d136 <_vfiprintf_r+0x20e>
 800d0b6:	4b26      	ldr	r3, [pc, #152]	; (800d150 <_vfiprintf_r+0x228>)
 800d0b8:	bb1b      	cbnz	r3, 800d102 <_vfiprintf_r+0x1da>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	3307      	adds	r3, #7
 800d0be:	f023 0307 	bic.w	r3, r3, #7
 800d0c2:	3308      	adds	r3, #8
 800d0c4:	9303      	str	r3, [sp, #12]
 800d0c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c8:	443b      	add	r3, r7
 800d0ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d0cc:	e768      	b.n	800cfa0 <_vfiprintf_r+0x78>
 800d0ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	e7a6      	b.n	800d026 <_vfiprintf_r+0xfe>
 800d0d8:	2300      	movs	r3, #0
 800d0da:	3401      	adds	r4, #1
 800d0dc:	f04f 0c0a 	mov.w	ip, #10
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	9305      	str	r3, [sp, #20]
 800d0e4:	4620      	mov	r0, r4
 800d0e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0ea:	3a30      	subs	r2, #48	; 0x30
 800d0ec:	2a09      	cmp	r2, #9
 800d0ee:	d903      	bls.n	800d0f8 <_vfiprintf_r+0x1d0>
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d0c6      	beq.n	800d082 <_vfiprintf_r+0x15a>
 800d0f4:	9105      	str	r1, [sp, #20]
 800d0f6:	e7c4      	b.n	800d082 <_vfiprintf_r+0x15a>
 800d0f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0fc:	4604      	mov	r4, r0
 800d0fe:	2301      	movs	r3, #1
 800d100:	e7f0      	b.n	800d0e4 <_vfiprintf_r+0x1bc>
 800d102:	ab03      	add	r3, sp, #12
 800d104:	462a      	mov	r2, r5
 800d106:	a904      	add	r1, sp, #16
 800d108:	4630      	mov	r0, r6
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	4b11      	ldr	r3, [pc, #68]	; (800d154 <_vfiprintf_r+0x22c>)
 800d10e:	f7fc fa1f 	bl	8009550 <_printf_float>
 800d112:	4607      	mov	r7, r0
 800d114:	1c78      	adds	r0, r7, #1
 800d116:	d1d6      	bne.n	800d0c6 <_vfiprintf_r+0x19e>
 800d118:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d11a:	07d9      	lsls	r1, r3, #31
 800d11c:	d405      	bmi.n	800d12a <_vfiprintf_r+0x202>
 800d11e:	89ab      	ldrh	r3, [r5, #12]
 800d120:	059a      	lsls	r2, r3, #22
 800d122:	d402      	bmi.n	800d12a <_vfiprintf_r+0x202>
 800d124:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d126:	f7fd fa91 	bl	800a64c <__retarget_lock_release_recursive>
 800d12a:	89ab      	ldrh	r3, [r5, #12]
 800d12c:	065b      	lsls	r3, r3, #25
 800d12e:	f53f af1d 	bmi.w	800cf6c <_vfiprintf_r+0x44>
 800d132:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d134:	e71c      	b.n	800cf70 <_vfiprintf_r+0x48>
 800d136:	ab03      	add	r3, sp, #12
 800d138:	462a      	mov	r2, r5
 800d13a:	a904      	add	r1, sp, #16
 800d13c:	4630      	mov	r0, r6
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	4b04      	ldr	r3, [pc, #16]	; (800d154 <_vfiprintf_r+0x22c>)
 800d142:	f7fc fcad 	bl	8009aa0 <_printf_i>
 800d146:	e7e4      	b.n	800d112 <_vfiprintf_r+0x1ea>
 800d148:	0800f5d9 	.word	0x0800f5d9
 800d14c:	0800f5e3 	.word	0x0800f5e3
 800d150:	08009551 	.word	0x08009551
 800d154:	0800cf03 	.word	0x0800cf03
 800d158:	0800f5df 	.word	0x0800f5df

0800d15c <__sflush_r>:
 800d15c:	898a      	ldrh	r2, [r1, #12]
 800d15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d162:	4605      	mov	r5, r0
 800d164:	0710      	lsls	r0, r2, #28
 800d166:	460c      	mov	r4, r1
 800d168:	d458      	bmi.n	800d21c <__sflush_r+0xc0>
 800d16a:	684b      	ldr	r3, [r1, #4]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	dc05      	bgt.n	800d17c <__sflush_r+0x20>
 800d170:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d172:	2b00      	cmp	r3, #0
 800d174:	dc02      	bgt.n	800d17c <__sflush_r+0x20>
 800d176:	2000      	movs	r0, #0
 800d178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d17c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d17e:	2e00      	cmp	r6, #0
 800d180:	d0f9      	beq.n	800d176 <__sflush_r+0x1a>
 800d182:	2300      	movs	r3, #0
 800d184:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d188:	682f      	ldr	r7, [r5, #0]
 800d18a:	6a21      	ldr	r1, [r4, #32]
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	d032      	beq.n	800d1f6 <__sflush_r+0x9a>
 800d190:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d192:	89a3      	ldrh	r3, [r4, #12]
 800d194:	075a      	lsls	r2, r3, #29
 800d196:	d505      	bpl.n	800d1a4 <__sflush_r+0x48>
 800d198:	6863      	ldr	r3, [r4, #4]
 800d19a:	1ac0      	subs	r0, r0, r3
 800d19c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d19e:	b10b      	cbz	r3, 800d1a4 <__sflush_r+0x48>
 800d1a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d1a2:	1ac0      	subs	r0, r0, r3
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4602      	mov	r2, r0
 800d1a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	6a21      	ldr	r1, [r4, #32]
 800d1ae:	47b0      	blx	r6
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	89a3      	ldrh	r3, [r4, #12]
 800d1b4:	d106      	bne.n	800d1c4 <__sflush_r+0x68>
 800d1b6:	6829      	ldr	r1, [r5, #0]
 800d1b8:	291d      	cmp	r1, #29
 800d1ba:	d82b      	bhi.n	800d214 <__sflush_r+0xb8>
 800d1bc:	4a28      	ldr	r2, [pc, #160]	; (800d260 <__sflush_r+0x104>)
 800d1be:	410a      	asrs	r2, r1
 800d1c0:	07d6      	lsls	r6, r2, #31
 800d1c2:	d427      	bmi.n	800d214 <__sflush_r+0xb8>
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	04d9      	lsls	r1, r3, #19
 800d1c8:	6062      	str	r2, [r4, #4]
 800d1ca:	6922      	ldr	r2, [r4, #16]
 800d1cc:	6022      	str	r2, [r4, #0]
 800d1ce:	d504      	bpl.n	800d1da <__sflush_r+0x7e>
 800d1d0:	1c42      	adds	r2, r0, #1
 800d1d2:	d101      	bne.n	800d1d8 <__sflush_r+0x7c>
 800d1d4:	682b      	ldr	r3, [r5, #0]
 800d1d6:	b903      	cbnz	r3, 800d1da <__sflush_r+0x7e>
 800d1d8:	6560      	str	r0, [r4, #84]	; 0x54
 800d1da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1dc:	602f      	str	r7, [r5, #0]
 800d1de:	2900      	cmp	r1, #0
 800d1e0:	d0c9      	beq.n	800d176 <__sflush_r+0x1a>
 800d1e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1e6:	4299      	cmp	r1, r3
 800d1e8:	d002      	beq.n	800d1f0 <__sflush_r+0x94>
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f7fe f8c4 	bl	800b378 <_free_r>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	6360      	str	r0, [r4, #52]	; 0x34
 800d1f4:	e7c0      	b.n	800d178 <__sflush_r+0x1c>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	47b0      	blx	r6
 800d1fc:	1c41      	adds	r1, r0, #1
 800d1fe:	d1c8      	bne.n	800d192 <__sflush_r+0x36>
 800d200:	682b      	ldr	r3, [r5, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d0c5      	beq.n	800d192 <__sflush_r+0x36>
 800d206:	2b1d      	cmp	r3, #29
 800d208:	d001      	beq.n	800d20e <__sflush_r+0xb2>
 800d20a:	2b16      	cmp	r3, #22
 800d20c:	d101      	bne.n	800d212 <__sflush_r+0xb6>
 800d20e:	602f      	str	r7, [r5, #0]
 800d210:	e7b1      	b.n	800d176 <__sflush_r+0x1a>
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	e7ad      	b.n	800d178 <__sflush_r+0x1c>
 800d21c:	690f      	ldr	r7, [r1, #16]
 800d21e:	2f00      	cmp	r7, #0
 800d220:	d0a9      	beq.n	800d176 <__sflush_r+0x1a>
 800d222:	0793      	lsls	r3, r2, #30
 800d224:	680e      	ldr	r6, [r1, #0]
 800d226:	600f      	str	r7, [r1, #0]
 800d228:	bf0c      	ite	eq
 800d22a:	694b      	ldreq	r3, [r1, #20]
 800d22c:	2300      	movne	r3, #0
 800d22e:	eba6 0807 	sub.w	r8, r6, r7
 800d232:	608b      	str	r3, [r1, #8]
 800d234:	f1b8 0f00 	cmp.w	r8, #0
 800d238:	dd9d      	ble.n	800d176 <__sflush_r+0x1a>
 800d23a:	4643      	mov	r3, r8
 800d23c:	463a      	mov	r2, r7
 800d23e:	6a21      	ldr	r1, [r4, #32]
 800d240:	4628      	mov	r0, r5
 800d242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d244:	47b0      	blx	r6
 800d246:	2800      	cmp	r0, #0
 800d248:	dc06      	bgt.n	800d258 <__sflush_r+0xfc>
 800d24a:	89a3      	ldrh	r3, [r4, #12]
 800d24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d254:	81a3      	strh	r3, [r4, #12]
 800d256:	e78f      	b.n	800d178 <__sflush_r+0x1c>
 800d258:	4407      	add	r7, r0
 800d25a:	eba8 0800 	sub.w	r8, r8, r0
 800d25e:	e7e9      	b.n	800d234 <__sflush_r+0xd8>
 800d260:	dfbffffe 	.word	0xdfbffffe

0800d264 <_fflush_r>:
 800d264:	b538      	push	{r3, r4, r5, lr}
 800d266:	690b      	ldr	r3, [r1, #16]
 800d268:	4605      	mov	r5, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	b913      	cbnz	r3, 800d274 <_fflush_r+0x10>
 800d26e:	2500      	movs	r5, #0
 800d270:	4628      	mov	r0, r5
 800d272:	bd38      	pop	{r3, r4, r5, pc}
 800d274:	b118      	cbz	r0, 800d27e <_fflush_r+0x1a>
 800d276:	6a03      	ldr	r3, [r0, #32]
 800d278:	b90b      	cbnz	r3, 800d27e <_fflush_r+0x1a>
 800d27a:	f7fc ffcd 	bl	800a218 <__sinit>
 800d27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d0f3      	beq.n	800d26e <_fflush_r+0xa>
 800d286:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d288:	07d0      	lsls	r0, r2, #31
 800d28a:	d404      	bmi.n	800d296 <_fflush_r+0x32>
 800d28c:	0599      	lsls	r1, r3, #22
 800d28e:	d402      	bmi.n	800d296 <_fflush_r+0x32>
 800d290:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d292:	f7fd f9da 	bl	800a64a <__retarget_lock_acquire_recursive>
 800d296:	4628      	mov	r0, r5
 800d298:	4621      	mov	r1, r4
 800d29a:	f7ff ff5f 	bl	800d15c <__sflush_r>
 800d29e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2a0:	4605      	mov	r5, r0
 800d2a2:	07da      	lsls	r2, r3, #31
 800d2a4:	d4e4      	bmi.n	800d270 <_fflush_r+0xc>
 800d2a6:	89a3      	ldrh	r3, [r4, #12]
 800d2a8:	059b      	lsls	r3, r3, #22
 800d2aa:	d4e1      	bmi.n	800d270 <_fflush_r+0xc>
 800d2ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2ae:	f7fd f9cd 	bl	800a64c <__retarget_lock_release_recursive>
 800d2b2:	e7dd      	b.n	800d270 <_fflush_r+0xc>

0800d2b4 <__swhatbuf_r>:
 800d2b4:	b570      	push	{r4, r5, r6, lr}
 800d2b6:	460c      	mov	r4, r1
 800d2b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2bc:	b096      	sub	sp, #88	; 0x58
 800d2be:	4615      	mov	r5, r2
 800d2c0:	2900      	cmp	r1, #0
 800d2c2:	461e      	mov	r6, r3
 800d2c4:	da0c      	bge.n	800d2e0 <__swhatbuf_r+0x2c>
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d2ce:	bf0c      	ite	eq
 800d2d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d2d4:	2340      	movne	r3, #64	; 0x40
 800d2d6:	2000      	movs	r0, #0
 800d2d8:	6031      	str	r1, [r6, #0]
 800d2da:	602b      	str	r3, [r5, #0]
 800d2dc:	b016      	add	sp, #88	; 0x58
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	466a      	mov	r2, sp
 800d2e2:	f000 f875 	bl	800d3d0 <_fstat_r>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	dbed      	blt.n	800d2c6 <__swhatbuf_r+0x12>
 800d2ea:	9901      	ldr	r1, [sp, #4]
 800d2ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d2f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d2f4:	4259      	negs	r1, r3
 800d2f6:	4159      	adcs	r1, r3
 800d2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2fc:	e7eb      	b.n	800d2d6 <__swhatbuf_r+0x22>

0800d2fe <__smakebuf_r>:
 800d2fe:	898b      	ldrh	r3, [r1, #12]
 800d300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d302:	079d      	lsls	r5, r3, #30
 800d304:	4606      	mov	r6, r0
 800d306:	460c      	mov	r4, r1
 800d308:	d507      	bpl.n	800d31a <__smakebuf_r+0x1c>
 800d30a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	6123      	str	r3, [r4, #16]
 800d312:	2301      	movs	r3, #1
 800d314:	6163      	str	r3, [r4, #20]
 800d316:	b002      	add	sp, #8
 800d318:	bd70      	pop	{r4, r5, r6, pc}
 800d31a:	ab01      	add	r3, sp, #4
 800d31c:	466a      	mov	r2, sp
 800d31e:	f7ff ffc9 	bl	800d2b4 <__swhatbuf_r>
 800d322:	9900      	ldr	r1, [sp, #0]
 800d324:	4605      	mov	r5, r0
 800d326:	4630      	mov	r0, r6
 800d328:	f7fe f89a 	bl	800b460 <_malloc_r>
 800d32c:	b948      	cbnz	r0, 800d342 <__smakebuf_r+0x44>
 800d32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d332:	059a      	lsls	r2, r3, #22
 800d334:	d4ef      	bmi.n	800d316 <__smakebuf_r+0x18>
 800d336:	f023 0303 	bic.w	r3, r3, #3
 800d33a:	f043 0302 	orr.w	r3, r3, #2
 800d33e:	81a3      	strh	r3, [r4, #12]
 800d340:	e7e3      	b.n	800d30a <__smakebuf_r+0xc>
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	6020      	str	r0, [r4, #0]
 800d346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d34a:	6120      	str	r0, [r4, #16]
 800d34c:	81a3      	strh	r3, [r4, #12]
 800d34e:	9b00      	ldr	r3, [sp, #0]
 800d350:	6163      	str	r3, [r4, #20]
 800d352:	9b01      	ldr	r3, [sp, #4]
 800d354:	b15b      	cbz	r3, 800d36e <__smakebuf_r+0x70>
 800d356:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d35a:	4630      	mov	r0, r6
 800d35c:	f000 f84a 	bl	800d3f4 <_isatty_r>
 800d360:	b128      	cbz	r0, 800d36e <__smakebuf_r+0x70>
 800d362:	89a3      	ldrh	r3, [r4, #12]
 800d364:	f023 0303 	bic.w	r3, r3, #3
 800d368:	f043 0301 	orr.w	r3, r3, #1
 800d36c:	81a3      	strh	r3, [r4, #12]
 800d36e:	89a3      	ldrh	r3, [r4, #12]
 800d370:	431d      	orrs	r5, r3
 800d372:	81a5      	strh	r5, [r4, #12]
 800d374:	e7cf      	b.n	800d316 <__smakebuf_r+0x18>

0800d376 <memmove>:
 800d376:	4288      	cmp	r0, r1
 800d378:	b510      	push	{r4, lr}
 800d37a:	eb01 0402 	add.w	r4, r1, r2
 800d37e:	d902      	bls.n	800d386 <memmove+0x10>
 800d380:	4284      	cmp	r4, r0
 800d382:	4623      	mov	r3, r4
 800d384:	d807      	bhi.n	800d396 <memmove+0x20>
 800d386:	1e43      	subs	r3, r0, #1
 800d388:	42a1      	cmp	r1, r4
 800d38a:	d008      	beq.n	800d39e <memmove+0x28>
 800d38c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d390:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d394:	e7f8      	b.n	800d388 <memmove+0x12>
 800d396:	4402      	add	r2, r0
 800d398:	4601      	mov	r1, r0
 800d39a:	428a      	cmp	r2, r1
 800d39c:	d100      	bne.n	800d3a0 <memmove+0x2a>
 800d39e:	bd10      	pop	{r4, pc}
 800d3a0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d3a4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d3a8:	e7f7      	b.n	800d39a <memmove+0x24>

0800d3aa <strncmp>:
 800d3aa:	b510      	push	{r4, lr}
 800d3ac:	b16a      	cbz	r2, 800d3ca <strncmp+0x20>
 800d3ae:	3901      	subs	r1, #1
 800d3b0:	1884      	adds	r4, r0, r2
 800d3b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d103      	bne.n	800d3c6 <strncmp+0x1c>
 800d3be:	42a0      	cmp	r0, r4
 800d3c0:	d001      	beq.n	800d3c6 <strncmp+0x1c>
 800d3c2:	2a00      	cmp	r2, #0
 800d3c4:	d1f5      	bne.n	800d3b2 <strncmp+0x8>
 800d3c6:	1ad0      	subs	r0, r2, r3
 800d3c8:	bd10      	pop	{r4, pc}
 800d3ca:	4610      	mov	r0, r2
 800d3cc:	e7fc      	b.n	800d3c8 <strncmp+0x1e>
	...

0800d3d0 <_fstat_r>:
 800d3d0:	b538      	push	{r3, r4, r5, lr}
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	4d06      	ldr	r5, [pc, #24]	; (800d3f0 <_fstat_r+0x20>)
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4608      	mov	r0, r1
 800d3da:	4611      	mov	r1, r2
 800d3dc:	602b      	str	r3, [r5, #0]
 800d3de:	f7f4 fdf4 	bl	8001fca <_fstat>
 800d3e2:	1c43      	adds	r3, r0, #1
 800d3e4:	d102      	bne.n	800d3ec <_fstat_r+0x1c>
 800d3e6:	682b      	ldr	r3, [r5, #0]
 800d3e8:	b103      	cbz	r3, 800d3ec <_fstat_r+0x1c>
 800d3ea:	6023      	str	r3, [r4, #0]
 800d3ec:	bd38      	pop	{r3, r4, r5, pc}
 800d3ee:	bf00      	nop
 800d3f0:	20001f18 	.word	0x20001f18

0800d3f4 <_isatty_r>:
 800d3f4:	b538      	push	{r3, r4, r5, lr}
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	4d05      	ldr	r5, [pc, #20]	; (800d410 <_isatty_r+0x1c>)
 800d3fa:	4604      	mov	r4, r0
 800d3fc:	4608      	mov	r0, r1
 800d3fe:	602b      	str	r3, [r5, #0]
 800d400:	f7f4 fdf3 	bl	8001fea <_isatty>
 800d404:	1c43      	adds	r3, r0, #1
 800d406:	d102      	bne.n	800d40e <_isatty_r+0x1a>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b103      	cbz	r3, 800d40e <_isatty_r+0x1a>
 800d40c:	6023      	str	r3, [r4, #0]
 800d40e:	bd38      	pop	{r3, r4, r5, pc}
 800d410:	20001f18 	.word	0x20001f18

0800d414 <_sbrk_r>:
 800d414:	b538      	push	{r3, r4, r5, lr}
 800d416:	2300      	movs	r3, #0
 800d418:	4d05      	ldr	r5, [pc, #20]	; (800d430 <_sbrk_r+0x1c>)
 800d41a:	4604      	mov	r4, r0
 800d41c:	4608      	mov	r0, r1
 800d41e:	602b      	str	r3, [r5, #0]
 800d420:	f7f4 fdfc 	bl	800201c <_sbrk>
 800d424:	1c43      	adds	r3, r0, #1
 800d426:	d102      	bne.n	800d42e <_sbrk_r+0x1a>
 800d428:	682b      	ldr	r3, [r5, #0]
 800d42a:	b103      	cbz	r3, 800d42e <_sbrk_r+0x1a>
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	bd38      	pop	{r3, r4, r5, pc}
 800d430:	20001f18 	.word	0x20001f18

0800d434 <memcpy>:
 800d434:	440a      	add	r2, r1
 800d436:	1e43      	subs	r3, r0, #1
 800d438:	4291      	cmp	r1, r2
 800d43a:	d100      	bne.n	800d43e <memcpy+0xa>
 800d43c:	4770      	bx	lr
 800d43e:	b510      	push	{r4, lr}
 800d440:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d444:	4291      	cmp	r1, r2
 800d446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d44a:	d1f9      	bne.n	800d440 <memcpy+0xc>
 800d44c:	bd10      	pop	{r4, pc}
	...

0800d450 <nan>:
 800d450:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d458 <nan+0x8>
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	00000000 	.word	0x00000000
 800d45c:	7ff80000 	.word	0x7ff80000

0800d460 <__assert_func>:
 800d460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d462:	4614      	mov	r4, r2
 800d464:	461a      	mov	r2, r3
 800d466:	4b09      	ldr	r3, [pc, #36]	; (800d48c <__assert_func+0x2c>)
 800d468:	4605      	mov	r5, r0
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	68d8      	ldr	r0, [r3, #12]
 800d46e:	b14c      	cbz	r4, 800d484 <__assert_func+0x24>
 800d470:	4b07      	ldr	r3, [pc, #28]	; (800d490 <__assert_func+0x30>)
 800d472:	9100      	str	r1, [sp, #0]
 800d474:	4907      	ldr	r1, [pc, #28]	; (800d494 <__assert_func+0x34>)
 800d476:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d47a:	462b      	mov	r3, r5
 800d47c:	f000 fbc8 	bl	800dc10 <fiprintf>
 800d480:	f000 fbd8 	bl	800dc34 <abort>
 800d484:	4b04      	ldr	r3, [pc, #16]	; (800d498 <__assert_func+0x38>)
 800d486:	461c      	mov	r4, r3
 800d488:	e7f3      	b.n	800d472 <__assert_func+0x12>
 800d48a:	bf00      	nop
 800d48c:	20000074 	.word	0x20000074
 800d490:	0800f5f2 	.word	0x0800f5f2
 800d494:	0800f5ff 	.word	0x0800f5ff
 800d498:	0800f62d 	.word	0x0800f62d

0800d49c <_calloc_r>:
 800d49c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d49e:	fba1 2402 	umull	r2, r4, r1, r2
 800d4a2:	b94c      	cbnz	r4, 800d4b8 <_calloc_r+0x1c>
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	9201      	str	r2, [sp, #4]
 800d4a8:	f7fd ffda 	bl	800b460 <_malloc_r>
 800d4ac:	9a01      	ldr	r2, [sp, #4]
 800d4ae:	4605      	mov	r5, r0
 800d4b0:	b930      	cbnz	r0, 800d4c0 <_calloc_r+0x24>
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	b003      	add	sp, #12
 800d4b6:	bd30      	pop	{r4, r5, pc}
 800d4b8:	220c      	movs	r2, #12
 800d4ba:	2500      	movs	r5, #0
 800d4bc:	6002      	str	r2, [r0, #0]
 800d4be:	e7f8      	b.n	800d4b2 <_calloc_r+0x16>
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	f7fd f845 	bl	800a550 <memset>
 800d4c6:	e7f4      	b.n	800d4b2 <_calloc_r+0x16>

0800d4c8 <rshift>:
 800d4c8:	6903      	ldr	r3, [r0, #16]
 800d4ca:	114a      	asrs	r2, r1, #5
 800d4cc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d4d4:	f100 0414 	add.w	r4, r0, #20
 800d4d8:	dd45      	ble.n	800d566 <rshift+0x9e>
 800d4da:	f011 011f 	ands.w	r1, r1, #31
 800d4de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d4e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d4e6:	d10c      	bne.n	800d502 <rshift+0x3a>
 800d4e8:	f100 0710 	add.w	r7, r0, #16
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	42b1      	cmp	r1, r6
 800d4f0:	d334      	bcc.n	800d55c <rshift+0x94>
 800d4f2:	1a9b      	subs	r3, r3, r2
 800d4f4:	1eea      	subs	r2, r5, #3
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	4296      	cmp	r6, r2
 800d4fa:	bf38      	it	cc
 800d4fc:	2300      	movcc	r3, #0
 800d4fe:	4423      	add	r3, r4
 800d500:	e015      	b.n	800d52e <rshift+0x66>
 800d502:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d506:	f1c1 0820 	rsb	r8, r1, #32
 800d50a:	f105 0e04 	add.w	lr, r5, #4
 800d50e:	46a1      	mov	r9, r4
 800d510:	40cf      	lsrs	r7, r1
 800d512:	4576      	cmp	r6, lr
 800d514:	46f4      	mov	ip, lr
 800d516:	d815      	bhi.n	800d544 <rshift+0x7c>
 800d518:	1a9a      	subs	r2, r3, r2
 800d51a:	3501      	adds	r5, #1
 800d51c:	0092      	lsls	r2, r2, #2
 800d51e:	3a04      	subs	r2, #4
 800d520:	42ae      	cmp	r6, r5
 800d522:	bf38      	it	cc
 800d524:	2200      	movcc	r2, #0
 800d526:	18a3      	adds	r3, r4, r2
 800d528:	50a7      	str	r7, [r4, r2]
 800d52a:	b107      	cbz	r7, 800d52e <rshift+0x66>
 800d52c:	3304      	adds	r3, #4
 800d52e:	1b1a      	subs	r2, r3, r4
 800d530:	42a3      	cmp	r3, r4
 800d532:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d536:	bf08      	it	eq
 800d538:	2300      	moveq	r3, #0
 800d53a:	6102      	str	r2, [r0, #16]
 800d53c:	bf08      	it	eq
 800d53e:	6143      	streq	r3, [r0, #20]
 800d540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d544:	f8dc c000 	ldr.w	ip, [ip]
 800d548:	fa0c fc08 	lsl.w	ip, ip, r8
 800d54c:	ea4c 0707 	orr.w	r7, ip, r7
 800d550:	f849 7b04 	str.w	r7, [r9], #4
 800d554:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d558:	40cf      	lsrs	r7, r1
 800d55a:	e7da      	b.n	800d512 <rshift+0x4a>
 800d55c:	f851 cb04 	ldr.w	ip, [r1], #4
 800d560:	f847 cf04 	str.w	ip, [r7, #4]!
 800d564:	e7c3      	b.n	800d4ee <rshift+0x26>
 800d566:	4623      	mov	r3, r4
 800d568:	e7e1      	b.n	800d52e <rshift+0x66>

0800d56a <__hexdig_fun>:
 800d56a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d56e:	2b09      	cmp	r3, #9
 800d570:	d802      	bhi.n	800d578 <__hexdig_fun+0xe>
 800d572:	3820      	subs	r0, #32
 800d574:	b2c0      	uxtb	r0, r0
 800d576:	4770      	bx	lr
 800d578:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d57c:	2b05      	cmp	r3, #5
 800d57e:	d801      	bhi.n	800d584 <__hexdig_fun+0x1a>
 800d580:	3847      	subs	r0, #71	; 0x47
 800d582:	e7f7      	b.n	800d574 <__hexdig_fun+0xa>
 800d584:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d588:	2b05      	cmp	r3, #5
 800d58a:	d801      	bhi.n	800d590 <__hexdig_fun+0x26>
 800d58c:	3827      	subs	r0, #39	; 0x27
 800d58e:	e7f1      	b.n	800d574 <__hexdig_fun+0xa>
 800d590:	2000      	movs	r0, #0
 800d592:	4770      	bx	lr

0800d594 <__gethex>:
 800d594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d598:	4617      	mov	r7, r2
 800d59a:	680a      	ldr	r2, [r1, #0]
 800d59c:	b085      	sub	sp, #20
 800d59e:	4681      	mov	r9, r0
 800d5a0:	f102 0b02 	add.w	fp, r2, #2
 800d5a4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d5a8:	468a      	mov	sl, r1
 800d5aa:	9302      	str	r3, [sp, #8]
 800d5ac:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d5b0:	32fe      	adds	r2, #254	; 0xfe
 800d5b2:	eb02 030b 	add.w	r3, r2, fp
 800d5b6:	46d8      	mov	r8, fp
 800d5b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d5bc:	9301      	str	r3, [sp, #4]
 800d5be:	2830      	cmp	r0, #48	; 0x30
 800d5c0:	d0f7      	beq.n	800d5b2 <__gethex+0x1e>
 800d5c2:	f7ff ffd2 	bl	800d56a <__hexdig_fun>
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d137      	bne.n	800d63c <__gethex+0xa8>
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	49a7      	ldr	r1, [pc, #668]	; (800d86c <__gethex+0x2d8>)
 800d5d0:	4640      	mov	r0, r8
 800d5d2:	f7ff feea 	bl	800d3aa <strncmp>
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d168      	bne.n	800d6ae <__gethex+0x11a>
 800d5dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d5e0:	465d      	mov	r5, fp
 800d5e2:	f7ff ffc2 	bl	800d56a <__hexdig_fun>
 800d5e6:	2800      	cmp	r0, #0
 800d5e8:	d063      	beq.n	800d6b2 <__gethex+0x11e>
 800d5ea:	465a      	mov	r2, fp
 800d5ec:	7810      	ldrb	r0, [r2, #0]
 800d5ee:	4690      	mov	r8, r2
 800d5f0:	3201      	adds	r2, #1
 800d5f2:	2830      	cmp	r0, #48	; 0x30
 800d5f4:	d0fa      	beq.n	800d5ec <__gethex+0x58>
 800d5f6:	f7ff ffb8 	bl	800d56a <__hexdig_fun>
 800d5fa:	fab0 f480 	clz	r4, r0
 800d5fe:	2301      	movs	r3, #1
 800d600:	465e      	mov	r6, fp
 800d602:	0964      	lsrs	r4, r4, #5
 800d604:	9301      	str	r3, [sp, #4]
 800d606:	4642      	mov	r2, r8
 800d608:	4615      	mov	r5, r2
 800d60a:	3201      	adds	r2, #1
 800d60c:	7828      	ldrb	r0, [r5, #0]
 800d60e:	f7ff ffac 	bl	800d56a <__hexdig_fun>
 800d612:	2800      	cmp	r0, #0
 800d614:	d1f8      	bne.n	800d608 <__gethex+0x74>
 800d616:	2201      	movs	r2, #1
 800d618:	4994      	ldr	r1, [pc, #592]	; (800d86c <__gethex+0x2d8>)
 800d61a:	4628      	mov	r0, r5
 800d61c:	f7ff fec5 	bl	800d3aa <strncmp>
 800d620:	b978      	cbnz	r0, 800d642 <__gethex+0xae>
 800d622:	b946      	cbnz	r6, 800d636 <__gethex+0xa2>
 800d624:	1c6e      	adds	r6, r5, #1
 800d626:	4632      	mov	r2, r6
 800d628:	4615      	mov	r5, r2
 800d62a:	3201      	adds	r2, #1
 800d62c:	7828      	ldrb	r0, [r5, #0]
 800d62e:	f7ff ff9c 	bl	800d56a <__hexdig_fun>
 800d632:	2800      	cmp	r0, #0
 800d634:	d1f8      	bne.n	800d628 <__gethex+0x94>
 800d636:	1b73      	subs	r3, r6, r5
 800d638:	009e      	lsls	r6, r3, #2
 800d63a:	e004      	b.n	800d646 <__gethex+0xb2>
 800d63c:	2400      	movs	r4, #0
 800d63e:	4626      	mov	r6, r4
 800d640:	e7e1      	b.n	800d606 <__gethex+0x72>
 800d642:	2e00      	cmp	r6, #0
 800d644:	d1f7      	bne.n	800d636 <__gethex+0xa2>
 800d646:	782b      	ldrb	r3, [r5, #0]
 800d648:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d64c:	2b50      	cmp	r3, #80	; 0x50
 800d64e:	d13d      	bne.n	800d6cc <__gethex+0x138>
 800d650:	786b      	ldrb	r3, [r5, #1]
 800d652:	2b2b      	cmp	r3, #43	; 0x2b
 800d654:	d02f      	beq.n	800d6b6 <__gethex+0x122>
 800d656:	2b2d      	cmp	r3, #45	; 0x2d
 800d658:	d031      	beq.n	800d6be <__gethex+0x12a>
 800d65a:	1c69      	adds	r1, r5, #1
 800d65c:	f04f 0b00 	mov.w	fp, #0
 800d660:	7808      	ldrb	r0, [r1, #0]
 800d662:	f7ff ff82 	bl	800d56a <__hexdig_fun>
 800d666:	1e42      	subs	r2, r0, #1
 800d668:	b2d2      	uxtb	r2, r2
 800d66a:	2a18      	cmp	r2, #24
 800d66c:	d82e      	bhi.n	800d6cc <__gethex+0x138>
 800d66e:	f1a0 0210 	sub.w	r2, r0, #16
 800d672:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d676:	f7ff ff78 	bl	800d56a <__hexdig_fun>
 800d67a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800d67e:	fa5f fc8c 	uxtb.w	ip, ip
 800d682:	f1bc 0f18 	cmp.w	ip, #24
 800d686:	d91d      	bls.n	800d6c4 <__gethex+0x130>
 800d688:	f1bb 0f00 	cmp.w	fp, #0
 800d68c:	d000      	beq.n	800d690 <__gethex+0xfc>
 800d68e:	4252      	negs	r2, r2
 800d690:	4416      	add	r6, r2
 800d692:	f8ca 1000 	str.w	r1, [sl]
 800d696:	b1dc      	cbz	r4, 800d6d0 <__gethex+0x13c>
 800d698:	9b01      	ldr	r3, [sp, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	bf14      	ite	ne
 800d69e:	f04f 0800 	movne.w	r8, #0
 800d6a2:	f04f 0806 	moveq.w	r8, #6
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	b005      	add	sp, #20
 800d6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ae:	4645      	mov	r5, r8
 800d6b0:	4626      	mov	r6, r4
 800d6b2:	2401      	movs	r4, #1
 800d6b4:	e7c7      	b.n	800d646 <__gethex+0xb2>
 800d6b6:	f04f 0b00 	mov.w	fp, #0
 800d6ba:	1ca9      	adds	r1, r5, #2
 800d6bc:	e7d0      	b.n	800d660 <__gethex+0xcc>
 800d6be:	f04f 0b01 	mov.w	fp, #1
 800d6c2:	e7fa      	b.n	800d6ba <__gethex+0x126>
 800d6c4:	230a      	movs	r3, #10
 800d6c6:	fb03 0002 	mla	r0, r3, r2, r0
 800d6ca:	e7d0      	b.n	800d66e <__gethex+0xda>
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	e7e0      	b.n	800d692 <__gethex+0xfe>
 800d6d0:	eba5 0308 	sub.w	r3, r5, r8
 800d6d4:	4621      	mov	r1, r4
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	2b07      	cmp	r3, #7
 800d6da:	dc0a      	bgt.n	800d6f2 <__gethex+0x15e>
 800d6dc:	4648      	mov	r0, r9
 800d6de:	f7fd ff4b 	bl	800b578 <_Balloc>
 800d6e2:	4604      	mov	r4, r0
 800d6e4:	b940      	cbnz	r0, 800d6f8 <__gethex+0x164>
 800d6e6:	4b62      	ldr	r3, [pc, #392]	; (800d870 <__gethex+0x2dc>)
 800d6e8:	4602      	mov	r2, r0
 800d6ea:	21e4      	movs	r1, #228	; 0xe4
 800d6ec:	4861      	ldr	r0, [pc, #388]	; (800d874 <__gethex+0x2e0>)
 800d6ee:	f7ff feb7 	bl	800d460 <__assert_func>
 800d6f2:	3101      	adds	r1, #1
 800d6f4:	105b      	asrs	r3, r3, #1
 800d6f6:	e7ef      	b.n	800d6d8 <__gethex+0x144>
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	f100 0a14 	add.w	sl, r0, #20
 800d6fe:	495b      	ldr	r1, [pc, #364]	; (800d86c <__gethex+0x2d8>)
 800d700:	469b      	mov	fp, r3
 800d702:	f8cd a004 	str.w	sl, [sp, #4]
 800d706:	45a8      	cmp	r8, r5
 800d708:	d342      	bcc.n	800d790 <__gethex+0x1fc>
 800d70a:	9801      	ldr	r0, [sp, #4]
 800d70c:	f840 bb04 	str.w	fp, [r0], #4
 800d710:	eba0 000a 	sub.w	r0, r0, sl
 800d714:	1080      	asrs	r0, r0, #2
 800d716:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d71a:	6120      	str	r0, [r4, #16]
 800d71c:	4658      	mov	r0, fp
 800d71e:	f7fe f81f 	bl	800b760 <__hi0bits>
 800d722:	683d      	ldr	r5, [r7, #0]
 800d724:	eba8 0000 	sub.w	r0, r8, r0
 800d728:	42a8      	cmp	r0, r5
 800d72a:	dd59      	ble.n	800d7e0 <__gethex+0x24c>
 800d72c:	eba0 0805 	sub.w	r8, r0, r5
 800d730:	4620      	mov	r0, r4
 800d732:	4641      	mov	r1, r8
 800d734:	f7fe fbb8 	bl	800bea8 <__any_on>
 800d738:	4683      	mov	fp, r0
 800d73a:	b1b8      	cbz	r0, 800d76c <__gethex+0x1d8>
 800d73c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800d740:	f04f 0b01 	mov.w	fp, #1
 800d744:	1159      	asrs	r1, r3, #5
 800d746:	f003 021f 	and.w	r2, r3, #31
 800d74a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d74e:	fa0b f202 	lsl.w	r2, fp, r2
 800d752:	420a      	tst	r2, r1
 800d754:	d00a      	beq.n	800d76c <__gethex+0x1d8>
 800d756:	455b      	cmp	r3, fp
 800d758:	dd06      	ble.n	800d768 <__gethex+0x1d4>
 800d75a:	f1a8 0102 	sub.w	r1, r8, #2
 800d75e:	4620      	mov	r0, r4
 800d760:	f7fe fba2 	bl	800bea8 <__any_on>
 800d764:	2800      	cmp	r0, #0
 800d766:	d138      	bne.n	800d7da <__gethex+0x246>
 800d768:	f04f 0b02 	mov.w	fp, #2
 800d76c:	4446      	add	r6, r8
 800d76e:	4641      	mov	r1, r8
 800d770:	4620      	mov	r0, r4
 800d772:	f7ff fea9 	bl	800d4c8 <rshift>
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	42b3      	cmp	r3, r6
 800d77a:	da41      	bge.n	800d800 <__gethex+0x26c>
 800d77c:	4621      	mov	r1, r4
 800d77e:	4648      	mov	r0, r9
 800d780:	f7fd ff3a 	bl	800b5f8 <_Bfree>
 800d784:	2300      	movs	r3, #0
 800d786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d788:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d78c:	6013      	str	r3, [r2, #0]
 800d78e:	e78a      	b.n	800d6a6 <__gethex+0x112>
 800d790:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d794:	2a2e      	cmp	r2, #46	; 0x2e
 800d796:	d014      	beq.n	800d7c2 <__gethex+0x22e>
 800d798:	2b20      	cmp	r3, #32
 800d79a:	d106      	bne.n	800d7aa <__gethex+0x216>
 800d79c:	9b01      	ldr	r3, [sp, #4]
 800d79e:	f843 bb04 	str.w	fp, [r3], #4
 800d7a2:	f04f 0b00 	mov.w	fp, #0
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	465b      	mov	r3, fp
 800d7aa:	7828      	ldrb	r0, [r5, #0]
 800d7ac:	9303      	str	r3, [sp, #12]
 800d7ae:	f7ff fedc 	bl	800d56a <__hexdig_fun>
 800d7b2:	9b03      	ldr	r3, [sp, #12]
 800d7b4:	f000 000f 	and.w	r0, r0, #15
 800d7b8:	4098      	lsls	r0, r3
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	ea4b 0b00 	orr.w	fp, fp, r0
 800d7c0:	e7a1      	b.n	800d706 <__gethex+0x172>
 800d7c2:	45a8      	cmp	r8, r5
 800d7c4:	d8e8      	bhi.n	800d798 <__gethex+0x204>
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	9303      	str	r3, [sp, #12]
 800d7cc:	f7ff fded 	bl	800d3aa <strncmp>
 800d7d0:	4926      	ldr	r1, [pc, #152]	; (800d86c <__gethex+0x2d8>)
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	d1df      	bne.n	800d798 <__gethex+0x204>
 800d7d8:	e795      	b.n	800d706 <__gethex+0x172>
 800d7da:	f04f 0b03 	mov.w	fp, #3
 800d7de:	e7c5      	b.n	800d76c <__gethex+0x1d8>
 800d7e0:	da0b      	bge.n	800d7fa <__gethex+0x266>
 800d7e2:	eba5 0800 	sub.w	r8, r5, r0
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	4648      	mov	r0, r9
 800d7ea:	4642      	mov	r2, r8
 800d7ec:	eba6 0608 	sub.w	r6, r6, r8
 800d7f0:	f7fe f91e 	bl	800ba30 <__lshift>
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	f100 0a14 	add.w	sl, r0, #20
 800d7fa:	f04f 0b00 	mov.w	fp, #0
 800d7fe:	e7ba      	b.n	800d776 <__gethex+0x1e2>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	42b3      	cmp	r3, r6
 800d804:	dd74      	ble.n	800d8f0 <__gethex+0x35c>
 800d806:	1b9e      	subs	r6, r3, r6
 800d808:	42b5      	cmp	r5, r6
 800d80a:	dc35      	bgt.n	800d878 <__gethex+0x2e4>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d023      	beq.n	800d85a <__gethex+0x2c6>
 800d812:	2b03      	cmp	r3, #3
 800d814:	d025      	beq.n	800d862 <__gethex+0x2ce>
 800d816:	2b01      	cmp	r3, #1
 800d818:	d115      	bne.n	800d846 <__gethex+0x2b2>
 800d81a:	42b5      	cmp	r5, r6
 800d81c:	d113      	bne.n	800d846 <__gethex+0x2b2>
 800d81e:	2d01      	cmp	r5, #1
 800d820:	d10b      	bne.n	800d83a <__gethex+0x2a6>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d828:	9a02      	ldr	r2, [sp, #8]
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	2301      	movs	r3, #1
 800d82e:	6123      	str	r3, [r4, #16]
 800d830:	f8ca 3000 	str.w	r3, [sl]
 800d834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d836:	601c      	str	r4, [r3, #0]
 800d838:	e735      	b.n	800d6a6 <__gethex+0x112>
 800d83a:	1e69      	subs	r1, r5, #1
 800d83c:	4620      	mov	r0, r4
 800d83e:	f7fe fb33 	bl	800bea8 <__any_on>
 800d842:	2800      	cmp	r0, #0
 800d844:	d1ed      	bne.n	800d822 <__gethex+0x28e>
 800d846:	4621      	mov	r1, r4
 800d848:	4648      	mov	r0, r9
 800d84a:	f7fd fed5 	bl	800b5f8 <_Bfree>
 800d84e:	2300      	movs	r3, #0
 800d850:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d852:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d856:	6013      	str	r3, [r2, #0]
 800d858:	e725      	b.n	800d6a6 <__gethex+0x112>
 800d85a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f2      	bne.n	800d846 <__gethex+0x2b2>
 800d860:	e7df      	b.n	800d822 <__gethex+0x28e>
 800d862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d864:	2b00      	cmp	r3, #0
 800d866:	d1dc      	bne.n	800d822 <__gethex+0x28e>
 800d868:	e7ed      	b.n	800d846 <__gethex+0x2b2>
 800d86a:	bf00      	nop
 800d86c:	0800f484 	.word	0x0800f484
 800d870:	0800f31d 	.word	0x0800f31d
 800d874:	0800f62e 	.word	0x0800f62e
 800d878:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d87c:	f1bb 0f00 	cmp.w	fp, #0
 800d880:	d133      	bne.n	800d8ea <__gethex+0x356>
 800d882:	f1b8 0f00 	cmp.w	r8, #0
 800d886:	d004      	beq.n	800d892 <__gethex+0x2fe>
 800d888:	4641      	mov	r1, r8
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7fe fb0c 	bl	800bea8 <__any_on>
 800d890:	4683      	mov	fp, r0
 800d892:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d896:	2301      	movs	r3, #1
 800d898:	f008 081f 	and.w	r8, r8, #31
 800d89c:	4631      	mov	r1, r6
 800d89e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	fa03 f308 	lsl.w	r3, r3, r8
 800d8a8:	1bad      	subs	r5, r5, r6
 800d8aa:	f04f 0802 	mov.w	r8, #2
 800d8ae:	4213      	tst	r3, r2
 800d8b0:	bf18      	it	ne
 800d8b2:	f04b 0b02 	orrne.w	fp, fp, #2
 800d8b6:	f7ff fe07 	bl	800d4c8 <rshift>
 800d8ba:	687e      	ldr	r6, [r7, #4]
 800d8bc:	f1bb 0f00 	cmp.w	fp, #0
 800d8c0:	d04a      	beq.n	800d958 <__gethex+0x3c4>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d016      	beq.n	800d8f6 <__gethex+0x362>
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	d018      	beq.n	800d8fe <__gethex+0x36a>
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d109      	bne.n	800d8e4 <__gethex+0x350>
 800d8d0:	f01b 0f02 	tst.w	fp, #2
 800d8d4:	d006      	beq.n	800d8e4 <__gethex+0x350>
 800d8d6:	f8da 3000 	ldr.w	r3, [sl]
 800d8da:	ea4b 0b03 	orr.w	fp, fp, r3
 800d8de:	f01b 0f01 	tst.w	fp, #1
 800d8e2:	d10f      	bne.n	800d904 <__gethex+0x370>
 800d8e4:	f048 0810 	orr.w	r8, r8, #16
 800d8e8:	e036      	b.n	800d958 <__gethex+0x3c4>
 800d8ea:	f04f 0b01 	mov.w	fp, #1
 800d8ee:	e7d0      	b.n	800d892 <__gethex+0x2fe>
 800d8f0:	f04f 0801 	mov.w	r8, #1
 800d8f4:	e7e2      	b.n	800d8bc <__gethex+0x328>
 800d8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8f8:	f1c3 0301 	rsb	r3, r3, #1
 800d8fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d900:	2b00      	cmp	r3, #0
 800d902:	d0ef      	beq.n	800d8e4 <__gethex+0x350>
 800d904:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d908:	f104 0214 	add.w	r2, r4, #20
 800d90c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d910:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d914:	9301      	str	r3, [sp, #4]
 800d916:	2300      	movs	r3, #0
 800d918:	4694      	mov	ip, r2
 800d91a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d91e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d922:	d01e      	beq.n	800d962 <__gethex+0x3ce>
 800d924:	3101      	adds	r1, #1
 800d926:	f8cc 1000 	str.w	r1, [ip]
 800d92a:	f1b8 0f02 	cmp.w	r8, #2
 800d92e:	f104 0214 	add.w	r2, r4, #20
 800d932:	d13d      	bne.n	800d9b0 <__gethex+0x41c>
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	3b01      	subs	r3, #1
 800d938:	42ab      	cmp	r3, r5
 800d93a:	d10b      	bne.n	800d954 <__gethex+0x3c0>
 800d93c:	1169      	asrs	r1, r5, #5
 800d93e:	2301      	movs	r3, #1
 800d940:	f005 051f 	and.w	r5, r5, #31
 800d944:	fa03 f505 	lsl.w	r5, r3, r5
 800d948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d94c:	421d      	tst	r5, r3
 800d94e:	bf18      	it	ne
 800d950:	f04f 0801 	movne.w	r8, #1
 800d954:	f048 0820 	orr.w	r8, r8, #32
 800d958:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d95a:	601c      	str	r4, [r3, #0]
 800d95c:	9b02      	ldr	r3, [sp, #8]
 800d95e:	601e      	str	r6, [r3, #0]
 800d960:	e6a1      	b.n	800d6a6 <__gethex+0x112>
 800d962:	4290      	cmp	r0, r2
 800d964:	f842 3c04 	str.w	r3, [r2, #-4]
 800d968:	d8d6      	bhi.n	800d918 <__gethex+0x384>
 800d96a:	68a2      	ldr	r2, [r4, #8]
 800d96c:	4593      	cmp	fp, r2
 800d96e:	db17      	blt.n	800d9a0 <__gethex+0x40c>
 800d970:	6861      	ldr	r1, [r4, #4]
 800d972:	4648      	mov	r0, r9
 800d974:	3101      	adds	r1, #1
 800d976:	f7fd fdff 	bl	800b578 <_Balloc>
 800d97a:	4682      	mov	sl, r0
 800d97c:	b918      	cbnz	r0, 800d986 <__gethex+0x3f2>
 800d97e:	4b1b      	ldr	r3, [pc, #108]	; (800d9ec <__gethex+0x458>)
 800d980:	4602      	mov	r2, r0
 800d982:	2184      	movs	r1, #132	; 0x84
 800d984:	e6b2      	b.n	800d6ec <__gethex+0x158>
 800d986:	6922      	ldr	r2, [r4, #16]
 800d988:	f104 010c 	add.w	r1, r4, #12
 800d98c:	300c      	adds	r0, #12
 800d98e:	3202      	adds	r2, #2
 800d990:	0092      	lsls	r2, r2, #2
 800d992:	f7ff fd4f 	bl	800d434 <memcpy>
 800d996:	4621      	mov	r1, r4
 800d998:	4654      	mov	r4, sl
 800d99a:	4648      	mov	r0, r9
 800d99c:	f7fd fe2c 	bl	800b5f8 <_Bfree>
 800d9a0:	6922      	ldr	r2, [r4, #16]
 800d9a2:	1c51      	adds	r1, r2, #1
 800d9a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d9a8:	6121      	str	r1, [r4, #16]
 800d9aa:	2101      	movs	r1, #1
 800d9ac:	6151      	str	r1, [r2, #20]
 800d9ae:	e7bc      	b.n	800d92a <__gethex+0x396>
 800d9b0:	6921      	ldr	r1, [r4, #16]
 800d9b2:	4559      	cmp	r1, fp
 800d9b4:	dd0b      	ble.n	800d9ce <__gethex+0x43a>
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f7ff fd85 	bl	800d4c8 <rshift>
 800d9be:	3601      	adds	r6, #1
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	42b3      	cmp	r3, r6
 800d9c4:	f6ff aeda 	blt.w	800d77c <__gethex+0x1e8>
 800d9c8:	f04f 0801 	mov.w	r8, #1
 800d9cc:	e7c2      	b.n	800d954 <__gethex+0x3c0>
 800d9ce:	f015 051f 	ands.w	r5, r5, #31
 800d9d2:	d0f9      	beq.n	800d9c8 <__gethex+0x434>
 800d9d4:	9b01      	ldr	r3, [sp, #4]
 800d9d6:	f1c5 0520 	rsb	r5, r5, #32
 800d9da:	441a      	add	r2, r3
 800d9dc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d9e0:	f7fd febe 	bl	800b760 <__hi0bits>
 800d9e4:	42a8      	cmp	r0, r5
 800d9e6:	dbe6      	blt.n	800d9b6 <__gethex+0x422>
 800d9e8:	e7ee      	b.n	800d9c8 <__gethex+0x434>
 800d9ea:	bf00      	nop
 800d9ec:	0800f31d 	.word	0x0800f31d

0800d9f0 <L_shift>:
 800d9f0:	f1c2 0208 	rsb	r2, r2, #8
 800d9f4:	0092      	lsls	r2, r2, #2
 800d9f6:	b570      	push	{r4, r5, r6, lr}
 800d9f8:	f1c2 0620 	rsb	r6, r2, #32
 800d9fc:	6843      	ldr	r3, [r0, #4]
 800d9fe:	6804      	ldr	r4, [r0, #0]
 800da00:	fa03 f506 	lsl.w	r5, r3, r6
 800da04:	40d3      	lsrs	r3, r2
 800da06:	432c      	orrs	r4, r5
 800da08:	6004      	str	r4, [r0, #0]
 800da0a:	f840 3f04 	str.w	r3, [r0, #4]!
 800da0e:	4288      	cmp	r0, r1
 800da10:	d3f4      	bcc.n	800d9fc <L_shift+0xc>
 800da12:	bd70      	pop	{r4, r5, r6, pc}

0800da14 <__match>:
 800da14:	6803      	ldr	r3, [r0, #0]
 800da16:	3301      	adds	r3, #1
 800da18:	b530      	push	{r4, r5, lr}
 800da1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da1e:	b914      	cbnz	r4, 800da26 <__match+0x12>
 800da20:	6003      	str	r3, [r0, #0]
 800da22:	2001      	movs	r0, #1
 800da24:	bd30      	pop	{r4, r5, pc}
 800da26:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da2a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da2e:	2d19      	cmp	r5, #25
 800da30:	bf98      	it	ls
 800da32:	3220      	addls	r2, #32
 800da34:	42a2      	cmp	r2, r4
 800da36:	d0f0      	beq.n	800da1a <__match+0x6>
 800da38:	2000      	movs	r0, #0
 800da3a:	e7f3      	b.n	800da24 <__match+0x10>

0800da3c <__hexnan>:
 800da3c:	680b      	ldr	r3, [r1, #0]
 800da3e:	6801      	ldr	r1, [r0, #0]
 800da40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da44:	115e      	asrs	r6, r3, #5
 800da46:	f013 031f 	ands.w	r3, r3, #31
 800da4a:	f04f 0500 	mov.w	r5, #0
 800da4e:	b087      	sub	sp, #28
 800da50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800da54:	4682      	mov	sl, r0
 800da56:	4690      	mov	r8, r2
 800da58:	46ab      	mov	fp, r5
 800da5a:	bf18      	it	ne
 800da5c:	3604      	addne	r6, #4
 800da5e:	9301      	str	r3, [sp, #4]
 800da60:	9502      	str	r5, [sp, #8]
 800da62:	1f37      	subs	r7, r6, #4
 800da64:	f846 5c04 	str.w	r5, [r6, #-4]
 800da68:	46b9      	mov	r9, r7
 800da6a:	463c      	mov	r4, r7
 800da6c:	1c4b      	adds	r3, r1, #1
 800da6e:	784a      	ldrb	r2, [r1, #1]
 800da70:	9303      	str	r3, [sp, #12]
 800da72:	b342      	cbz	r2, 800dac6 <__hexnan+0x8a>
 800da74:	4610      	mov	r0, r2
 800da76:	9105      	str	r1, [sp, #20]
 800da78:	9204      	str	r2, [sp, #16]
 800da7a:	f7ff fd76 	bl	800d56a <__hexdig_fun>
 800da7e:	2800      	cmp	r0, #0
 800da80:	d14f      	bne.n	800db22 <__hexnan+0xe6>
 800da82:	9a04      	ldr	r2, [sp, #16]
 800da84:	9905      	ldr	r1, [sp, #20]
 800da86:	2a20      	cmp	r2, #32
 800da88:	d818      	bhi.n	800dabc <__hexnan+0x80>
 800da8a:	9b02      	ldr	r3, [sp, #8]
 800da8c:	459b      	cmp	fp, r3
 800da8e:	dd13      	ble.n	800dab8 <__hexnan+0x7c>
 800da90:	454c      	cmp	r4, r9
 800da92:	d206      	bcs.n	800daa2 <__hexnan+0x66>
 800da94:	2d07      	cmp	r5, #7
 800da96:	dc04      	bgt.n	800daa2 <__hexnan+0x66>
 800da98:	462a      	mov	r2, r5
 800da9a:	4649      	mov	r1, r9
 800da9c:	4620      	mov	r0, r4
 800da9e:	f7ff ffa7 	bl	800d9f0 <L_shift>
 800daa2:	4544      	cmp	r4, r8
 800daa4:	d94f      	bls.n	800db46 <__hexnan+0x10a>
 800daa6:	2300      	movs	r3, #0
 800daa8:	f1a4 0904 	sub.w	r9, r4, #4
 800daac:	f8cd b008 	str.w	fp, [sp, #8]
 800dab0:	f844 3c04 	str.w	r3, [r4, #-4]
 800dab4:	461d      	mov	r5, r3
 800dab6:	464c      	mov	r4, r9
 800dab8:	9903      	ldr	r1, [sp, #12]
 800daba:	e7d7      	b.n	800da6c <__hexnan+0x30>
 800dabc:	2a29      	cmp	r2, #41	; 0x29
 800dabe:	d154      	bne.n	800db6a <__hexnan+0x12e>
 800dac0:	3102      	adds	r1, #2
 800dac2:	f8ca 1000 	str.w	r1, [sl]
 800dac6:	f1bb 0f00 	cmp.w	fp, #0
 800daca:	d04e      	beq.n	800db6a <__hexnan+0x12e>
 800dacc:	454c      	cmp	r4, r9
 800dace:	d206      	bcs.n	800dade <__hexnan+0xa2>
 800dad0:	2d07      	cmp	r5, #7
 800dad2:	dc04      	bgt.n	800dade <__hexnan+0xa2>
 800dad4:	462a      	mov	r2, r5
 800dad6:	4649      	mov	r1, r9
 800dad8:	4620      	mov	r0, r4
 800dada:	f7ff ff89 	bl	800d9f0 <L_shift>
 800dade:	4544      	cmp	r4, r8
 800dae0:	d933      	bls.n	800db4a <__hexnan+0x10e>
 800dae2:	f1a8 0204 	sub.w	r2, r8, #4
 800dae6:	4623      	mov	r3, r4
 800dae8:	f853 1b04 	ldr.w	r1, [r3], #4
 800daec:	429f      	cmp	r7, r3
 800daee:	f842 1f04 	str.w	r1, [r2, #4]!
 800daf2:	d2f9      	bcs.n	800dae8 <__hexnan+0xac>
 800daf4:	1b3b      	subs	r3, r7, r4
 800daf6:	3e03      	subs	r6, #3
 800daf8:	3401      	adds	r4, #1
 800dafa:	2200      	movs	r2, #0
 800dafc:	f023 0303 	bic.w	r3, r3, #3
 800db00:	3304      	adds	r3, #4
 800db02:	42a6      	cmp	r6, r4
 800db04:	bf38      	it	cc
 800db06:	2304      	movcc	r3, #4
 800db08:	4443      	add	r3, r8
 800db0a:	f843 2b04 	str.w	r2, [r3], #4
 800db0e:	429f      	cmp	r7, r3
 800db10:	d2fb      	bcs.n	800db0a <__hexnan+0xce>
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	b91b      	cbnz	r3, 800db1e <__hexnan+0xe2>
 800db16:	4547      	cmp	r7, r8
 800db18:	d125      	bne.n	800db66 <__hexnan+0x12a>
 800db1a:	2301      	movs	r3, #1
 800db1c:	603b      	str	r3, [r7, #0]
 800db1e:	2005      	movs	r0, #5
 800db20:	e024      	b.n	800db6c <__hexnan+0x130>
 800db22:	3501      	adds	r5, #1
 800db24:	f10b 0b01 	add.w	fp, fp, #1
 800db28:	2d08      	cmp	r5, #8
 800db2a:	dd05      	ble.n	800db38 <__hexnan+0xfc>
 800db2c:	4544      	cmp	r4, r8
 800db2e:	d9c3      	bls.n	800dab8 <__hexnan+0x7c>
 800db30:	2300      	movs	r3, #0
 800db32:	3c04      	subs	r4, #4
 800db34:	2501      	movs	r5, #1
 800db36:	6023      	str	r3, [r4, #0]
 800db38:	6822      	ldr	r2, [r4, #0]
 800db3a:	f000 000f 	and.w	r0, r0, #15
 800db3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db42:	6020      	str	r0, [r4, #0]
 800db44:	e7b8      	b.n	800dab8 <__hexnan+0x7c>
 800db46:	2508      	movs	r5, #8
 800db48:	e7b6      	b.n	800dab8 <__hexnan+0x7c>
 800db4a:	9b01      	ldr	r3, [sp, #4]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d0e0      	beq.n	800db12 <__hexnan+0xd6>
 800db50:	f1c3 0320 	rsb	r3, r3, #32
 800db54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db58:	40da      	lsrs	r2, r3
 800db5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800db5e:	4013      	ands	r3, r2
 800db60:	f846 3c04 	str.w	r3, [r6, #-4]
 800db64:	e7d5      	b.n	800db12 <__hexnan+0xd6>
 800db66:	3f04      	subs	r7, #4
 800db68:	e7d3      	b.n	800db12 <__hexnan+0xd6>
 800db6a:	2004      	movs	r0, #4
 800db6c:	b007      	add	sp, #28
 800db6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800db72 <__ascii_mbtowc>:
 800db72:	b082      	sub	sp, #8
 800db74:	b901      	cbnz	r1, 800db78 <__ascii_mbtowc+0x6>
 800db76:	a901      	add	r1, sp, #4
 800db78:	b142      	cbz	r2, 800db8c <__ascii_mbtowc+0x1a>
 800db7a:	b14b      	cbz	r3, 800db90 <__ascii_mbtowc+0x1e>
 800db7c:	7813      	ldrb	r3, [r2, #0]
 800db7e:	600b      	str	r3, [r1, #0]
 800db80:	7812      	ldrb	r2, [r2, #0]
 800db82:	1e10      	subs	r0, r2, #0
 800db84:	bf18      	it	ne
 800db86:	2001      	movne	r0, #1
 800db88:	b002      	add	sp, #8
 800db8a:	4770      	bx	lr
 800db8c:	4610      	mov	r0, r2
 800db8e:	e7fb      	b.n	800db88 <__ascii_mbtowc+0x16>
 800db90:	f06f 0001 	mvn.w	r0, #1
 800db94:	e7f8      	b.n	800db88 <__ascii_mbtowc+0x16>

0800db96 <_realloc_r>:
 800db96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db9a:	4680      	mov	r8, r0
 800db9c:	4614      	mov	r4, r2
 800db9e:	460e      	mov	r6, r1
 800dba0:	b921      	cbnz	r1, 800dbac <_realloc_r+0x16>
 800dba2:	4611      	mov	r1, r2
 800dba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	f7fd bc5a 	b.w	800b460 <_malloc_r>
 800dbac:	b92a      	cbnz	r2, 800dbba <_realloc_r+0x24>
 800dbae:	4625      	mov	r5, r4
 800dbb0:	f7fd fbe2 	bl	800b378 <_free_r>
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbba:	f000 f842 	bl	800dc42 <_malloc_usable_size_r>
 800dbbe:	4284      	cmp	r4, r0
 800dbc0:	4607      	mov	r7, r0
 800dbc2:	d802      	bhi.n	800dbca <_realloc_r+0x34>
 800dbc4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbc8:	d812      	bhi.n	800dbf0 <_realloc_r+0x5a>
 800dbca:	4621      	mov	r1, r4
 800dbcc:	4640      	mov	r0, r8
 800dbce:	f7fd fc47 	bl	800b460 <_malloc_r>
 800dbd2:	4605      	mov	r5, r0
 800dbd4:	2800      	cmp	r0, #0
 800dbd6:	d0ed      	beq.n	800dbb4 <_realloc_r+0x1e>
 800dbd8:	42bc      	cmp	r4, r7
 800dbda:	4622      	mov	r2, r4
 800dbdc:	4631      	mov	r1, r6
 800dbde:	bf28      	it	cs
 800dbe0:	463a      	movcs	r2, r7
 800dbe2:	f7ff fc27 	bl	800d434 <memcpy>
 800dbe6:	4631      	mov	r1, r6
 800dbe8:	4640      	mov	r0, r8
 800dbea:	f7fd fbc5 	bl	800b378 <_free_r>
 800dbee:	e7e1      	b.n	800dbb4 <_realloc_r+0x1e>
 800dbf0:	4635      	mov	r5, r6
 800dbf2:	e7df      	b.n	800dbb4 <_realloc_r+0x1e>

0800dbf4 <__ascii_wctomb>:
 800dbf4:	b149      	cbz	r1, 800dc0a <__ascii_wctomb+0x16>
 800dbf6:	2aff      	cmp	r2, #255	; 0xff
 800dbf8:	bf8d      	iteet	hi
 800dbfa:	238a      	movhi	r3, #138	; 0x8a
 800dbfc:	2001      	movls	r0, #1
 800dbfe:	700a      	strbls	r2, [r1, #0]
 800dc00:	6003      	strhi	r3, [r0, #0]
 800dc02:	bf88      	it	hi
 800dc04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dc08:	4770      	bx	lr
 800dc0a:	4608      	mov	r0, r1
 800dc0c:	4770      	bx	lr
	...

0800dc10 <fiprintf>:
 800dc10:	b40e      	push	{r1, r2, r3}
 800dc12:	b503      	push	{r0, r1, lr}
 800dc14:	ab03      	add	r3, sp, #12
 800dc16:	4601      	mov	r1, r0
 800dc18:	4805      	ldr	r0, [pc, #20]	; (800dc30 <fiprintf+0x20>)
 800dc1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc1e:	6800      	ldr	r0, [r0, #0]
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	f7ff f981 	bl	800cf28 <_vfiprintf_r>
 800dc26:	b002      	add	sp, #8
 800dc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc2c:	b003      	add	sp, #12
 800dc2e:	4770      	bx	lr
 800dc30:	20000074 	.word	0x20000074

0800dc34 <abort>:
 800dc34:	2006      	movs	r0, #6
 800dc36:	b508      	push	{r3, lr}
 800dc38:	f000 f834 	bl	800dca4 <raise>
 800dc3c:	2001      	movs	r0, #1
 800dc3e:	f7f4 f975 	bl	8001f2c <_exit>

0800dc42 <_malloc_usable_size_r>:
 800dc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc46:	1f18      	subs	r0, r3, #4
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	bfbc      	itt	lt
 800dc4c:	580b      	ldrlt	r3, [r1, r0]
 800dc4e:	18c0      	addlt	r0, r0, r3
 800dc50:	4770      	bx	lr

0800dc52 <_raise_r>:
 800dc52:	291f      	cmp	r1, #31
 800dc54:	b538      	push	{r3, r4, r5, lr}
 800dc56:	4604      	mov	r4, r0
 800dc58:	460d      	mov	r5, r1
 800dc5a:	d904      	bls.n	800dc66 <_raise_r+0x14>
 800dc5c:	2316      	movs	r3, #22
 800dc5e:	6003      	str	r3, [r0, #0]
 800dc60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800dc68:	b112      	cbz	r2, 800dc70 <_raise_r+0x1e>
 800dc6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dc6e:	b94b      	cbnz	r3, 800dc84 <_raise_r+0x32>
 800dc70:	4620      	mov	r0, r4
 800dc72:	f000 f831 	bl	800dcd8 <_getpid_r>
 800dc76:	462a      	mov	r2, r5
 800dc78:	4601      	mov	r1, r0
 800dc7a:	4620      	mov	r0, r4
 800dc7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc80:	f000 b818 	b.w	800dcb4 <_kill_r>
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d00a      	beq.n	800dc9e <_raise_r+0x4c>
 800dc88:	1c59      	adds	r1, r3, #1
 800dc8a:	d103      	bne.n	800dc94 <_raise_r+0x42>
 800dc8c:	2316      	movs	r3, #22
 800dc8e:	6003      	str	r3, [r0, #0]
 800dc90:	2001      	movs	r0, #1
 800dc92:	e7e7      	b.n	800dc64 <_raise_r+0x12>
 800dc94:	2400      	movs	r4, #0
 800dc96:	4628      	mov	r0, r5
 800dc98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dc9c:	4798      	blx	r3
 800dc9e:	2000      	movs	r0, #0
 800dca0:	e7e0      	b.n	800dc64 <_raise_r+0x12>
	...

0800dca4 <raise>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	; (800dcb0 <raise+0xc>)
 800dca6:	4601      	mov	r1, r0
 800dca8:	6818      	ldr	r0, [r3, #0]
 800dcaa:	f7ff bfd2 	b.w	800dc52 <_raise_r>
 800dcae:	bf00      	nop
 800dcb0:	20000074 	.word	0x20000074

0800dcb4 <_kill_r>:
 800dcb4:	b538      	push	{r3, r4, r5, lr}
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	4d06      	ldr	r5, [pc, #24]	; (800dcd4 <_kill_r+0x20>)
 800dcba:	4604      	mov	r4, r0
 800dcbc:	4608      	mov	r0, r1
 800dcbe:	4611      	mov	r1, r2
 800dcc0:	602b      	str	r3, [r5, #0]
 800dcc2:	f7f4 f923 	bl	8001f0c <_kill>
 800dcc6:	1c43      	adds	r3, r0, #1
 800dcc8:	d102      	bne.n	800dcd0 <_kill_r+0x1c>
 800dcca:	682b      	ldr	r3, [r5, #0]
 800dccc:	b103      	cbz	r3, 800dcd0 <_kill_r+0x1c>
 800dcce:	6023      	str	r3, [r4, #0]
 800dcd0:	bd38      	pop	{r3, r4, r5, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20001f18 	.word	0x20001f18

0800dcd8 <_getpid_r>:
 800dcd8:	f7f4 b910 	b.w	8001efc <_getpid>
 800dcdc:	0000      	movs	r0, r0
	...

0800dce0 <exp>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	ec55 4b10 	vmov	r4, r5, d0
 800dce6:	ed2d 8b02 	vpush	{d8}
 800dcea:	f000 f895 	bl	800de18 <__ieee754_exp>
 800dcee:	eeb0 8a40 	vmov.f32	s16, s0
 800dcf2:	eef0 8a60 	vmov.f32	s17, s1
 800dcf6:	ec45 4b10 	vmov	d0, r4, r5
 800dcfa:	f000 f87f 	bl	800ddfc <finite>
 800dcfe:	b168      	cbz	r0, 800dd1c <exp+0x3c>
 800dd00:	4620      	mov	r0, r4
 800dd02:	4629      	mov	r1, r5
 800dd04:	a316      	add	r3, pc, #88	; (adr r3, 800dd60 <exp+0x80>)
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	f7f2 ff09 	bl	8000b20 <__aeabi_dcmpgt>
 800dd0e:	b160      	cbz	r0, 800dd2a <exp+0x4a>
 800dd10:	f7fc fc70 	bl	800a5f4 <__errno>
 800dd14:	2322      	movs	r3, #34	; 0x22
 800dd16:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800dd50 <exp+0x70>
 800dd1a:	6003      	str	r3, [r0, #0]
 800dd1c:	eeb0 0a48 	vmov.f32	s0, s16
 800dd20:	eef0 0a68 	vmov.f32	s1, s17
 800dd24:	ecbd 8b02 	vpop	{d8}
 800dd28:	bd38      	pop	{r3, r4, r5, pc}
 800dd2a:	a30f      	add	r3, pc, #60	; (adr r3, 800dd68 <exp+0x88>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	4620      	mov	r0, r4
 800dd32:	4629      	mov	r1, r5
 800dd34:	f7f2 fed6 	bl	8000ae4 <__aeabi_dcmplt>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d0ef      	beq.n	800dd1c <exp+0x3c>
 800dd3c:	f7fc fc5a 	bl	800a5f4 <__errno>
 800dd40:	2322      	movs	r3, #34	; 0x22
 800dd42:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800dd58 <exp+0x78>
 800dd46:	6003      	str	r3, [r0, #0]
 800dd48:	e7e8      	b.n	800dd1c <exp+0x3c>
 800dd4a:	bf00      	nop
 800dd4c:	f3af 8000 	nop.w
 800dd50:	00000000 	.word	0x00000000
 800dd54:	7ff00000 	.word	0x7ff00000
	...
 800dd60:	fefa39ef 	.word	0xfefa39ef
 800dd64:	40862e42 	.word	0x40862e42
 800dd68:	d52d3051 	.word	0xd52d3051
 800dd6c:	c0874910 	.word	0xc0874910

0800dd70 <sinf>:
 800dd70:	ee10 3a10 	vmov	r3, s0
 800dd74:	b507      	push	{r0, r1, r2, lr}
 800dd76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dd7a:	4a1e      	ldr	r2, [pc, #120]	; (800ddf4 <sinf+0x84>)
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	dc07      	bgt.n	800dd90 <sinf+0x20>
 800dd80:	2000      	movs	r0, #0
 800dd82:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ddf8 <sinf+0x88>
 800dd86:	b003      	add	sp, #12
 800dd88:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd8c:	f000 ba20 	b.w	800e1d0 <__kernel_sinf>
 800dd90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dd94:	db04      	blt.n	800dda0 <sinf+0x30>
 800dd96:	ee30 0a40 	vsub.f32	s0, s0, s0
 800dd9a:	b003      	add	sp, #12
 800dd9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dda0:	4668      	mov	r0, sp
 800dda2:	f000 fa5d 	bl	800e260 <__ieee754_rem_pio2f>
 800dda6:	f000 0003 	and.w	r0, r0, #3
 800ddaa:	2801      	cmp	r0, #1
 800ddac:	d00a      	beq.n	800ddc4 <sinf+0x54>
 800ddae:	2802      	cmp	r0, #2
 800ddb0:	d00f      	beq.n	800ddd2 <sinf+0x62>
 800ddb2:	b9c0      	cbnz	r0, 800dde6 <sinf+0x76>
 800ddb4:	2001      	movs	r0, #1
 800ddb6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ddba:	ed9d 0a00 	vldr	s0, [sp]
 800ddbe:	f000 fa07 	bl	800e1d0 <__kernel_sinf>
 800ddc2:	e7ea      	b.n	800dd9a <sinf+0x2a>
 800ddc4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ddc8:	ed9d 0a00 	vldr	s0, [sp]
 800ddcc:	f000 f9a2 	bl	800e114 <__kernel_cosf>
 800ddd0:	e7e3      	b.n	800dd9a <sinf+0x2a>
 800ddd2:	2001      	movs	r0, #1
 800ddd4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ddd8:	ed9d 0a00 	vldr	s0, [sp]
 800dddc:	f000 f9f8 	bl	800e1d0 <__kernel_sinf>
 800dde0:	eeb1 0a40 	vneg.f32	s0, s0
 800dde4:	e7d9      	b.n	800dd9a <sinf+0x2a>
 800dde6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ddea:	ed9d 0a00 	vldr	s0, [sp]
 800ddee:	f000 f991 	bl	800e114 <__kernel_cosf>
 800ddf2:	e7f5      	b.n	800dde0 <sinf+0x70>
 800ddf4:	3f490fd8 	.word	0x3f490fd8
 800ddf8:	00000000 	.word	0x00000000

0800ddfc <finite>:
 800ddfc:	b082      	sub	sp, #8
 800ddfe:	ed8d 0b00 	vstr	d0, [sp]
 800de02:	9801      	ldr	r0, [sp, #4]
 800de04:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800de08:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800de0c:	0fc0      	lsrs	r0, r0, #31
 800de0e:	b002      	add	sp, #8
 800de10:	4770      	bx	lr
 800de12:	0000      	movs	r0, r0
 800de14:	0000      	movs	r0, r0
	...

0800de18 <__ieee754_exp>:
 800de18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de1c:	ec55 4b10 	vmov	r4, r5, d0
 800de20:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800de24:	49b2      	ldr	r1, [pc, #712]	; (800e0f0 <__ieee754_exp+0x2d8>)
 800de26:	0fee      	lsrs	r6, r5, #31
 800de28:	428a      	cmp	r2, r1
 800de2a:	ed2d 8b04 	vpush	{d8-d9}
 800de2e:	d93b      	bls.n	800dea8 <__ieee754_exp+0x90>
 800de30:	49b0      	ldr	r1, [pc, #704]	; (800e0f4 <__ieee754_exp+0x2dc>)
 800de32:	428a      	cmp	r2, r1
 800de34:	d916      	bls.n	800de64 <__ieee754_exp+0x4c>
 800de36:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800de3a:	ee10 2a10 	vmov	r2, s0
 800de3e:	4323      	orrs	r3, r4
 800de40:	d007      	beq.n	800de52 <__ieee754_exp+0x3a>
 800de42:	462b      	mov	r3, r5
 800de44:	4620      	mov	r0, r4
 800de46:	4629      	mov	r1, r5
 800de48:	f7f2 fa24 	bl	8000294 <__adddf3>
 800de4c:	4604      	mov	r4, r0
 800de4e:	460d      	mov	r5, r1
 800de50:	e002      	b.n	800de58 <__ieee754_exp+0x40>
 800de52:	b10e      	cbz	r6, 800de58 <__ieee754_exp+0x40>
 800de54:	2400      	movs	r4, #0
 800de56:	2500      	movs	r5, #0
 800de58:	ecbd 8b04 	vpop	{d8-d9}
 800de5c:	ec45 4b10 	vmov	d0, r4, r5
 800de60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de64:	a38c      	add	r3, pc, #560	; (adr r3, 800e098 <__ieee754_exp+0x280>)
 800de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6a:	ee10 0a10 	vmov	r0, s0
 800de6e:	4629      	mov	r1, r5
 800de70:	f7f2 fe56 	bl	8000b20 <__aeabi_dcmpgt>
 800de74:	4607      	mov	r7, r0
 800de76:	b130      	cbz	r0, 800de86 <__ieee754_exp+0x6e>
 800de78:	2000      	movs	r0, #0
 800de7a:	ecbd 8b04 	vpop	{d8-d9}
 800de7e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de82:	f000 bb45 	b.w	800e510 <__math_oflow>
 800de86:	a386      	add	r3, pc, #536	; (adr r3, 800e0a0 <__ieee754_exp+0x288>)
 800de88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8c:	4620      	mov	r0, r4
 800de8e:	4629      	mov	r1, r5
 800de90:	f7f2 fe28 	bl	8000ae4 <__aeabi_dcmplt>
 800de94:	2800      	cmp	r0, #0
 800de96:	f000 808b 	beq.w	800dfb0 <__ieee754_exp+0x198>
 800de9a:	4638      	mov	r0, r7
 800de9c:	ecbd 8b04 	vpop	{d8-d9}
 800dea0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dea4:	f000 bb2b 	b.w	800e4fe <__math_uflow>
 800dea8:	4b93      	ldr	r3, [pc, #588]	; (800e0f8 <__ieee754_exp+0x2e0>)
 800deaa:	429a      	cmp	r2, r3
 800deac:	f240 80ac 	bls.w	800e008 <__ieee754_exp+0x1f0>
 800deb0:	4b92      	ldr	r3, [pc, #584]	; (800e0fc <__ieee754_exp+0x2e4>)
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d87c      	bhi.n	800dfb0 <__ieee754_exp+0x198>
 800deb6:	4b92      	ldr	r3, [pc, #584]	; (800e100 <__ieee754_exp+0x2e8>)
 800deb8:	ee10 0a10 	vmov	r0, s0
 800debc:	4629      	mov	r1, r5
 800debe:	00f7      	lsls	r7, r6, #3
 800dec0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dec4:	f1c6 0a01 	rsb	sl, r6, #1
 800dec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800decc:	f7f2 f9e0 	bl	8000290 <__aeabi_dsub>
 800ded0:	4b8c      	ldr	r3, [pc, #560]	; (800e104 <__ieee754_exp+0x2ec>)
 800ded2:	4680      	mov	r8, r0
 800ded4:	4689      	mov	r9, r1
 800ded6:	443b      	add	r3, r7
 800ded8:	ebaa 0a06 	sub.w	sl, sl, r6
 800dedc:	ed93 7b00 	vldr	d7, [r3]
 800dee0:	eeb0 8a47 	vmov.f32	s16, s14
 800dee4:	eef0 8a67 	vmov.f32	s17, s15
 800dee8:	4640      	mov	r0, r8
 800deea:	4649      	mov	r1, r9
 800deec:	ec53 2b18 	vmov	r2, r3, d8
 800def0:	f7f2 f9ce 	bl	8000290 <__aeabi_dsub>
 800def4:	4604      	mov	r4, r0
 800def6:	460d      	mov	r5, r1
 800def8:	4622      	mov	r2, r4
 800defa:	462b      	mov	r3, r5
 800defc:	4620      	mov	r0, r4
 800defe:	4629      	mov	r1, r5
 800df00:	f7f2 fb7e 	bl	8000600 <__aeabi_dmul>
 800df04:	4606      	mov	r6, r0
 800df06:	460f      	mov	r7, r1
 800df08:	a367      	add	r3, pc, #412	; (adr r3, 800e0a8 <__ieee754_exp+0x290>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 fb77 	bl	8000600 <__aeabi_dmul>
 800df12:	a367      	add	r3, pc, #412	; (adr r3, 800e0b0 <__ieee754_exp+0x298>)
 800df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df18:	f7f2 f9ba 	bl	8000290 <__aeabi_dsub>
 800df1c:	4632      	mov	r2, r6
 800df1e:	463b      	mov	r3, r7
 800df20:	f7f2 fb6e 	bl	8000600 <__aeabi_dmul>
 800df24:	a364      	add	r3, pc, #400	; (adr r3, 800e0b8 <__ieee754_exp+0x2a0>)
 800df26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2a:	f7f2 f9b3 	bl	8000294 <__adddf3>
 800df2e:	4632      	mov	r2, r6
 800df30:	463b      	mov	r3, r7
 800df32:	f7f2 fb65 	bl	8000600 <__aeabi_dmul>
 800df36:	a362      	add	r3, pc, #392	; (adr r3, 800e0c0 <__ieee754_exp+0x2a8>)
 800df38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df3c:	f7f2 f9a8 	bl	8000290 <__aeabi_dsub>
 800df40:	4632      	mov	r2, r6
 800df42:	463b      	mov	r3, r7
 800df44:	f7f2 fb5c 	bl	8000600 <__aeabi_dmul>
 800df48:	a35f      	add	r3, pc, #380	; (adr r3, 800e0c8 <__ieee754_exp+0x2b0>)
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f7f2 f9a1 	bl	8000294 <__adddf3>
 800df52:	4632      	mov	r2, r6
 800df54:	463b      	mov	r3, r7
 800df56:	f7f2 fb53 	bl	8000600 <__aeabi_dmul>
 800df5a:	4602      	mov	r2, r0
 800df5c:	460b      	mov	r3, r1
 800df5e:	4620      	mov	r0, r4
 800df60:	4629      	mov	r1, r5
 800df62:	f7f2 f995 	bl	8000290 <__aeabi_dsub>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4606      	mov	r6, r0
 800df6c:	460f      	mov	r7, r1
 800df6e:	4620      	mov	r0, r4
 800df70:	4629      	mov	r1, r5
 800df72:	f7f2 fb45 	bl	8000600 <__aeabi_dmul>
 800df76:	ec41 0b19 	vmov	d9, r0, r1
 800df7a:	f1ba 0f00 	cmp.w	sl, #0
 800df7e:	d15d      	bne.n	800e03c <__ieee754_exp+0x224>
 800df80:	2200      	movs	r2, #0
 800df82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df86:	4630      	mov	r0, r6
 800df88:	4639      	mov	r1, r7
 800df8a:	f7f2 f981 	bl	8000290 <__aeabi_dsub>
 800df8e:	4602      	mov	r2, r0
 800df90:	460b      	mov	r3, r1
 800df92:	ec51 0b19 	vmov	r0, r1, d9
 800df96:	f7f2 fc5d 	bl	8000854 <__aeabi_ddiv>
 800df9a:	4622      	mov	r2, r4
 800df9c:	462b      	mov	r3, r5
 800df9e:	f7f2 f977 	bl	8000290 <__aeabi_dsub>
 800dfa2:	4602      	mov	r2, r0
 800dfa4:	460b      	mov	r3, r1
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	4957      	ldr	r1, [pc, #348]	; (800e108 <__ieee754_exp+0x2f0>)
 800dfaa:	f7f2 f971 	bl	8000290 <__aeabi_dsub>
 800dfae:	e74d      	b.n	800de4c <__ieee754_exp+0x34>
 800dfb0:	4b56      	ldr	r3, [pc, #344]	; (800e10c <__ieee754_exp+0x2f4>)
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dfba:	a345      	add	r3, pc, #276	; (adr r3, 800e0d0 <__ieee754_exp+0x2b8>)
 800dfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc0:	f7f2 fb1e 	bl	8000600 <__aeabi_dmul>
 800dfc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dfc8:	f7f2 f964 	bl	8000294 <__adddf3>
 800dfcc:	f7f2 fdc8 	bl	8000b60 <__aeabi_d2iz>
 800dfd0:	4682      	mov	sl, r0
 800dfd2:	f7f2 faab 	bl	800052c <__aeabi_i2d>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	460f      	mov	r7, r1
 800dfda:	a33f      	add	r3, pc, #252	; (adr r3, 800e0d8 <__ieee754_exp+0x2c0>)
 800dfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe0:	f7f2 fb0e 	bl	8000600 <__aeabi_dmul>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	4620      	mov	r0, r4
 800dfea:	4629      	mov	r1, r5
 800dfec:	f7f2 f950 	bl	8000290 <__aeabi_dsub>
 800dff0:	4680      	mov	r8, r0
 800dff2:	4689      	mov	r9, r1
 800dff4:	4630      	mov	r0, r6
 800dff6:	4639      	mov	r1, r7
 800dff8:	a339      	add	r3, pc, #228	; (adr r3, 800e0e0 <__ieee754_exp+0x2c8>)
 800dffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffe:	f7f2 faff 	bl	8000600 <__aeabi_dmul>
 800e002:	ec41 0b18 	vmov	d8, r0, r1
 800e006:	e76f      	b.n	800dee8 <__ieee754_exp+0xd0>
 800e008:	4b41      	ldr	r3, [pc, #260]	; (800e110 <__ieee754_exp+0x2f8>)
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d811      	bhi.n	800e032 <__ieee754_exp+0x21a>
 800e00e:	ee10 0a10 	vmov	r0, s0
 800e012:	4629      	mov	r1, r5
 800e014:	a334      	add	r3, pc, #208	; (adr r3, 800e0e8 <__ieee754_exp+0x2d0>)
 800e016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01a:	f7f2 f93b 	bl	8000294 <__adddf3>
 800e01e:	2200      	movs	r2, #0
 800e020:	4b39      	ldr	r3, [pc, #228]	; (800e108 <__ieee754_exp+0x2f0>)
 800e022:	f7f2 fd7d 	bl	8000b20 <__aeabi_dcmpgt>
 800e026:	b138      	cbz	r0, 800e038 <__ieee754_exp+0x220>
 800e028:	2200      	movs	r2, #0
 800e02a:	4b37      	ldr	r3, [pc, #220]	; (800e108 <__ieee754_exp+0x2f0>)
 800e02c:	4620      	mov	r0, r4
 800e02e:	4629      	mov	r1, r5
 800e030:	e70a      	b.n	800de48 <__ieee754_exp+0x30>
 800e032:	f04f 0a00 	mov.w	sl, #0
 800e036:	e75f      	b.n	800def8 <__ieee754_exp+0xe0>
 800e038:	4682      	mov	sl, r0
 800e03a:	e75d      	b.n	800def8 <__ieee754_exp+0xe0>
 800e03c:	4632      	mov	r2, r6
 800e03e:	463b      	mov	r3, r7
 800e040:	2000      	movs	r0, #0
 800e042:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800e046:	f7f2 f923 	bl	8000290 <__aeabi_dsub>
 800e04a:	4602      	mov	r2, r0
 800e04c:	460b      	mov	r3, r1
 800e04e:	ec51 0b19 	vmov	r0, r1, d9
 800e052:	f7f2 fbff 	bl	8000854 <__aeabi_ddiv>
 800e056:	4602      	mov	r2, r0
 800e058:	460b      	mov	r3, r1
 800e05a:	ec51 0b18 	vmov	r0, r1, d8
 800e05e:	f7f2 f917 	bl	8000290 <__aeabi_dsub>
 800e062:	4642      	mov	r2, r8
 800e064:	464b      	mov	r3, r9
 800e066:	f7f2 f913 	bl	8000290 <__aeabi_dsub>
 800e06a:	4602      	mov	r2, r0
 800e06c:	460b      	mov	r3, r1
 800e06e:	2000      	movs	r0, #0
 800e070:	4925      	ldr	r1, [pc, #148]	; (800e108 <__ieee754_exp+0x2f0>)
 800e072:	f7f2 f90d 	bl	8000290 <__aeabi_dsub>
 800e076:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800e07a:	4592      	cmp	sl, r2
 800e07c:	db02      	blt.n	800e084 <__ieee754_exp+0x26c>
 800e07e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e082:	e6e3      	b.n	800de4c <__ieee754_exp+0x34>
 800e084:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800e088:	2200      	movs	r2, #0
 800e08a:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800e08e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800e092:	f7f2 fab5 	bl	8000600 <__aeabi_dmul>
 800e096:	e6d9      	b.n	800de4c <__ieee754_exp+0x34>
 800e098:	fefa39ef 	.word	0xfefa39ef
 800e09c:	40862e42 	.word	0x40862e42
 800e0a0:	d52d3051 	.word	0xd52d3051
 800e0a4:	c0874910 	.word	0xc0874910
 800e0a8:	72bea4d0 	.word	0x72bea4d0
 800e0ac:	3e663769 	.word	0x3e663769
 800e0b0:	c5d26bf1 	.word	0xc5d26bf1
 800e0b4:	3ebbbd41 	.word	0x3ebbbd41
 800e0b8:	af25de2c 	.word	0xaf25de2c
 800e0bc:	3f11566a 	.word	0x3f11566a
 800e0c0:	16bebd93 	.word	0x16bebd93
 800e0c4:	3f66c16c 	.word	0x3f66c16c
 800e0c8:	5555553e 	.word	0x5555553e
 800e0cc:	3fc55555 	.word	0x3fc55555
 800e0d0:	652b82fe 	.word	0x652b82fe
 800e0d4:	3ff71547 	.word	0x3ff71547
 800e0d8:	fee00000 	.word	0xfee00000
 800e0dc:	3fe62e42 	.word	0x3fe62e42
 800e0e0:	35793c76 	.word	0x35793c76
 800e0e4:	3dea39ef 	.word	0x3dea39ef
 800e0e8:	8800759c 	.word	0x8800759c
 800e0ec:	7e37e43c 	.word	0x7e37e43c
 800e0f0:	40862e41 	.word	0x40862e41
 800e0f4:	7fefffff 	.word	0x7fefffff
 800e0f8:	3fd62e42 	.word	0x3fd62e42
 800e0fc:	3ff0a2b1 	.word	0x3ff0a2b1
 800e100:	0800f6a0 	.word	0x0800f6a0
 800e104:	0800f6b0 	.word	0x0800f6b0
 800e108:	3ff00000 	.word	0x3ff00000
 800e10c:	0800f690 	.word	0x0800f690
 800e110:	3defffff 	.word	0x3defffff

0800e114 <__kernel_cosf>:
 800e114:	ee10 3a10 	vmov	r3, s0
 800e118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e11c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e120:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e124:	da05      	bge.n	800e132 <__kernel_cosf+0x1e>
 800e126:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e12a:	ee17 2a90 	vmov	r2, s15
 800e12e:	2a00      	cmp	r2, #0
 800e130:	d03b      	beq.n	800e1aa <__kernel_cosf+0x96>
 800e132:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e136:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e1b0 <__kernel_cosf+0x9c>
 800e13a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 800e1b4 <__kernel_cosf+0xa0>
 800e13e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800e142:	4a1d      	ldr	r2, [pc, #116]	; (800e1b8 <__kernel_cosf+0xa4>)
 800e144:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e148:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e1bc <__kernel_cosf+0xa8>
 800e14c:	4293      	cmp	r3, r2
 800e14e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e152:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800e1c0 <__kernel_cosf+0xac>
 800e156:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e15a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800e1c4 <__kernel_cosf+0xb0>
 800e15e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e162:	ed9f 6a19 	vldr	s12, [pc, #100]	; 800e1c8 <__kernel_cosf+0xb4>
 800e166:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e16a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e16e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e172:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e176:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e17a:	dc04      	bgt.n	800e186 <__kernel_cosf+0x72>
 800e17c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e180:	ee36 0ae7 	vsub.f32	s0, s13, s15
 800e184:	4770      	bx	lr
 800e186:	4a11      	ldr	r2, [pc, #68]	; (800e1cc <__kernel_cosf+0xb8>)
 800e188:	4293      	cmp	r3, r2
 800e18a:	bfd6      	itet	le
 800e18c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e190:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800e194:	ee07 3a10 	vmovle	s14, r3
 800e198:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e19c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800e1a0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e1a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1a8:	4770      	bx	lr
 800e1aa:	eeb0 0a66 	vmov.f32	s0, s13
 800e1ae:	4770      	bx	lr
 800e1b0:	ad47d74e 	.word	0xad47d74e
 800e1b4:	310f74f6 	.word	0x310f74f6
 800e1b8:	3e999999 	.word	0x3e999999
 800e1bc:	b493f27c 	.word	0xb493f27c
 800e1c0:	37d00d01 	.word	0x37d00d01
 800e1c4:	bab60b61 	.word	0xbab60b61
 800e1c8:	3d2aaaab 	.word	0x3d2aaaab
 800e1cc:	3f480000 	.word	0x3f480000

0800e1d0 <__kernel_sinf>:
 800e1d0:	ee10 3a10 	vmov	r3, s0
 800e1d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e1dc:	da04      	bge.n	800e1e8 <__kernel_sinf+0x18>
 800e1de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e1e2:	ee17 3a90 	vmov	r3, s15
 800e1e6:	b35b      	cbz	r3, 800e240 <__kernel_sinf+0x70>
 800e1e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e1ec:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e244 <__kernel_sinf+0x74>
 800e1f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e248 <__kernel_sinf+0x78>
 800e1f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e1f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e24c <__kernel_sinf+0x7c>
 800e1fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e200:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e204:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800e250 <__kernel_sinf+0x80>
 800e208:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e20c:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e254 <__kernel_sinf+0x84>
 800e210:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e214:	b930      	cbnz	r0, 800e224 <__kernel_sinf+0x54>
 800e216:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e258 <__kernel_sinf+0x88>
 800e21a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e21e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e222:	4770      	bx	lr
 800e224:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e228:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e22c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e230:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e234:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e25c <__kernel_sinf+0x8c>
 800e238:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e23c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	2f2ec9d3 	.word	0x2f2ec9d3
 800e248:	b2d72f34 	.word	0xb2d72f34
 800e24c:	3638ef1b 	.word	0x3638ef1b
 800e250:	b9500d01 	.word	0xb9500d01
 800e254:	3c088889 	.word	0x3c088889
 800e258:	be2aaaab 	.word	0xbe2aaaab
 800e25c:	3e2aaaab 	.word	0x3e2aaaab

0800e260 <__ieee754_rem_pio2f>:
 800e260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e262:	ee10 6a10 	vmov	r6, s0
 800e266:	4b85      	ldr	r3, [pc, #532]	; (800e47c <__ieee754_rem_pio2f+0x21c>)
 800e268:	b087      	sub	sp, #28
 800e26a:	4604      	mov	r4, r0
 800e26c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800e270:	429d      	cmp	r5, r3
 800e272:	dc05      	bgt.n	800e280 <__ieee754_rem_pio2f+0x20>
 800e274:	2300      	movs	r3, #0
 800e276:	ed80 0a00 	vstr	s0, [r0]
 800e27a:	6043      	str	r3, [r0, #4]
 800e27c:	2000      	movs	r0, #0
 800e27e:	e020      	b.n	800e2c2 <__ieee754_rem_pio2f+0x62>
 800e280:	4b7f      	ldr	r3, [pc, #508]	; (800e480 <__ieee754_rem_pio2f+0x220>)
 800e282:	429d      	cmp	r5, r3
 800e284:	dc38      	bgt.n	800e2f8 <__ieee754_rem_pio2f+0x98>
 800e286:	2e00      	cmp	r6, #0
 800e288:	f025 050f 	bic.w	r5, r5, #15
 800e28c:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e484 <__ieee754_rem_pio2f+0x224>
 800e290:	4b7d      	ldr	r3, [pc, #500]	; (800e488 <__ieee754_rem_pio2f+0x228>)
 800e292:	dd18      	ble.n	800e2c6 <__ieee754_rem_pio2f+0x66>
 800e294:	429d      	cmp	r5, r3
 800e296:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e29a:	bf09      	itett	eq
 800e29c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800e48c <__ieee754_rem_pio2f+0x22c>
 800e2a0:	ed9f 7a7b 	vldrne	s14, [pc, #492]	; 800e490 <__ieee754_rem_pio2f+0x230>
 800e2a4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e2a8:	ed9f 7a7a 	vldreq	s14, [pc, #488]	; 800e494 <__ieee754_rem_pio2f+0x234>
 800e2ac:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800e2b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e2b4:	edc0 6a00 	vstr	s13, [r0]
 800e2b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2bc:	edc0 7a01 	vstr	s15, [r0, #4]
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	b007      	add	sp, #28
 800e2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2c6:	429d      	cmp	r5, r3
 800e2c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e2cc:	bf09      	itett	eq
 800e2ce:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800e48c <__ieee754_rem_pio2f+0x22c>
 800e2d2:	ed9f 7a6f 	vldrne	s14, [pc, #444]	; 800e490 <__ieee754_rem_pio2f+0x230>
 800e2d6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e2da:	ed9f 7a6e 	vldreq	s14, [pc, #440]	; 800e494 <__ieee754_rem_pio2f+0x234>
 800e2de:	ee77 6a87 	vadd.f32	s13, s15, s14
 800e2e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e2e6:	edc0 6a00 	vstr	s13, [r0]
 800e2ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2ee:	edc0 7a01 	vstr	s15, [r0, #4]
 800e2f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2f6:	e7e4      	b.n	800e2c2 <__ieee754_rem_pio2f+0x62>
 800e2f8:	4b67      	ldr	r3, [pc, #412]	; (800e498 <__ieee754_rem_pio2f+0x238>)
 800e2fa:	429d      	cmp	r5, r3
 800e2fc:	dc70      	bgt.n	800e3e0 <__ieee754_rem_pio2f+0x180>
 800e2fe:	f000 f8d9 	bl	800e4b4 <fabsf>
 800e302:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e306:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800e49c <__ieee754_rem_pio2f+0x23c>
 800e30a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e30e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e316:	ee17 0a90 	vmov	r0, s15
 800e31a:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e484 <__ieee754_rem_pio2f+0x224>
 800e31e:	281f      	cmp	r0, #31
 800e320:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e324:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e490 <__ieee754_rem_pio2f+0x230>
 800e328:	eeb1 6a47 	vneg.f32	s12, s14
 800e32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e330:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e334:	ee16 2a90 	vmov	r2, s13
 800e338:	dc1c      	bgt.n	800e374 <__ieee754_rem_pio2f+0x114>
 800e33a:	1e47      	subs	r7, r0, #1
 800e33c:	4958      	ldr	r1, [pc, #352]	; (800e4a0 <__ieee754_rem_pio2f+0x240>)
 800e33e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800e342:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800e346:	428b      	cmp	r3, r1
 800e348:	d014      	beq.n	800e374 <__ieee754_rem_pio2f+0x114>
 800e34a:	6022      	str	r2, [r4, #0]
 800e34c:	ed94 7a00 	vldr	s14, [r4]
 800e350:	2e00      	cmp	r6, #0
 800e352:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e356:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e35a:	ed84 0a01 	vstr	s0, [r4, #4]
 800e35e:	dab0      	bge.n	800e2c2 <__ieee754_rem_pio2f+0x62>
 800e360:	eeb1 7a47 	vneg.f32	s14, s14
 800e364:	eeb1 0a40 	vneg.f32	s0, s0
 800e368:	ed84 7a00 	vstr	s14, [r4]
 800e36c:	ed84 0a01 	vstr	s0, [r4, #4]
 800e370:	4240      	negs	r0, r0
 800e372:	e7a6      	b.n	800e2c2 <__ieee754_rem_pio2f+0x62>
 800e374:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e378:	15eb      	asrs	r3, r5, #23
 800e37a:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800e37e:	2908      	cmp	r1, #8
 800e380:	dde3      	ble.n	800e34a <__ieee754_rem_pio2f+0xea>
 800e382:	eef0 6a40 	vmov.f32	s13, s0
 800e386:	eddf 5a41 	vldr	s11, [pc, #260]	; 800e48c <__ieee754_rem_pio2f+0x22c>
 800e38a:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e38e:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e392:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e396:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e494 <__ieee754_rem_pio2f+0x234>
 800e39a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e39e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e3a2:	ee15 2a90 	vmov	r2, s11
 800e3a6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e3aa:	1a5b      	subs	r3, r3, r1
 800e3ac:	2b19      	cmp	r3, #25
 800e3ae:	dc04      	bgt.n	800e3ba <__ieee754_rem_pio2f+0x15a>
 800e3b0:	eeb0 0a66 	vmov.f32	s0, s13
 800e3b4:	edc4 5a00 	vstr	s11, [r4]
 800e3b8:	e7c8      	b.n	800e34c <__ieee754_rem_pio2f+0xec>
 800e3ba:	eeb0 0a66 	vmov.f32	s0, s13
 800e3be:	eddf 5a39 	vldr	s11, [pc, #228]	; 800e4a4 <__ieee754_rem_pio2f+0x244>
 800e3c2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e3c6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e3ca:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e4a8 <__ieee754_rem_pio2f+0x248>
 800e3ce:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e3d2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e3d6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e3da:	ed84 7a00 	vstr	s14, [r4]
 800e3de:	e7b5      	b.n	800e34c <__ieee754_rem_pio2f+0xec>
 800e3e0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800e3e4:	db06      	blt.n	800e3f4 <__ieee754_rem_pio2f+0x194>
 800e3e6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e3ea:	edc0 7a01 	vstr	s15, [r0, #4]
 800e3ee:	edc0 7a00 	vstr	s15, [r0]
 800e3f2:	e743      	b.n	800e27c <__ieee754_rem_pio2f+0x1c>
 800e3f4:	15ea      	asrs	r2, r5, #23
 800e3f6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e4ac <__ieee754_rem_pio2f+0x24c>
 800e3fa:	3a86      	subs	r2, #134	; 0x86
 800e3fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e400:	ee07 3a90 	vmov	s15, r3
 800e404:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e408:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e410:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e414:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e418:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e41c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e424:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e42c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e430:	edcd 7a05 	vstr	s15, [sp, #20]
 800e434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e438:	d11e      	bne.n	800e478 <__ieee754_rem_pio2f+0x218>
 800e43a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e442:	bf14      	ite	ne
 800e444:	2302      	movne	r3, #2
 800e446:	2301      	moveq	r3, #1
 800e448:	4919      	ldr	r1, [pc, #100]	; (800e4b0 <__ieee754_rem_pio2f+0x250>)
 800e44a:	a803      	add	r0, sp, #12
 800e44c:	9101      	str	r1, [sp, #4]
 800e44e:	2102      	movs	r1, #2
 800e450:	9100      	str	r1, [sp, #0]
 800e452:	4621      	mov	r1, r4
 800e454:	f000 f866 	bl	800e524 <__kernel_rem_pio2f>
 800e458:	2e00      	cmp	r6, #0
 800e45a:	f6bf af32 	bge.w	800e2c2 <__ieee754_rem_pio2f+0x62>
 800e45e:	edd4 7a00 	vldr	s15, [r4]
 800e462:	eef1 7a67 	vneg.f32	s15, s15
 800e466:	edc4 7a00 	vstr	s15, [r4]
 800e46a:	edd4 7a01 	vldr	s15, [r4, #4]
 800e46e:	eef1 7a67 	vneg.f32	s15, s15
 800e472:	edc4 7a01 	vstr	s15, [r4, #4]
 800e476:	e77b      	b.n	800e370 <__ieee754_rem_pio2f+0x110>
 800e478:	2303      	movs	r3, #3
 800e47a:	e7e5      	b.n	800e448 <__ieee754_rem_pio2f+0x1e8>
 800e47c:	3f490fd8 	.word	0x3f490fd8
 800e480:	4016cbe3 	.word	0x4016cbe3
 800e484:	3fc90f80 	.word	0x3fc90f80
 800e488:	3fc90fd0 	.word	0x3fc90fd0
 800e48c:	37354400 	.word	0x37354400
 800e490:	37354443 	.word	0x37354443
 800e494:	2e85a308 	.word	0x2e85a308
 800e498:	43490f80 	.word	0x43490f80
 800e49c:	3f22f984 	.word	0x3f22f984
 800e4a0:	0800f6c0 	.word	0x0800f6c0
 800e4a4:	2e85a300 	.word	0x2e85a300
 800e4a8:	248d3132 	.word	0x248d3132
 800e4ac:	43800000 	.word	0x43800000
 800e4b0:	0800f740 	.word	0x0800f740

0800e4b4 <fabsf>:
 800e4b4:	ee10 3a10 	vmov	r3, s0
 800e4b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e4bc:	ee00 3a10 	vmov	s0, r3
 800e4c0:	4770      	bx	lr

0800e4c2 <with_errno>:
 800e4c2:	b570      	push	{r4, r5, r6, lr}
 800e4c4:	4604      	mov	r4, r0
 800e4c6:	460d      	mov	r5, r1
 800e4c8:	4616      	mov	r6, r2
 800e4ca:	f7fc f893 	bl	800a5f4 <__errno>
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	6006      	str	r6, [r0, #0]
 800e4d2:	4620      	mov	r0, r4
 800e4d4:	bd70      	pop	{r4, r5, r6, pc}

0800e4d6 <xflow>:
 800e4d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e4d8:	4614      	mov	r4, r2
 800e4da:	461d      	mov	r5, r3
 800e4dc:	b108      	cbz	r0, 800e4e2 <xflow+0xc>
 800e4de:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	e9cd 2300 	strd	r2, r3, [sp]
 800e4ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ee:	f7f2 f887 	bl	8000600 <__aeabi_dmul>
 800e4f2:	2222      	movs	r2, #34	; 0x22
 800e4f4:	b003      	add	sp, #12
 800e4f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4fa:	f7ff bfe2 	b.w	800e4c2 <with_errno>

0800e4fe <__math_uflow>:
 800e4fe:	b508      	push	{r3, lr}
 800e500:	2200      	movs	r2, #0
 800e502:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e506:	f7ff ffe6 	bl	800e4d6 <xflow>
 800e50a:	ec41 0b10 	vmov	d0, r0, r1
 800e50e:	bd08      	pop	{r3, pc}

0800e510 <__math_oflow>:
 800e510:	b508      	push	{r3, lr}
 800e512:	2200      	movs	r2, #0
 800e514:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e518:	f7ff ffdd 	bl	800e4d6 <xflow>
 800e51c:	ec41 0b10 	vmov	d0, r0, r1
 800e520:	bd08      	pop	{r3, pc}
	...

0800e524 <__kernel_rem_pio2f>:
 800e524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e528:	ed2d 8b04 	vpush	{d8-d9}
 800e52c:	b0d9      	sub	sp, #356	; 0x164
 800e52e:	4688      	mov	r8, r1
 800e530:	49b9      	ldr	r1, [pc, #740]	; (800e818 <__kernel_rem_pio2f+0x2f4>)
 800e532:	9002      	str	r0, [sp, #8]
 800e534:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e536:	9301      	str	r3, [sp, #4]
 800e538:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e53c:	9901      	ldr	r1, [sp, #4]
 800e53e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800e540:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800e544:	1d11      	adds	r1, r2, #4
 800e546:	db25      	blt.n	800e594 <__kernel_rem_pio2f+0x70>
 800e548:	1ed0      	subs	r0, r2, #3
 800e54a:	bf48      	it	mi
 800e54c:	1d10      	addmi	r0, r2, #4
 800e54e:	10c0      	asrs	r0, r0, #3
 800e550:	1c45      	adds	r5, r0, #1
 800e552:	eba0 070b 	sub.w	r7, r0, fp
 800e556:	eb0a 0c0b 	add.w	ip, sl, fp
 800e55a:	ae1c      	add	r6, sp, #112	; 0x70
 800e55c:	00e9      	lsls	r1, r5, #3
 800e55e:	2400      	movs	r4, #0
 800e560:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e564:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e568:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 800e56c:	9103      	str	r1, [sp, #12]
 800e56e:	4564      	cmp	r4, ip
 800e570:	dd12      	ble.n	800e598 <__kernel_rem_pio2f+0x74>
 800e572:	ac1c      	add	r4, sp, #112	; 0x70
 800e574:	9901      	ldr	r1, [sp, #4]
 800e576:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800e57a:	f04f 0c00 	mov.w	ip, #0
 800e57e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800e582:	45d4      	cmp	ip, sl
 800e584:	dc29      	bgt.n	800e5da <__kernel_rem_pio2f+0xb6>
 800e586:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e58a:	4627      	mov	r7, r4
 800e58c:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e590:	2600      	movs	r6, #0
 800e592:	e018      	b.n	800e5c6 <__kernel_rem_pio2f+0xa2>
 800e594:	2000      	movs	r0, #0
 800e596:	e7db      	b.n	800e550 <__kernel_rem_pio2f+0x2c>
 800e598:	42e7      	cmn	r7, r4
 800e59a:	bf54      	ite	pl
 800e59c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 800e5a0:	eef0 7a47 	vmovmi.f32	s15, s14
 800e5a4:	f104 0401 	add.w	r4, r4, #1
 800e5a8:	bf5c      	itt	pl
 800e5aa:	ee07 1a90 	vmovpl	s15, r1
 800e5ae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e5b2:	ece6 7a01 	vstmia	r6!, {s15}
 800e5b6:	e7da      	b.n	800e56e <__kernel_rem_pio2f+0x4a>
 800e5b8:	ecfe 6a01 	vldmia	lr!, {s13}
 800e5bc:	3601      	adds	r6, #1
 800e5be:	ed97 7a00 	vldr	s14, [r7]
 800e5c2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e5c6:	455e      	cmp	r6, fp
 800e5c8:	f1a7 0704 	sub.w	r7, r7, #4
 800e5cc:	ddf4      	ble.n	800e5b8 <__kernel_rem_pio2f+0x94>
 800e5ce:	f10c 0c01 	add.w	ip, ip, #1
 800e5d2:	3404      	adds	r4, #4
 800e5d4:	ece9 7a01 	vstmia	r9!, {s15}
 800e5d8:	e7d3      	b.n	800e582 <__kernel_rem_pio2f+0x5e>
 800e5da:	a908      	add	r1, sp, #32
 800e5dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e5e0:	4656      	mov	r6, sl
 800e5e2:	eddf 8a90 	vldr	s17, [pc, #576]	; 800e824 <__kernel_rem_pio2f+0x300>
 800e5e6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5ea:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800e820 <__kernel_rem_pio2f+0x2fc>
 800e5ee:	9304      	str	r3, [sp, #16]
 800e5f0:	9105      	str	r1, [sp, #20]
 800e5f2:	00b3      	lsls	r3, r6, #2
 800e5f4:	ac08      	add	r4, sp, #32
 800e5f6:	4637      	mov	r7, r6
 800e5f8:	9306      	str	r3, [sp, #24]
 800e5fa:	ab58      	add	r3, sp, #352	; 0x160
 800e5fc:	46a4      	mov	ip, r4
 800e5fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e602:	ab44      	add	r3, sp, #272	; 0x110
 800e604:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e608:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e60c:	2f00      	cmp	r7, #0
 800e60e:	f1a0 0004 	sub.w	r0, r0, #4
 800e612:	dc4a      	bgt.n	800e6aa <__kernel_rem_pio2f+0x186>
 800e614:	4628      	mov	r0, r5
 800e616:	9207      	str	r2, [sp, #28]
 800e618:	f000 f9f8 	bl	800ea0c <scalbnf>
 800e61c:	eeb0 8a40 	vmov.f32	s16, s0
 800e620:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e624:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e628:	f000 fa54 	bl	800ead4 <floorf>
 800e62c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e630:	2d00      	cmp	r5, #0
 800e632:	9a07      	ldr	r2, [sp, #28]
 800e634:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e638:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e63c:	ee17 9a90 	vmov	r9, s15
 800e640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e644:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e648:	dd41      	ble.n	800e6ce <__kernel_rem_pio2f+0x1aa>
 800e64a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800e64e:	ab08      	add	r3, sp, #32
 800e650:	f1c5 0e08 	rsb	lr, r5, #8
 800e654:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e658:	fa47 f00e 	asr.w	r0, r7, lr
 800e65c:	4481      	add	r9, r0
 800e65e:	fa00 f00e 	lsl.w	r0, r0, lr
 800e662:	1a3f      	subs	r7, r7, r0
 800e664:	f1c5 0007 	rsb	r0, r5, #7
 800e668:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e66c:	4107      	asrs	r7, r0
 800e66e:	2f00      	cmp	r7, #0
 800e670:	dd3c      	ble.n	800e6ec <__kernel_rem_pio2f+0x1c8>
 800e672:	f04f 0e00 	mov.w	lr, #0
 800e676:	f109 0901 	add.w	r9, r9, #1
 800e67a:	4671      	mov	r1, lr
 800e67c:	4576      	cmp	r6, lr
 800e67e:	dc67      	bgt.n	800e750 <__kernel_rem_pio2f+0x22c>
 800e680:	2d00      	cmp	r5, #0
 800e682:	dd03      	ble.n	800e68c <__kernel_rem_pio2f+0x168>
 800e684:	2d01      	cmp	r5, #1
 800e686:	d074      	beq.n	800e772 <__kernel_rem_pio2f+0x24e>
 800e688:	2d02      	cmp	r5, #2
 800e68a:	d07b      	beq.n	800e784 <__kernel_rem_pio2f+0x260>
 800e68c:	2f02      	cmp	r7, #2
 800e68e:	d12d      	bne.n	800e6ec <__kernel_rem_pio2f+0x1c8>
 800e690:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e694:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e698:	b341      	cbz	r1, 800e6ec <__kernel_rem_pio2f+0x1c8>
 800e69a:	4628      	mov	r0, r5
 800e69c:	9207      	str	r2, [sp, #28]
 800e69e:	f000 f9b5 	bl	800ea0c <scalbnf>
 800e6a2:	9a07      	ldr	r2, [sp, #28]
 800e6a4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e6a8:	e020      	b.n	800e6ec <__kernel_rem_pio2f+0x1c8>
 800e6aa:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e6ae:	3f01      	subs	r7, #1
 800e6b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e6b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e6b8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e6bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e6c0:	ecac 0a01 	vstmia	ip!, {s0}
 800e6c4:	ed90 0a00 	vldr	s0, [r0]
 800e6c8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e6cc:	e79e      	b.n	800e60c <__kernel_rem_pio2f+0xe8>
 800e6ce:	d105      	bne.n	800e6dc <__kernel_rem_pio2f+0x1b8>
 800e6d0:	1e70      	subs	r0, r6, #1
 800e6d2:	ab08      	add	r3, sp, #32
 800e6d4:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e6d8:	11ff      	asrs	r7, r7, #7
 800e6da:	e7c8      	b.n	800e66e <__kernel_rem_pio2f+0x14a>
 800e6dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e6e0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e8:	da30      	bge.n	800e74c <__kernel_rem_pio2f+0x228>
 800e6ea:	2700      	movs	r7, #0
 800e6ec:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f4:	f040 809a 	bne.w	800e82c <__kernel_rem_pio2f+0x308>
 800e6f8:	1e74      	subs	r4, r6, #1
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	46a4      	mov	ip, r4
 800e6fe:	45d4      	cmp	ip, sl
 800e700:	da47      	bge.n	800e792 <__kernel_rem_pio2f+0x26e>
 800e702:	2900      	cmp	r1, #0
 800e704:	d063      	beq.n	800e7ce <__kernel_rem_pio2f+0x2aa>
 800e706:	ab08      	add	r3, sp, #32
 800e708:	3d08      	subs	r5, #8
 800e70a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d07f      	beq.n	800e812 <__kernel_rem_pio2f+0x2ee>
 800e712:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e716:	4628      	mov	r0, r5
 800e718:	f000 f978 	bl	800ea0c <scalbnf>
 800e71c:	1c63      	adds	r3, r4, #1
 800e71e:	aa44      	add	r2, sp, #272	; 0x110
 800e720:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e824 <__kernel_rem_pio2f+0x300>
 800e724:	0099      	lsls	r1, r3, #2
 800e726:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e72a:	4623      	mov	r3, r4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	f280 80ad 	bge.w	800e88c <__kernel_rem_pio2f+0x368>
 800e732:	4623      	mov	r3, r4
 800e734:	2b00      	cmp	r3, #0
 800e736:	f2c0 80cb 	blt.w	800e8d0 <__kernel_rem_pio2f+0x3ac>
 800e73a:	aa44      	add	r2, sp, #272	; 0x110
 800e73c:	4e37      	ldr	r6, [pc, #220]	; (800e81c <__kernel_rem_pio2f+0x2f8>)
 800e73e:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e742:	2000      	movs	r0, #0
 800e744:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e748:	1ae2      	subs	r2, r4, r3
 800e74a:	e0b6      	b.n	800e8ba <__kernel_rem_pio2f+0x396>
 800e74c:	2702      	movs	r7, #2
 800e74e:	e790      	b.n	800e672 <__kernel_rem_pio2f+0x14e>
 800e750:	6820      	ldr	r0, [r4, #0]
 800e752:	b949      	cbnz	r1, 800e768 <__kernel_rem_pio2f+0x244>
 800e754:	b118      	cbz	r0, 800e75e <__kernel_rem_pio2f+0x23a>
 800e756:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e75a:	6020      	str	r0, [r4, #0]
 800e75c:	2001      	movs	r0, #1
 800e75e:	f10e 0e01 	add.w	lr, lr, #1
 800e762:	3404      	adds	r4, #4
 800e764:	4601      	mov	r1, r0
 800e766:	e789      	b.n	800e67c <__kernel_rem_pio2f+0x158>
 800e768:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e76c:	6020      	str	r0, [r4, #0]
 800e76e:	4608      	mov	r0, r1
 800e770:	e7f5      	b.n	800e75e <__kernel_rem_pio2f+0x23a>
 800e772:	1e74      	subs	r4, r6, #1
 800e774:	ab08      	add	r3, sp, #32
 800e776:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e77a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e77e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e782:	e783      	b.n	800e68c <__kernel_rem_pio2f+0x168>
 800e784:	1e74      	subs	r4, r6, #1
 800e786:	ab08      	add	r3, sp, #32
 800e788:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e78c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e790:	e7f5      	b.n	800e77e <__kernel_rem_pio2f+0x25a>
 800e792:	ab08      	add	r3, sp, #32
 800e794:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 800e798:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800e79c:	4301      	orrs	r1, r0
 800e79e:	e7ae      	b.n	800e6fe <__kernel_rem_pio2f+0x1da>
 800e7a0:	3001      	adds	r0, #1
 800e7a2:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 800e7a6:	2f00      	cmp	r7, #0
 800e7a8:	d0fa      	beq.n	800e7a0 <__kernel_rem_pio2f+0x27c>
 800e7aa:	9b06      	ldr	r3, [sp, #24]
 800e7ac:	f106 0c01 	add.w	ip, r6, #1
 800e7b0:	4430      	add	r0, r6
 800e7b2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e7b6:	eb0d 0403 	add.w	r4, sp, r3
 800e7ba:	9b01      	ldr	r3, [sp, #4]
 800e7bc:	18f7      	adds	r7, r6, r3
 800e7be:	ab1c      	add	r3, sp, #112	; 0x70
 800e7c0:	3c4c      	subs	r4, #76	; 0x4c
 800e7c2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e7c6:	4560      	cmp	r0, ip
 800e7c8:	da04      	bge.n	800e7d4 <__kernel_rem_pio2f+0x2b0>
 800e7ca:	4606      	mov	r6, r0
 800e7cc:	e711      	b.n	800e5f2 <__kernel_rem_pio2f+0xce>
 800e7ce:	9c05      	ldr	r4, [sp, #20]
 800e7d0:	2001      	movs	r0, #1
 800e7d2:	e7e6      	b.n	800e7a2 <__kernel_rem_pio2f+0x27e>
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	2600      	movs	r6, #0
 800e7d8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e7dc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e7e0:	ee07 3a90 	vmov	s15, r3
 800e7e4:	9306      	str	r3, [sp, #24]
 800e7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e7ea:	ece7 7a01 	vstmia	r7!, {s15}
 800e7ee:	46b9      	mov	r9, r7
 800e7f0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e7f4:	455e      	cmp	r6, fp
 800e7f6:	dd04      	ble.n	800e802 <__kernel_rem_pio2f+0x2de>
 800e7f8:	f10c 0c01 	add.w	ip, ip, #1
 800e7fc:	ece4 7a01 	vstmia	r4!, {s15}
 800e800:	e7e1      	b.n	800e7c6 <__kernel_rem_pio2f+0x2a2>
 800e802:	ecfe 6a01 	vldmia	lr!, {s13}
 800e806:	3601      	adds	r6, #1
 800e808:	ed39 7a01 	vldmdb	r9!, {s14}
 800e80c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e810:	e7f0      	b.n	800e7f4 <__kernel_rem_pio2f+0x2d0>
 800e812:	3c01      	subs	r4, #1
 800e814:	e777      	b.n	800e706 <__kernel_rem_pio2f+0x1e2>
 800e816:	bf00      	nop
 800e818:	0800fa84 	.word	0x0800fa84
 800e81c:	0800fa58 	.word	0x0800fa58
 800e820:	43800000 	.word	0x43800000
 800e824:	3b800000 	.word	0x3b800000
 800e828:	00000000 	.word	0x00000000
 800e82c:	9b03      	ldr	r3, [sp, #12]
 800e82e:	eeb0 0a48 	vmov.f32	s0, s16
 800e832:	1a98      	subs	r0, r3, r2
 800e834:	f000 f8ea 	bl	800ea0c <scalbnf>
 800e838:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e820 <__kernel_rem_pio2f+0x2fc>
 800e83c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e844:	db19      	blt.n	800e87a <__kernel_rem_pio2f+0x356>
 800e846:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e824 <__kernel_rem_pio2f+0x300>
 800e84a:	aa08      	add	r2, sp, #32
 800e84c:	1c74      	adds	r4, r6, #1
 800e84e:	3508      	adds	r5, #8
 800e850:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e858:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e85c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e864:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e868:	ee10 3a10 	vmov	r3, s0
 800e86c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e870:	ee17 3a90 	vmov	r3, s15
 800e874:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e878:	e74b      	b.n	800e712 <__kernel_rem_pio2f+0x1ee>
 800e87a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e87e:	aa08      	add	r2, sp, #32
 800e880:	4634      	mov	r4, r6
 800e882:	ee10 3a10 	vmov	r3, s0
 800e886:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e88a:	e742      	b.n	800e712 <__kernel_rem_pio2f+0x1ee>
 800e88c:	a808      	add	r0, sp, #32
 800e88e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800e892:	3b01      	subs	r3, #1
 800e894:	ee07 0a90 	vmov	s15, r0
 800e898:	9001      	str	r0, [sp, #4]
 800e89a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e89e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e8a2:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e8a6:	ed62 7a01 	vstmdb	r2!, {s15}
 800e8aa:	e73f      	b.n	800e72c <__kernel_rem_pio2f+0x208>
 800e8ac:	ecf6 6a01 	vldmia	r6!, {s13}
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	ecb5 7a01 	vldmia	r5!, {s14}
 800e8b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e8ba:	4550      	cmp	r0, sl
 800e8bc:	dc01      	bgt.n	800e8c2 <__kernel_rem_pio2f+0x39e>
 800e8be:	4290      	cmp	r0, r2
 800e8c0:	ddf4      	ble.n	800e8ac <__kernel_rem_pio2f+0x388>
 800e8c2:	a858      	add	r0, sp, #352	; 0x160
 800e8c4:	3b01      	subs	r3, #1
 800e8c6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800e8ca:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800e8ce:	e731      	b.n	800e734 <__kernel_rem_pio2f+0x210>
 800e8d0:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e8d2:	2b02      	cmp	r3, #2
 800e8d4:	dc09      	bgt.n	800e8ea <__kernel_rem_pio2f+0x3c6>
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	dc2b      	bgt.n	800e932 <__kernel_rem_pio2f+0x40e>
 800e8da:	d044      	beq.n	800e966 <__kernel_rem_pio2f+0x442>
 800e8dc:	f009 0007 	and.w	r0, r9, #7
 800e8e0:	b059      	add	sp, #356	; 0x164
 800e8e2:	ecbd 8b04 	vpop	{d8-d9}
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ea:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e8ec:	2b03      	cmp	r3, #3
 800e8ee:	d1f5      	bne.n	800e8dc <__kernel_rem_pio2f+0x3b8>
 800e8f0:	aa30      	add	r2, sp, #192	; 0xc0
 800e8f2:	1f0b      	subs	r3, r1, #4
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	4413      	add	r3, r2
 800e8f8:	461a      	mov	r2, r3
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	f1a2 0204 	sub.w	r2, r2, #4
 800e900:	dc52      	bgt.n	800e9a8 <__kernel_rem_pio2f+0x484>
 800e902:	4622      	mov	r2, r4
 800e904:	2a01      	cmp	r2, #1
 800e906:	f1a3 0304 	sub.w	r3, r3, #4
 800e90a:	dc5d      	bgt.n	800e9c8 <__kernel_rem_pio2f+0x4a4>
 800e90c:	ab30      	add	r3, sp, #192	; 0xc0
 800e90e:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e912:	440b      	add	r3, r1
 800e914:	2c01      	cmp	r4, #1
 800e916:	dc67      	bgt.n	800e9e8 <__kernel_rem_pio2f+0x4c4>
 800e918:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e91c:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e920:	2f00      	cmp	r7, #0
 800e922:	d167      	bne.n	800e9f4 <__kernel_rem_pio2f+0x4d0>
 800e924:	edc8 6a00 	vstr	s13, [r8]
 800e928:	ed88 7a01 	vstr	s14, [r8, #4]
 800e92c:	edc8 7a02 	vstr	s15, [r8, #8]
 800e930:	e7d4      	b.n	800e8dc <__kernel_rem_pio2f+0x3b8>
 800e932:	ab30      	add	r3, sp, #192	; 0xc0
 800e934:	4622      	mov	r2, r4
 800e936:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e93a:	440b      	add	r3, r1
 800e93c:	2a00      	cmp	r2, #0
 800e93e:	da24      	bge.n	800e98a <__kernel_rem_pio2f+0x466>
 800e940:	b34f      	cbz	r7, 800e996 <__kernel_rem_pio2f+0x472>
 800e942:	eef1 7a47 	vneg.f32	s15, s14
 800e946:	edc8 7a00 	vstr	s15, [r8]
 800e94a:	aa31      	add	r2, sp, #196	; 0xc4
 800e94c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e950:	2301      	movs	r3, #1
 800e952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e956:	429c      	cmp	r4, r3
 800e958:	da20      	bge.n	800e99c <__kernel_rem_pio2f+0x478>
 800e95a:	b10f      	cbz	r7, 800e960 <__kernel_rem_pio2f+0x43c>
 800e95c:	eef1 7a67 	vneg.f32	s15, s15
 800e960:	edc8 7a01 	vstr	s15, [r8, #4]
 800e964:	e7ba      	b.n	800e8dc <__kernel_rem_pio2f+0x3b8>
 800e966:	ab30      	add	r3, sp, #192	; 0xc0
 800e968:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 800e828 <__kernel_rem_pio2f+0x304>
 800e96c:	440b      	add	r3, r1
 800e96e:	2c00      	cmp	r4, #0
 800e970:	da05      	bge.n	800e97e <__kernel_rem_pio2f+0x45a>
 800e972:	b10f      	cbz	r7, 800e978 <__kernel_rem_pio2f+0x454>
 800e974:	eef1 7a67 	vneg.f32	s15, s15
 800e978:	edc8 7a00 	vstr	s15, [r8]
 800e97c:	e7ae      	b.n	800e8dc <__kernel_rem_pio2f+0x3b8>
 800e97e:	ed33 7a01 	vldmdb	r3!, {s14}
 800e982:	3c01      	subs	r4, #1
 800e984:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e988:	e7f1      	b.n	800e96e <__kernel_rem_pio2f+0x44a>
 800e98a:	ed73 7a01 	vldmdb	r3!, {s15}
 800e98e:	3a01      	subs	r2, #1
 800e990:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e994:	e7d2      	b.n	800e93c <__kernel_rem_pio2f+0x418>
 800e996:	eef0 7a47 	vmov.f32	s15, s14
 800e99a:	e7d4      	b.n	800e946 <__kernel_rem_pio2f+0x422>
 800e99c:	ecb2 7a01 	vldmia	r2!, {s14}
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9a6:	e7d6      	b.n	800e956 <__kernel_rem_pio2f+0x432>
 800e9a8:	edd2 7a00 	vldr	s15, [r2]
 800e9ac:	3801      	subs	r0, #1
 800e9ae:	edd2 6a01 	vldr	s13, [r2, #4]
 800e9b2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e9b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9ba:	ed82 7a00 	vstr	s14, [r2]
 800e9be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9c2:	edc2 7a01 	vstr	s15, [r2, #4]
 800e9c6:	e798      	b.n	800e8fa <__kernel_rem_pio2f+0x3d6>
 800e9c8:	edd3 7a00 	vldr	s15, [r3]
 800e9cc:	3a01      	subs	r2, #1
 800e9ce:	edd3 6a01 	vldr	s13, [r3, #4]
 800e9d2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e9d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e9da:	ed83 7a00 	vstr	s14, [r3]
 800e9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9e2:	edc3 7a01 	vstr	s15, [r3, #4]
 800e9e6:	e78d      	b.n	800e904 <__kernel_rem_pio2f+0x3e0>
 800e9e8:	ed33 7a01 	vldmdb	r3!, {s14}
 800e9ec:	3c01      	subs	r4, #1
 800e9ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9f2:	e78f      	b.n	800e914 <__kernel_rem_pio2f+0x3f0>
 800e9f4:	eef1 6a66 	vneg.f32	s13, s13
 800e9f8:	eeb1 7a47 	vneg.f32	s14, s14
 800e9fc:	eef1 7a67 	vneg.f32	s15, s15
 800ea00:	edc8 6a00 	vstr	s13, [r8]
 800ea04:	ed88 7a01 	vstr	s14, [r8, #4]
 800ea08:	e790      	b.n	800e92c <__kernel_rem_pio2f+0x408>
 800ea0a:	bf00      	nop

0800ea0c <scalbnf>:
 800ea0c:	ee10 3a10 	vmov	r3, s0
 800ea10:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800ea14:	d02a      	beq.n	800ea6c <scalbnf+0x60>
 800ea16:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ea1a:	d302      	bcc.n	800ea22 <scalbnf+0x16>
 800ea1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ea20:	4770      	bx	lr
 800ea22:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ea26:	d122      	bne.n	800ea6e <scalbnf+0x62>
 800ea28:	4b23      	ldr	r3, [pc, #140]	; (800eab8 <scalbnf+0xac>)
 800ea2a:	eddf 7a24 	vldr	s15, [pc, #144]	; 800eabc <scalbnf+0xb0>
 800ea2e:	4298      	cmp	r0, r3
 800ea30:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ea34:	db16      	blt.n	800ea64 <scalbnf+0x58>
 800ea36:	ee10 3a10 	vmov	r3, s0
 800ea3a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ea3e:	3a19      	subs	r2, #25
 800ea40:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ea44:	4288      	cmp	r0, r1
 800ea46:	dd14      	ble.n	800ea72 <scalbnf+0x66>
 800ea48:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800eac0 <scalbnf+0xb4>
 800ea4c:	ee10 3a10 	vmov	r3, s0
 800ea50:	eddf 6a1c 	vldr	s13, [pc, #112]	; 800eac4 <scalbnf+0xb8>
 800ea54:	eeb0 7a67 	vmov.f32	s14, s15
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800ea5e:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ea62:	4770      	bx	lr
 800ea64:	eddf 7a18 	vldr	s15, [pc, #96]	; 800eac8 <scalbnf+0xbc>
 800ea68:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ea6c:	4770      	bx	lr
 800ea6e:	0dd2      	lsrs	r2, r2, #23
 800ea70:	e7e6      	b.n	800ea40 <scalbnf+0x34>
 800ea72:	4410      	add	r0, r2
 800ea74:	28fe      	cmp	r0, #254	; 0xfe
 800ea76:	dce7      	bgt.n	800ea48 <scalbnf+0x3c>
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	dd06      	ble.n	800ea8a <scalbnf+0x7e>
 800ea7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ea80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ea84:	ee00 3a10 	vmov	s0, r3
 800ea88:	4770      	bx	lr
 800ea8a:	f110 0f16 	cmn.w	r0, #22
 800ea8e:	da09      	bge.n	800eaa4 <scalbnf+0x98>
 800ea90:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800eac8 <scalbnf+0xbc>
 800ea94:	ee10 3a10 	vmov	r3, s0
 800ea98:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800eacc <scalbnf+0xc0>
 800ea9c:	eeb0 7a67 	vmov.f32	s14, s15
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	e7da      	b.n	800ea5a <scalbnf+0x4e>
 800eaa4:	3019      	adds	r0, #25
 800eaa6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800eaaa:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ead0 <scalbnf+0xc4>
 800eaae:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800eab2:	ee07 3a90 	vmov	s15, r3
 800eab6:	e7d7      	b.n	800ea68 <scalbnf+0x5c>
 800eab8:	ffff3cb0 	.word	0xffff3cb0
 800eabc:	4c000000 	.word	0x4c000000
 800eac0:	7149f2ca 	.word	0x7149f2ca
 800eac4:	f149f2ca 	.word	0xf149f2ca
 800eac8:	0da24260 	.word	0x0da24260
 800eacc:	8da24260 	.word	0x8da24260
 800ead0:	33000000 	.word	0x33000000

0800ead4 <floorf>:
 800ead4:	febb 0a40 	vrintm.f32	s0, s0
 800ead8:	4770      	bx	lr
	...

0800eadc <_init>:
 800eadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eade:	bf00      	nop
 800eae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eae2:	bc08      	pop	{r3}
 800eae4:	469e      	mov	lr, r3
 800eae6:	4770      	bx	lr

0800eae8 <_fini>:
 800eae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaea:	bf00      	nop
 800eaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaee:	bc08      	pop	{r3}
 800eaf0:	469e      	mov	lr, r3
 800eaf2:	4770      	bx	lr
